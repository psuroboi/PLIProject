 /* RCBBAHM - UPDATE FOR RCBV0010_CUSTOMER                           */
 /*                                                                  */
 /* 5695-153 (C) COPYRIGHT IBM EMEA WORLD TRADE CORPORATION 1991     */
 /* LICENSED MATERIAL - PROGRAM PROPERTY OF IBM                      */
 /* REFER TO COPYRIGHT INSTRUCTIONS: FORM G120-2083                  */
 /*                                                                  */
 /********************************************************************/
 /* PROGRAM          : RCBBAHP                                       */
 /*                                                                  */
 /* LANGUAGE         : PLI                                           */
 /*                                                                  */
 /* DATE GENERATED   : 1 JUL 2002 - 13:12:15                         */
 /*                                                                  */
 /* GENERATED BY     : RCBB1PZ0 - GENERATE UPDATE PROGRAM            */
 /*                                                                  */
 /* TYPE             : BMP                                           */
 /*                                                                  */
 /* DESCRIPTION      : UPDATE FOR RCBV0010_CUSTOMER                  */
 /*                    THE UPDATE PROCESS IS OF TYPE 2,              */
 /*                    DATES INVOLVED, EFF. DATE NOT PART OF KEY     */
 /*                                                                  */
 /* INPUT            : - DB2   : RCBV0010_CUSTOMER                   */
 /*                              RCBV0500_PARM                       */
 /*                    - FILES : ACTIONS  RCBBAC1                    */
 /*                              PROCID   RCBPROC                    */
 /*                                                                  */
 /* OUTPUT           : - DB2   : RCBV0010_CUSTOMER                   */
 /*                    - FILES : MESSAGE  RCB0M1F0                   */
 /*                                                                  */
 /* EXTERNAL MODULES : - RCB0E1M   COMMON ERROR ROUTINE              */
 /*                    - RCB0M1M   COMMON MESSAGE ROUTINE            */
 /*                    - RCB0T1M   SYSTEM DATE                       */
 /*                    - RCB018M   CALCULATE HASH TOTALS             */
 /*                    - RCBF01M   INSERT BUILDING BLOCK             */
 /*                    - RCBG01M   UPDATE BUILDING BLOCK             */
 /*                    - RCBH01M   DELETE BUILDING BLOCK             */
 /*                    - RCBI50M   REFERENCE PARAMETER               */
 /*                    - RCB024M   LOCK DB2 TABLE PARTITIONS RC01219 */
 /*                                                                  */
 /* MESSAGES         : 0001,0003,0007,0013,...,0019,0021,0148,       */
 /*                    0163,0174,0175,0183,I050,9998,9999            */
 /*                                                                  */
 /*                                                                  */
 /*                                                                  */
 /* NOTE : THE ACTION FILE WILL FIRST BE PRE-PROCESSED IN ORDER      */
 /*        TO CHECK THE HASH TOTALS BEFORE ACTUALLY UPDATING THE     */
 /*        CEDS TABLES. FIRST THE FILE WILL BE SEQUENTIALLY READ     */
 /*        AND PER COUNTRY THE HASH TOTALS WILL BE CALCULATED AND    */
 /*        STORED IN WRK_HASH_AREA. THEY HAVE TO BE STORED THERE     */
 /*        TEMPORARY AND CAN BE CHECKED AGAINST RCB024 AFTER AN      */
 /*        XRST CALL HAS BEEN DONE. (BEFORE AN XRST CALL NO SQL      */
 /*        STATEMENTS CAN BE ISSUED, AFTER AN XRST CALL NO SEQ. PLI  */
 /*        READ CAN BE DONE ANYMORE, BECAUSE THEN THE POSITION IN    */
 /*        THE FILE WILL BE LOST).                                   */
 /*                                                                  */
 /*                                                                  */
 /* THE FOLLOWING EXCEPTION ROUTINES HAVE BEEN APPLIED DURING        */
 /* GENERATION :  0 5 G                                              */
 /*                                                                  */
 /* MAINTENANCE LOG  :                                               */
 /* ---------------                                                  */
 /*                                                                  */
 /* DATE       | WORK-ITEMNO. | DESCRIPTION                          */
 /* ---------------------------------------------------------------  */
 /* 1992-03-02 | ----         | CEDS FIRST IMPLEMENTATION            */
 /* 1992-07-20 | CED0001      | QF A1: HASH TOTAL & TIMESTAMP CHECK  */
 /* 1992-09-15 | CED0002      | APG FIX (DC/DK FOR EMEA AND APG)     */
 /* 1993-02-15 | RC1032       | MCO                                  */
 /* 1993-08-13 | PTM 381      | SEE PTM DESCRIPTION                  */
 /* 1994-05-27 | PTM 519      | SEE PTM DESCRIPTION                  */
 /* 1995-08-07 | RB01140      | TABLE CHANGES       (DG)             */
 /*            | RB01140      | IMPROVE PERFORMANCE (DG)             */
 /*            | RC01141      | FILL SEQUENCE_KEY   (DG)             */
 /*            | RC01141      | MESSAGE CHANGE      (DG)             */
 /* 1997-04-09 | PTM1036      | USE STANDARD PROLOG                  */
 /* 1997-06-11 | PTM1005      | CHANGE CHECKPOINT_LENGTH TO 30       */
 /* 1998-02-27 | PTM1160      | OU_CODE DEFAULT FOR ITALY            */
 /* 1999-02-24 | PTM1251      | CHECK OU WHEN 'INSERT' RECORDS SHOULD*/
 /*            |              | BE 'UPDATE' RECORDS                  */
 /* 1999-07-28 | RC01219      | DORO                                 */
 /* 2013-02-25 | RC01328      | PCR CEDSP-0348 TO CONSIDER GERMANY   */
 /*            |              | FOR DELETE AS PART OF BH             */
 /* 2017-05-03 | RC01393      | PCEDSP-0531 ADD DUMMY CUSTOMER NAME  */
 /*            |              | AS "CREATED BY CEDS" FOR DELETED     */
 /*            |              | CUSTOMER WITH ACTIVE INVENTORY       */
 /********************************************************************/
1RCBBAHM: PROC    (PTR_PCB_IO,                    /* PCB PTR         */
                   PTR_RCBBAC1)                   /* GSAM FILE PTR   */
          OPTIONS (MAIN)
          REORDER;
0/********************************************************************/
 /*  PARAMETERS                                                      */
 /********************************************************************/
0DCL PTR_PCB_IO              PTR;
 DCL PTR_RCBBAC1             PTR;
0/********************************************************************/
 /* FILE DECLARATIONS                                                */
 /********************************************************************/
 DCL RCBBAC1        FILE             /* INPUT ACTION FILE            */
                    RECORD
                    INPUT;
 DCL RCBPROC        FILE             /* INPUT CARD FOR PROC_ID       */
                    RECORD
                    INPUT;
0/********************************************************************/
 /* EXTERNAL ENTRIES                                                 */
 /********************************************************************/
0DCL PLIXOPT   VAR    EXTERNAL  CHAR (256)
               INIT ('NOSTAE,ISA(32K),REPORT,HEAP(16K,ANYWHERE)');
 DCL PLITDLI   ENTRY  EXTERNAL;
0DCL RCB0E1M   ENTRY  EXTERNAL;      /* COMMON ERROR ROUTINE         */
 DCL RCB0M1M   ENTRY  EXTERNAL;      /* COMMON MESSAGE ROUTINE       */
 DCL RCB0T1M   ENTRY  EXTERNAL;      /* RETRIEVE SYSTEM DATE         */
 DCL RCB018M   ENTRY  EXTERNAL;      /* CALCULATE HASH TOTALS        */
 DCL RCBF01M   ENTRY  EXTERNAL;      /* INSERT BUILDING BLOCK        */
 DCL RCBG01M   ENTRY  EXTERNAL;      /* UPDATE BUILDING BLOCK        */
 DCL RCBH01M   ENTRY  EXTERNAL;      /* DELETE BUILDING BLOCK        */
 DCL RCBI50M   ENTRY  EXTERNAL;      /* REFERENCE PARAMETER          */
 DCL RCB024M   ENTRY  EXTERNAL;      /* LOCK DB2 TABLE PARTITION     */
0/********************************************************************/
 /* EXTERNAL PARAMETER INTERFACES                                    */
 /********************************************************************/
0DCL PTR_INT_AREA     PTR;
 DCL PTR_RET_AREA_BB  PTR;
0DCL 1 PARM_INT_AREA,
       %INCLUDE (RCBZ01S);;
 DCL 1 PARM_RET_AREA_BB,
       %INCLUDE (RCBZ02S);;
 DCL 1 PARM_RCB024M,                           /* RCB024M PARM       */
      %INCLUDE (RCBZ33S);;
1/********************************************************************/
 /*  IMS CONSTANTS                                                   */
 /********************************************************************/
0DCL 1 IMS_CONSTANTS,
       %INCLUDE (RCBZ04S);;
0/********************************************************************/
 /*  IMS CHECKPOINT/RESTART/ROLLBACK FIELDS                          */
 /********************************************************************/
0DCL CHKP_CNT_STEPS FIXED BIN (31);
 DCL CHKP_LEN_IO    FIXED BIN (31) INIT (30);
 DCL CHKP_LEN_AREA  FIXED BIN (31);
0DCL 1 CHKP_ID,
       %INCLUDE (RCBZ11S);;          /* SOURCE INFO FOR CHKP_ID      */
 DCL 1 CHKP_XRST,
       %INCLUDE (RCBZ12S);;          /* SOURCE INFO FOR CHKP_XRST    */
 DCL 1 CHKP_AREA,
       %INCLUDE (RCBZ14S);,          /* SOURCE INFO FOR CHKP_AREA    */
       2 COUNT,
         3 CNT_CTRY,
           5 ACTIONS       FIXED BIN(31),
           5 UPDATES       FIXED BIN(31),
           5 DELETES       FIXED BIN(31),
           5 INSERTS       FIXED BIN(31),
           5 SKIPPED       FIXED BIN(31),
         3 CNT_TOT,
           5 ACTIONS       FIXED BIN(31),
           5 UPDATES       FIXED BIN(31),
           5 DELETES       FIXED BIN(31),
           5 INSERTS       FIXED BIN(31),
           5 SKIPPED       FIXED BIN(31),
       2 KEY_VALUES,
         3 CTRYNO          CHAR(03);
0/********************************************************************/
 /* IMS PCB STRUCTURES                                               */
 /********************************************************************/
0DCL 1 PCB_IO         BASED (PTR_PCB_IO),
       %INCLUDE (RCBZ16S);;
 DCL 1 PCB_RCBBAC1    BASED (PTR_RCBBAC1),
       %INCLUDE (RCBZ10S);;
0/********************************************************************/
 /* DB2 TABLE STRUCTURES                                             */
 /********************************************************************/
0DCL RCB010S_PTR        PTR;
 DCL RCB010SI_PTR       PTR;
 DCL RCBV500_PTR        PTR;
 DCL RCBV500I_PTR       PTR;
0DCL 1 RCB010S,
       %INCLUDE (RCB010S);;
 DCL 1 RCB010SI,
       %INCLUDE (RCB010SI);;
0DCL 1 TB_RCBV500,
       %INCLUDE (RCB500S);;
 DCL 1 TB_RCBV500_I,
       %INCLUDE (RCB500SI);;
 DCL 1 TB_RCBP12S             BASED (RCBV500_PTR),
       %INCLUDE (RCBP12S);;
 DCL 1 TB_RCBP24S             BASED (RCBV500_PTR),
       %INCLUDE (RCBP24S);;
0DCL 1 RCB190S,                                       /* SOC RC01393 */
       %INCLUDE (RCB190S);;
 DCL 1 RCB190SI,
       %INCLUDE (RCB190SI);;                          /* EOC RC01393 */
0/********************************************************************/
 /*  RECORD STRUCTURES FOR INPUT FILES                               */
 /********************************************************************/
0DCL 1 RCBBAC1_IOAREA              CHAR(133);
 DCL 1 RCBBAC1_HEADER              BASED (ADDR (RCBBAC1_IOAREA)),
       %INCLUDE (RCBBAASH);;
 DCL 1 RCBBAC1_TRAILER             BASED (ADDR (RCBBAC1_IOAREA)),
       %INCLUDE (RCBBAAST);;
 DCL 1 RCBBAC1_RECORD              BASED (ADDR (RCBBAC1_IOAREA)),
       %INCLUDE (RCBBAAS2);,
       3 RCB010S,
         %INCLUDE (RCB010S);,
       3 RCB010SI,
         %INCLUDE (RCB010SI);;
 DCL 1 RCBPROC_REC,
       %INCLUDE (RCBZ27S);;
0/********************************************************************/
 /*  PROGRAM CONTROL PARAMETERS                                      */
 /********************************************************************/
 DCL 1 RCBP12S,
       %INCLUDE (RCBP12S);;
 DCL 1 RCBP24S,
       %INCLUDE (RCBP24S);;
0/********************************************************************/
 /*  COUNTS                                                          */
 /********************************************************************/
0DCL CNT_HASH_TOTAL       FIXED DEC (15,0) INIT (0);
 DCL CNT_PIC9             PIC '(09)9';
 DCL CNT_PIC15            PIC '(15)9';
0/********************************************************************/
 /*  LOOP CONTROL FIELDS                                             */
 /********************************************************************/
0DCL 1 SSK,                          /* SMALLEST SORT KEY            */
      3 EOF                  CHAR(1)      INIT('0'),
      3 REC_TYPE             CHAR(2),
      3 CTRYNO               CHAR(3),
      3 COUNTRY_NUMBER       CHAR(3),
      3 CUSTOMER_NUMBER      CHAR(8),
      3 END                  CHAR(0);
0DCL 1 PREV_SSK           LIKE SSK;
0/********************************************************************/
 /*  BIT SWITCHES                                                    */
 /********************************************************************/
0DCL TRUE                  BIT (1)         INIT ('1'B);
 DCL FALSE                 BIT (1)         INIT ('0'B);
 DCL SWITCH_EOF_RCBPROC    BIT (1)         INIT ('0'B);
 DCL SWITCH_UPDATE         BIT (1)         INIT ('0'B);   /* RC01393 */
0/********************************************************************/
 /*  ALL OTHER USED TEMPORARY FIELDS                                 */
 /********************************************************************/
0DCL 1 WRK_FIELDS,
       3 WRK_MOD_NAME       CHAR (08),
       3 WRK_PGM_NAME       CHAR (08),
       3 WRK_SYSTEM_TYPE    CHAR (01) INIT ('I'),
       3 WRK_HASH_FIELD     CHAR (04),
       3 WRK_TIME_STAMP     CHAR (20),
       3 WRK_SOURCE_IND     CHAR (01),
       3 WRK_RCBBAC1        CHAR (07) INIT ('RCBBAC1'),
       3 WRK_CHKP_LIMIT     PIC '(9)9',
       3 WRK_CURR_DATE      CHAR (10),
       3 WRK_DIM            FIXED BIN (15,0),
       3 WRK_IDX            FIXED BIN (15,0);
 DCL 1 WRK_RCBZ29S,
       %INCLUDE (RCBZ29S);;
0DCL 1 WRK_HASH_AREA,
       %INCLUDE (RCBZ30S);;
0/********************************************************************/
 /*  BUILTIN FUNCTIONS                                               */
 /********************************************************************/
0DCL (ADDR,
      NULL,
      LOW,
      DIM,
      STORAGE,
      STRING,
      SUBSTR,
      VERIFY)  BUILTIN;
0/********************************************************************/
 /* ON ENDFILE CONDITIONS                                            */
 /********************************************************************/
0ON ENDFILE (RCBBAC1)
    BEGIN;
      SSK.EOF = '1';
    END;
 ON ENDFILE (RCBPROC)                /*   INPUT CARD                 */
    BEGIN;
     SWITCH_EOF_RCBPROC = TRUE;
    END;
0/********************************************************************/
 /* ON ERROR CONDITIONS                                              */
 /********************************************************************/
0%INCLUDE (RCB0E0M);
   END;
0/********************************************************************/
 /* DB2/SQL SQLCA                                                    */
 /********************************************************************/
0EXEC SQL
   INCLUDE SQLCA
   ;
1/********************************************************************/
 /*                 S T A R T   P R O C E S S I N G                  */
 /********************************************************************/
0CALL RCBBAHM_INIT_PROGRAM;

1/********************************************************************/
 /*                 S T A R T   P R E  -  P R O C E S S I N G        */
 /********************************************************************/
0CALL RCBBAHM_PRE_INIT;
0DO WHILE (RCBBAC1_RECORD.REC_TYPE ¬= '99' &        /* WHILE NOT EOF */
           SSK.EOF ¬= '1');

   CALL RCBBAHM_PRE_INIT_COUNTRY;

0  DO WHILE (SUBSTR (STRING (PREV_SSK), 1, 6)  /* WHILE SAME COUNTRY */
             = SUBSTR (STRING (SSK), 1, 6));
     CALL RCBBAHM_PRE_PROCESS;
     CALL RCBBAHM_PRE_READ_FILE;
   END;

   CALL RCBBAHM_PRE_END_COUNTRY;
0END;
0CALL RCBBAHM_PRE_END;


0CALL RCBBAHM_CHKP_RESTART;
0IF CHKP_AREA.CNT_NUM = 1            /* NORMAL START                 */
 THEN
   DO;                               /* OPEN FILES                   */
     CALL RCBBAHM_OPEN_FILE_RCBBAC1;
     CALL RCBBAHM_READ_FILE_RCBBAC1;       /* READ HEADER RECORD     */
     CALL RCBBAHM_READ_FILE_RCBBAC1;       /* READ FIRST DATA RECORD */
   END;

 CALL RCBBAHM_CHECK_HASH;            /* CHECK HASH TOTAL & TIMESTAMP */
 /* RC01219: MOVE RCBBAHM_LOCK_TABLE CALL TO RCBBAHM_INIT_COUNTRY    */

1/********************************************************************/
 /*                 S T A R T   U P D A T I N G                      */
 /********************************************************************/
0DO WHILE (RCBBAC1_RECORD.REC_TYPE ¬= '99' &        /* WHILE NOT EOF */
           SSK.EOF ¬= '1');

0  CALL RCBBAHM_INIT_COUNTRY;

0  DO WHILE (SUBSTR (STRING (PREV_SSK), 1, 6)  /* WHILE SAME COUNTRY */
             = SUBSTR (STRING (SSK), 1, 6));
     COUNT.CNT_CTRY.ACTIONS = COUNT.CNT_CTRY.ACTIONS + 1;
     CALL RCBBAHM_INIT_ACTION;

         CALL RCBBAHM_ISSUE_ACTION_MESSAGE;
         SELECT (RCBBAC1_RECORD.ACTION_IND);

           WHEN ('I') DO;
             CALL RCBBAHM_INSERT;
             END;

           WHEN ('U') DO;
             CALL RCBBAHM_UPDATE;
             END;

           WHEN ('D') DO;
                                                      /* SOC RC01328*/
                                   /* SKIP FOR GERMANY      PTM0920 */
       /*    IF SSK.COUNTRY_NUMBER ¬= '724'
             THEN DO;
               CALL RCBBAHM_DELETE;
               END;
             END; */
             CALL RCBBAHM_DELETE;
             END;                                     /* EOC RC01328*/

           OTHERWISE
             DO;
               CALL RCBBAHM_ISSUE_INV_ACTION;
               CALL RCBBAHM_ERROR (NULL(),            /* ABEND       */
                                  'OTHER',
                                  '#001');
             END;
         END;   /* SELECT */

0    IF RCBP12S.CHKP_LIMIT ¬= 0 & (CHKP_CNT_STEPS > RCBP12S.CHKP_LIMIT)
     THEN
       DO;
         CALL RCBBAHM_CHKP_ISSUE;
       END;
0    CALL RCBBAHM_READ_FILE_RCBBAC1;       /* READ NEXT RECORD */
   END;

   CALL RCBBAHM_END_COUNTRY;
 END;
0CALL RCBBAHM_TERM;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : INIT_PROGRAM                                  */
 /*                                                                  */
 /* DESCRIPTION      : INITIALISE PROGRAM                            */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_INIT_PROGRAM: PROC;
                                     /* INITIALISE POINTERS          */
 PTR_INT_AREA      = ADDR (PARM_INT_AREA);
 PTR_RET_AREA_BB   = ADDR (PARM_RET_AREA_BB);
 RCB010S_PTR       = ADDR (RCB010S);
 RCB010SI_PTR      = ADDR (RCB010SI);
 RCBV500_PTR       = ADDR (TB_RCBV500);
 RCBV500I_PTR      = ADDR (TB_RCBV500_I);
                                     /* INITIALISE MESSAGE AREA      */
 WRK_MOD_NAME                 = SDAISTP.SDAINAM;
 WRK_PGM_NAME                 = SUBSTR(WRK_MOD_NAME,1,6) || 'P';
 PARM_INT_AREA.MSG_AREA       = '';
 PARM_INT_AREA.ERR_AREA       = '';
 PARM_INT_AREA.MSG_REQUEST    = 'O';
 PARM_INT_AREA.MSG_TARGET     = 'F';
 PARM_INT_AREA.ID_SOURCE_APPL = 'RCB';
 PARM_INT_AREA.ID_SOURCE_PROG = WRK_PGM_NAME;
 PARM_INT_AREA.ID_MOD_PATH(1) = WRK_MOD_NAME;
 PARM_INT_AREA.ID_MOD_LEVEL   = 1;
 PARM_INT_AREA.SYSTEM_TYPE    = WRK_SYSTEM_TYPE;
 PARM_INT_AREA.PTR_PCB_IO     = NULL;
 PARM_INT_AREA.PTR_PCB_ALT    = NULL;
0PARM_INT_AREA.COUNTRY_NUMBER = '';
                                     /* OPEN MESSAGE FILE            */
 CALL RCB0M1M(PTR_INT_AREA);
                                     /* RETRIEVE SYSTEM DATE         */
 CALL RCB0T1M(PTR_INT_AREA);
                                     /* INITIALISE CHECKPOINT AREAS  */
 CHKP_ID.NAME    = SUBSTR  (PARM_INT_AREA.ID_SOURCE_PROG,4,3);
 CHKP_LEN_AREA   = STORAGE (CHKP_AREA);

 OPEN FILE (RCBPROC);
 READ FILE (RCBPROC) INTO (RCBPROC_REC);  /* READ RCBPROC CARD */

 IF SWITCH_EOF_RCBPROC
 THEN
   DO;
     PARM_INT_AREA.MSG_VAR_CODES    = '';
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MESSAGE_NUMBER   = '0013';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBPROC';
     CALL RCB0M1M (PTR_INT_AREA);
     CALL RCBBAHM_ERROR (NULL(), 'OTHER', '#002');
   END;

 PARM_INT_AREA.PROC_ID = RCBPROC_REC.PROC_ID;            /* PTM 519 */

 CLOSE FILE (RCBPROC);
                                     /* INITIALISE OTHER FIELDS      */
 END RCBBAHM_INIT_PROGRAM;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : PRE_INIT                                      */
 /*                                                                  */
 /* DESCRIPTION      : INITIAL ACTIONS TO PRE-PROCESS THE FILE       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_PRE_INIT: PROC;

0COUNT         = '';
0SSK.EOF       = '0';
0WRK_HASH_AREA = '';
0WRK_DIM       = DIM (WRK_HASH_AREA.CTRYNO, 1);
0WRK_IDX       = 0;

0OPEN FILE (RCBBAC1);
0CALL RCBBAHM_PRE_READ_FILE;                       /* READ HEADER    */

0SELECT;
   WHEN (SSK.EOF = '1')
     DO;
       CALL RCBBAHM_ISSUE_EMPTY_FILE;
       CALL RCBBAHM_ERROR(NULL,'OTHER','#003');
     END;
   WHEN (RCBBAC1_HEADER.REC_TYPE ¬= '01')
     DO;
       CALL RCBBAHM_ISSUE_NO_HEADER;
       CALL RCBBAHM_ERROR(NULL,'OTHER','#004');
     END;
   WHEN (RCBBAC1_HEADER.FILE_ID ¬= WRK_RCBBAC1)
     DO;
       CALL RCBBAHM_ISSUE_INV_HEADER;
       CALL RCBBAHM_ERROR(NULL,'OTHER','#005');
     END;
   OTHERWISE;
 END;

0WRK_TIME_STAMP = RCBBAC1_HEADER.TIMESTAMP;
0WRK_SOURCE_IND = RCBBAC1_HEADER.SOURCE_INDICATOR;
0CALL RCBBAHM_PRE_READ_FILE;                       /* READ DATA      */

0END RCBBAHM_PRE_INIT;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : PRE_INIT_COUNTRY                              */
 /*                                                                  */
 /* DESCRIPTION      : INITIAL ACTIONS FOR A COUNTRY DURING          */
 /*                    PRE-PROCESSING THE ACTION FILE                */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_PRE_INIT_COUNTRY: PROC;
0PARM_INT_AREA.COUNTRY_NUMBER = SSK.CTRYNO;
0CNT_HASH_TOTAL               = 0 ;
0PREV_SSK                     = SSK;
0WRK_IDX                      = WRK_IDX + 1;
0IF WRK_IDX <= WRK_DIM
 THEN
   DO;
     WRK_HASH_AREA.COUNT_CTRY       = WRK_HASH_AREA.COUNT_CTRY + 1;
     WRK_HASH_AREA.CTRYNO (WRK_IDX) = RCBBAC1_RECORD.CTRYNO;
   END;
 ELSE
   DO;
     CALL RCBBAHM_ERROR (NULL(),                    /* ABEND         */
                        'OTHER',
                        '#006');
   END;
0END RCBBAHM_PRE_INIT_COUNTRY;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : PRE_READ_FILE                                 */
 /*                                                                  */
 /* DESCRIPTION      : READ FILE DURING PRE-PROCESSING               */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_PRE_READ_FILE: PROC;
0READ FILE (RCBBAC1) INTO (RCBBAC1_IOAREA);
0IF SSK.EOF = '0'
 THEN
   DO;
     PREV_SSK     = SSK;
     SSK.REC_TYPE = RCBBAC1_RECORD.REC_TYPE;
     SELECT (RCBBAC1_RECORD.REC_TYPE);
       WHEN ('01');
       WHEN ('02')
         DO;
           SSK.CTRYNO             = RCBBAC1_RECORD.CTRYNO;
           SSK.COUNTRY_NUMBER     = RCBBAC1_RECORD.COUNTRY_NUMBER;
           SSK.CUSTOMER_NUMBER    = RCBBAC1_RECORD.CUSTOMER_NUMBER;
           COUNT.CNT_TOT.ACTIONS  = COUNT.CNT_TOT.ACTIONS + 1;
         END;
       WHEN ('99');
       OTHERWISE
         DO;
           CALL RCBBAHM_ISSUE_INV_REC_TYPE;
           CALL RCBBAHM_ERROR (NULL(),               /* ABEND       */
                              'OTHER',
                              '#007');
         END;
     END;
     PARM_INT_AREA.SEQUENCE_KEY = STRING(SSK);        /* RC01141 */
   END;
0END RCBBAHM_PRE_READ_FILE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : PRE_PROCESS                                   */
 /*                                                                  */
 /* DESCRIPTION      : PROCESS THE FILE DATA RECORD DURING PRE-PROC. */
 /*                    COUNT HASH TOTAL                              */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_PRE_PROCESS: PROC;
0WRK_HASH_FIELD =
     SUBSTR (RCBBAC1_RECORD.RCB010S.CUSTOMER_NUMBER, 3, 4);
0CALL RCB018M (WRK_HASH_FIELD,
               CNT_HASH_TOTAL,
               PTR_INT_AREA);
0END RCBBAHM_PRE_PROCESS;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : PRE_END_COUNTRY                               */
 /*                                                                  */
 /* DESCRIPTION      : ENDING ACTION FOR A COUNTRY DURING            */
 /*                    PRE-PROCESSING. STORE CALCULATED HASH TOTAL   */
 /*                    IN THE WRK_HASH_AREA.                         */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_PRE_END_COUNTRY: PROC;
0WRK_HASH_AREA.HASH_TOTAL (WRK_IDX) = CNT_HASH_TOTAL;
 WRK_HASH_AREA.TIME_STAMP (WRK_IDX) = WRK_TIME_STAMP;
0END RCBBAHM_PRE_END_COUNTRY;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : PRE_END                                       */
 /*                                                                  */
 /* DESCRIPTION      : ENDING ACTIONS FOR PRE-PROCESSING             */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_PRE_END: PROC;
0IF SSK.EOF = '1'
 THEN
   DO;
     CALL RCBBAHM_ISSUE_NO_TRAILER;
     CALL RCBBAHM_ERROR (NULL(),                   /* ABEND          */
                         'OTHER',
                         '#008');
   END;
                                     /* CHECK RECORD COUNT TRAILER   */
0IF RCBBAC1_TRAILER.CNT_RECS ¬= COUNT.CNT_TOT.ACTIONS
 THEN
   DO;
     CALL RCBBAHM_ISSUE_INV_COUNT;
     CALL RCBBAHM_ERROR (NULL(),                   /* ABEND          */
                         'OTHER',
                         '#009');
   END;
                                     /* CHECK RECORDS AFTER TRAILER  */
0CALL RCBBAHM_PRE_READ_FILE;
0IF SSK.EOF ¬= '1'
 THEN
   DO;
     CALL RCBBAHM_ISSUE_REC_AFTER;
     CALL RCBBAHM_ERROR (NULL(),                   /* ABEND          */
                         'OTHER',
                         '#010');
   END;

 CLOSE FILE (RCBBAC1);

0SSK       = '';                     /* RESET VARIABLES              */
0PREV_SSK  = '';
0SSK.EOF   = '0';
0COUNT     = '';

0END RCBBAHM_PRE_END;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : CHECK_HASH                                    */
 /*                                                                  */
 /* DESCRIPTION      : CHECK THE CALCULATED HASH TOTALS AND THE      */
 /*                    HEADER TIME STAMP AGAINST THE RCB024          */
 /*                    PARAMETERS FOR EACH COUNTRY NUMBER.           */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_CHECK_HASH: PROC;

 DO WRK_IDX = 1 TO WRK_HASH_AREA.COUNT_CTRY;
   CALL RCBBAHM_RETRIEVE_RCBP24S (WRK_HASH_AREA.CTRYNO (WRK_IDX));

   IF WRK_HASH_AREA.TIME_STAMP (WRK_IDX) ¬= RCBP24S.TIME_STAMP
   THEN
     DO;
      PARM_INT_AREA.COUNTRY_NUMBER  = WRK_HASH_AREA.CTRYNO (WRK_IDX);
      PARM_INT_AREA.MSG_VAR_CODES   = '';
      PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
      PARM_INT_AREA.MESSAGE_NUMBER  = '0174';
      PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
      PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
      PARM_INT_AREA.MSG_VAR_CODE_7  = 'TP';
      PARM_INT_AREA.MSG_VAR_VALUE_7 =
                                    WRK_HASH_AREA.TIME_STAMP (WRK_IDX);
      PARM_INT_AREA.MSG_VAR_CODE_8  = 'TP';
      PARM_INT_AREA.MSG_VAR_VALUE_8 = RCBP24S.TIME_STAMP;
      CALL RCB0M1M (ADDR(PARM_INT_AREA));
      CALL RCBBAHM_ERROR (NULL(),                    /* ABEND         */
                          'OTHER',
                          '#011');
     END;

   IF WRK_HASH_AREA.HASH_TOTAL (WRK_IDX) ¬= RCBP24S.HASH_TOTAL
   THEN
     DO;
       PARM_INT_AREA.COUNTRY_NUMBER  = WRK_HASH_AREA.CTRYNO (WRK_IDX);
       PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
       PARM_INT_AREA.MESSAGE_NUMBER  = '0175';
       PARM_INT_AREA.MSG_VAR_CODES   = '';
       PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
       PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
       PARM_INT_AREA.MSG_VAR_CODE_7  = 'HT';
       CNT_PIC15                     =
                                     WRK_HASH_AREA.HASH_TOTAL (WRK_IDX);
       PARM_INT_AREA.MSG_VAR_VALUE_7 = CNT_PIC15;
       PARM_INT_AREA.MSG_VAR_CODE_8  = 'HT';
       CNT_PIC15                     = RCBP24S.HASH_TOTAL;
       PARM_INT_AREA.MSG_VAR_VALUE_8 = CNT_PIC15;
       CALL RCB0M1M(PTR_INT_AREA);
       CALL RCBBAHM_ERROR (NULL(),
                           'OTHER',
                           '#012');
     END;
 END;
0END RCBBAHM_CHECK_HASH;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : INIT_COUNTRY                                  */
 /*                                                                  */
 /* DESCRIPTION      : INITIALISE FOR A NEW COUNTRY                  */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_INIT_COUNTRY: PROC;
0PARM_INT_AREA.COUNTRY_NUMBER  = SSK.CTRYNO;
0COUNT.CNT_CTRY                = 0;                /* RESET COUNTERS */
 PREV_SSK                      = SSK;

0CALL RCBBAHM_LOCK_TABLE;                                 /* RC01219 */
 CALL RCBBAHM_RETRIEVE_RCBP12S;         /* CHECKPOINT LIMIT          */


 END RCBBAHM_INIT_COUNTRY;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : INIT_ACTION                                   */
 /*                                                                  */
 /* DESCRIPTION      : INITIALISE FOR AN ACTION RECORD               */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_INIT_ACTION: PROC;
0PARM_RET_AREA_BB       = '';
 WRK_CURR_DATE          = RCBBAC1_RECORD.RUN_DATE;
 PARM_INT_AREA.RUN_DATE = WRK_CURR_DATE;
 END RCBBAHM_INIT_ACTION;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_LOCK_TABLE                            */
 /*                                                                  */
 /* DESCRIPTION      : LOCK EXCLUSIVE TABLE RCBV0010_CUSTOMER        */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_LOCK_TABLE: PROC;
                                                      /* SOC RC01219 */
0PARM_RCB024M.COUNTRY_NUMBER = PARM_INT_AREA.COUNTRY_NUMBER;
 PARM_RCB024M.LOCK_MODE      = 'E';                /* EXCLUSIVE MODE */
 PARM_RCB024M.VIEW_NAME      = 'RCBT0010_CUSTOMER';

                                   /* LOCK DB2 TABLE PARTITIONS      */
 CALL RCB024M (ADDR(PARM_RCB024M),
               PTR_RET_AREA_BB,
               PTR_INT_AREA);

 SELECT(PARM_RET_AREA_BB.RETURN_CODE);
   WHEN (0);
   WHEN (4)                        /* INVALID OR AMBIGUOUS PARAMETER */
     DO;
       CALL RCBBAHM_ERROR (NULL, 'OTHER', '#013');
     END;
   OTHERWISE
     DO;
       CALL RCBBAHM_ERROR (ADDR (PARM_RET_AREA_BB.RETURN_SQL),
                                 'DB2',
                                 '#047');
     END;
 END;                                                 /* EOC RC01219 */
 END RCBBAHM_LOCK_TABLE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_OPEN_FILE_RCBBAC1                     */
 /*                                                                  */
 /* DESCRIPTION      : OPEN GSAM FILE                                */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_OPEN_FILE_RCBBAC1: PROC;
0CALL PLITDLI(TWO,
              OPEN,
              PTR_RCBBAC1);
 SELECT (PCB_RCBBAC1.ST_CODE);
 WHEN ('')
   DO;
     SSK.EOF = '0';
   END;
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR (ADDR (PCB_RCBBAC1),
                         'IMS_DB',
                         '#014');
   END;
 END;
 END RCBBAHM_OPEN_FILE_RCBBAC1;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_READ_FILE_RCBBAC1                     */
 /*                                                                  */
 /* DESCRIPTION      : READ RECORD FROM GSAM FILE                    */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_READ_FILE_RCBBAC1: PROC;
0CALL PLITDLI (THREE,
               GN,
               PTR_RCBBAC1,
               RCBBAC1_IOAREA);
0SELECT (PCB_RCBBAC1.ST_CODE);
 WHEN ('')
   DO;
     PREV_SSK        = SSK;
     CHKP_CNT_STEPS  = CHKP_CNT_STEPS + 1;
     SSK.REC_TYPE    = RCBBAC1_RECORD.REC_TYPE;
0    SELECT (RCBBAC1_RECORD.REC_TYPE);
     WHEN ('01');
     WHEN ('02')
       DO;
         SSK.CTRYNO               = RCBBAC1_RECORD.CTRYNO;
         SSK.COUNTRY_NUMBER     = RCBBAC1_RECORD.COUNTRY_NUMBER;
         SSK.CUSTOMER_NUMBER    = RCBBAC1_RECORD.CUSTOMER_NUMBER;
       END;
     WHEN ('99');
     OTHERWISE
       DO;
         CALL RCBBAHM_ISSUE_INV_REC_TYPE;
         CALL RCBBAHM_ERROR (NULL(),               /* ABEND          */
                            'OTHER',
                            '#016');
       END;
     END;
     PARM_INT_AREA.SEQUENCE_KEY = STRING(SSK);        /* RC01141 */
   END;
0WHEN ('GB')
   DO;
     SSK.EOF = '1';
   END;
0OTHERWISE
   DO;
     CALL RCBBAHM_ERROR (PTR_RCBBAC1,
                        'IMS_DB',
                        '#017');
   END;
 END;

 END RCBBAHM_READ_FILE_RCBBAC1;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_CLOSE_FILE_RCBBAC1                    */
 /*                                                                  */
 /* DESCRIPTION      : CLOSE GSAM FILE                               */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_CLOSE_FILE_RCBBAC1: PROC;
0CALL PLITDLI(TWO,
              CLSE,
              PTR_RCBBAC1);
 SELECT (PCB_RCBBAC1.ST_CODE);
 WHEN ('');
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR (ADDR (PCB_RCBBAC1),
                         'IMS_DB',
                         '#019');
   END;
 END;
 END RCBBAHM_CLOSE_FILE_RCBBAC1;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_RETRIEVE_RCBP12S                      */
 /*                                                                  */
 /* DESCRIPTION      : RETRIEVE THE RCB012 PARAMETER                 */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_RETRIEVE_RCBP12S:  PROC;
0PARM_RET_AREA_BB     = '';
 TB_RCBV500           = '';
 TB_RCBV500_I         = '';
 TB_RCBP12S.NUMBER    = 'RCB012';
 TB_RCBP12S.PGR_TYPE  = RCBBAC1_RECORD.PGR_TYPE;
 TB_RCBP12S.PGM_NAME  = WRK_PGM_NAME;
 TB_RCBP12S.CTRYNO    = RCBBAC1_RECORD.CTRYNO;
0CALL RCBI50M ('U',                                       /* RC01219 */
               RCBV500_PTR,
               RCBV500I_PTR,
               PTR_RET_AREA_BB,
               PTR_INT_AREA);
 SELECT(PARM_RET_AREA_BB.RETURN_CODE);
 WHEN (0)
   DO;
     RCBP12S = TB_RCBP12S;
   END;
 WHEN (4)
   DO;
     RCBP12S.CHKP_LIMIT = 0;
     CALL RCBBAHM_ISSUE_CHKP_LIMIT;
   END;
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR (ADDR (PARM_RET_AREA_BB.RETURN_SQL),
                         'DB2',
                         '#021');
   END;
 END;
 END RCBBAHM_RETRIEVE_RCBP12S;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RETRIEVE_RCBP24S                              */
 /*                                                                  */
 /* DESCRIPTION      : RETRIEVE PARAMETER RCB024 FOR A SPECIFIC      */
 /*                    COUNTRY NUMBER.                               */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_RETRIEVE_RCBP24S: PROC (PARM_CTRYNO);

 DCL PARM_CTRYNO  CHAR (03);

 TB_RCBV500                   = '';
 TB_RCBV500_I                 = '';
 TB_RCBP24S.NUMBER            = 'RCB024';
 TB_RCBP24S.PROC_ID           = RCBPROC_REC.PROC_ID;
 TB_RCBP24S.CTRYNO            = PARM_CTRYNO;
 TB_RCBP24S.FILE_NAME         = WRK_RCBBAC1;
 TB_RCBP24S.SEQ_NUMBER        = '01';

0CALL RCBI50M ('U',                                       /* RC01219 */
               ADDR(TB_RCBV500),
               ADDR(TB_RCBV500_I),
               PTR_RET_AREA_BB,
               PTR_INT_AREA);
0SELECT(PARM_RET_AREA_BB.RETURN_CODE);
 WHEN (0)
   DO;
     RCBP24S = TB_RCBP24S, BY NAME;
   END;
 WHEN (4)
   DO;
      PARM_INT_AREA.MESSAGE_TYPE      = 'IS';
      PARM_INT_AREA.MESSAGE_NUMBER    = 'I050';
      PARM_INT_AREA.MSG_VAR_CODES     = '';
      PARM_INT_AREA.MSG_VAR_CODE_6    = 'PN';
      PARM_INT_AREA.MSG_VAR_VALUE_6   = 'RCB024';
      PARM_INT_AREA.MSG_VAR_CODE_7    = 'PK';
      PARM_INT_AREA.MSG_VAR_VALUE_7   =  STRING (TB_RCBP24S.EXTRA_KEY);
      CALL RCB0M1M (PTR_INT_AREA);
      CALL RCBBAHM_ERROR (NULL,
                         'OTHER',
                         '#026');
   END;
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR (ADDR (PARM_RET_AREA_BB.RETURN_SQL),
                         'DB2',
                         '#027');
   END;
 END;

0END RCBBAHM_RETRIEVE_RCBP24S;
                                                      /* SOC RC01393 */
 /********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RETRIEVE                                      */
 /*                                                                  */
 /* DESCRIPTION      : RETRIEVE A ROW FROM  RCBV190 TABLE BASED  ON  */
 /*                    CUSTOMER NUMBER AND COUNTRY NO FROM RCBV010   */
 /*                                                                  */
 /********************************************************************/
 RCBBAHM_190_RETRIEVE: PROC;

 DCL WRK_A CHAR(01);
 EXEC SQL
    SELECT 'A'
    INTO :WRK_A
    FROM RCBV0190_HW_CUST
    WHERE COUNTRY_NUMBER      = :SSK.COUNTRY_NUMBER
      AND CUSTOMER_NUMBER     = :SSK.CUSTOMER_NUMBER;

 SELECT (SQLCA.SQLCODE);
   WHEN(0,-811)
     DO;
     SWITCH_UPDATE = TRUE;
     RCBBAC1_RECORD.CUSTOMER_NAME = 'CREATED BY CEDS';
     RCBBAC1_RECORD.END_DATE      = '9999-12-31';
     CALL RCBBAHM_UPDATE;
     END;
   WHEN(100)
     DO;
     SWITCH_UPDATE = FALSE;
     END;
   OTHERWISE
     DO;
        CALL RCBBAHM_ERROR(ADDR(PARM_RET_AREA_BB.RETURN_SQL),
                           'DB2','#048');
     END;
 END;
 END RCBBAHM_190_RETRIEVE;                            /* EOC RC01393 */
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : INSERT                                        */
 /*                                                                  */
 /* DESCRIPTION      : INSERT ROW INTO RCBV0010_CUSTOMER USING       */
 /*                    RCBF01M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_INSERT: PROC;
                                     /* COPY INPUT RECORD INFO       */
 RCB010SI = RCBBAC1_RECORD.RCB010SI, BY NAME;
 RCB010S  = RCBBAC1_RECORD.RCB010S, BY NAME;
                                     /* INSERT INTO TABLE            */
 CALL RCBF01M (RCB010S_PTR,
               RCB010SI_PTR,
               PTR_RET_AREA_BB,
               PTR_INT_AREA);
 SELECT (PARM_RET_AREA_BB.RETURN_CODE);
 WHEN (0)
   DO;
     COUNT.CNT_CTRY.INSERTS = COUNT.CNT_CTRY.INSERTS + 1;
   END;
                                     /* TRY TO UPDATE                */
 WHEN (4)
   DO;
     CALL RCBBAHM_UPDATE;
   END;
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR(ADDR(PARM_RET_AREA_BB.RETURN_SQL),
                        'DB2','#029');
   END;
 END;
 CHKP_CNT_STEPS = CHKP_CNT_STEPS + 1;
 END RCBBAHM_INSERT;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : UPDATE                                        */
 /*                                                                  */
 /* DESCRIPTION      : UPDATE ROW OF RCBV0010_CUSTOMER USING         */
 /*                    RCBG01M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_UPDATE: PROC;
                                     /* COPY INPUT RECORD INFO       */
 RCB010SI = RCBBAC1_RECORD.RCB010SI, BY NAME;
 RCB010S  = RCBBAC1_RECORD.RCB010S, BY NAME;
                                     /* UPDATE OF TABLE              */
 CALL RCBG01M (RCB010S_PTR,
               RCB010SI_PTR,
               PTR_RET_AREA_BB,
               PTR_INT_AREA);
 SELECT (PARM_RET_AREA_BB.RETURN_CODE);
 WHEN (0)
   DO;
     COUNT.CNT_CTRY.UPDATES = COUNT.CNT_CTRY.UPDATES + 1;
   END;
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR(ADDR(PARM_RET_AREA_BB.RETURN_SQL),
                        'DB2','#032');
   END;
 END;
 CHKP_CNT_STEPS = CHKP_CNT_STEPS + 1;
 END RCBBAHM_UPDATE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : DELETE                                        */
 /*                                                                  */
 /* DESCRIPTION      : CLOSE ROW OF RCBV0010_CUSTOMER USING          */
 /*                    RCBH01M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_DELETE: PROC;
                                     /* RECORD CLOSED TOO SOON       */
 IF RCBBAC1_RECORD.END_DATE < RCBBAC1_RECORD.EFFECTIVE_DATE
                                                       /* SOC RC01328*/
 /*  PCR CEDSP-0348 - GERMANY SHOULD ALSO BE CONSIDERED FOR          */
 /*  DELETE AS PART OF BH AND HENCE THE BELOW COMMENT IS INVALID     */
                                                       /* EOC RC01328*/
 /*  15-05-1996 | PTM0920      | GERMAN ONLY: NO DELETE CUSTOMERS    */

 THEN
   IF RCBBAC1_RECORD.CUSTOMER_NAME = 'CREATED BY CEDS'    /* PTM 497 */
   THEN
     DO;
       COUNT.CNT_CTRY.SKIPPED = COUNT.CNT_CTRY.SKIPPED + 1;
     END;                                                 /* PTM 497 */
   ELSE
   DO;
     CALL RCBBAHM_190_RETRIEVE;                       /* SOC RC01393 */
     IF ¬SWITCH_UPDATE THEN
     DO;                                              /* EOC RC01393 */
                                         /* COPY INPUT RECORD INFO   */
     RCB010SI = RCBBAC1_RECORD.RCB010SI, BY NAME;
     RCB010S = RCBBAC1_RECORD.RCB010S, BY NAME;
                                         /* DELETE OF TABLE ROW      */
     CALL RCBH01M (RCB010S_PTR,
                   RCB010SI_PTR,
                   PTR_RET_AREA_BB,
                   PTR_INT_AREA);
     SELECT (PARM_RET_AREA_BB.RETURN_CODE);
     WHEN (0,4)
       DO;
         COUNT.CNT_CTRY.DELETES = COUNT.CNT_CTRY.DELETES + 1;
       END;
     OTHERWISE
       DO;
         CALL RCBBAHM_ERROR(ADDR(PARM_RET_AREA_BB.RETURN_SQL),
                            'DB2','#033');
       END;
     END;
     CHKP_CNT_STEPS = CHKP_CNT_STEPS + 1;
   END;
   END;                                                    /* RC01393 */
 ELSE
   DO;
     IF RCBBAC1_RECORD.CUSTOMER_NAME = 'CREATED BY CEDS'  /* PTM 497 */
     THEN
       DO;
         COUNT.CNT_CTRY.SKIPPED = COUNT.CNT_CTRY.SKIPPED + 1;
       END;                                               /* PTM 497 */
  /* ELSE  */
     ELSE DO;                                         /* SOC RC01393 */
       CALL RCBBAHM_190_RETRIEVE;
       IF ¬SWITCH_UPDATE THEN                         /* EOC RC01393 */
       CALL RCBBAHM_UPDATE;
     END;                                                 /* RC01393 */
   END;
 IF RCBBAC1_RECORD.CUSTOMER_NAME = 'CREATED BY CEDS'      /* PTM 521 */
   THEN
     DO;
       PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
       PARM_INT_AREA.MESSAGE_NUMBER  = '0194';
       PARM_INT_AREA.MSG_VAR_CODES   = '';
       PARM_INT_AREA.MSG_VAR_CODE_2  = 'CU';
       PARM_INT_AREA.MSG_VAR_VALUE_2 = RCBBAC1_RECORD.CUSTOMER_NUMBER;
       CALL RCB0M1M (PTR_INT_AREA);
     END;                                                 /* PTM 521 */
 END RCBBAHM_DELETE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : END_COUNTRY                                   */
 /*                                                                  */
 /* DESCRIPTION      : ENDING ACTIONS FOR A COUNTRY                  */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_END_COUNTRY: PROC;

 COUNT.CNT_TOT.ACTIONS = COUNT.CNT_TOT.ACTIONS + COUNT.CNT_CTRY.ACTIONS;
 COUNT.CNT_TOT.UPDATES = COUNT.CNT_TOT.UPDATES + COUNT.CNT_CTRY.UPDATES;
 COUNT.CNT_TOT.DELETES = COUNT.CNT_TOT.DELETES + COUNT.CNT_CTRY.DELETES;
 COUNT.CNT_TOT.INSERTS = COUNT.CNT_TOT.INSERTS + COUNT.CNT_CTRY.INSERTS;
 COUNT.CNT_TOT.SKIPPED = COUNT.CNT_TOT.SKIPPED + COUNT.CNT_CTRY.SKIPPED;

 CALL RCBBAHM_ISSUE_CNT (COUNT.CNT_CTRY);    /* ISSUE COUNT MESSAGES */

 CALL RCBBAHM_CHKP_ISSUE;                    /* TAKE CHECK POINT     */

0END RCBBAHM_END_COUNTRY;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : TERM                                          */
 /*                                                                  */
 /* DESCRIPTION      : TERMINATING ACTIONS FOR THE PROGRAM           */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_TERM: PROC;
0PARM_INT_AREA.COUNTRY_NUMBER = '';
                                     /* ISSUE COUNT MESSAGES         */
 CALL RCBBAHM_ISSUE_CNT (COUNT.CNT_TOT);
                                     /* ISSUE ENDED SUCCESFULLY MSG  */
 CALL RCBBAHM_ISSUE_SUCCESS;
                                     /* CLOSE INPUT FILE             */
 CALL RCBBAHM_CLOSE_FILE_RCBBAC1;
                                     /* CLOSE MESSAGE FILE           */
 PARM_INT_AREA.MSG_REQUEST    = 'C';
 CALL RCB0M1M(PTR_INT_AREA);
 END RCBBAHM_TERM;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_CNT                             */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE COUNTS                          */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_CNT: PROC (PARM_COUNT);

 DCL 1 PARM_COUNT,
       3 ACTIONS       FIXED BIN(31),
       3 UPDATES       FIXED BIN(31),
       3 DELETES       FIXED BIN(31),
       3 INSERTS       FIXED BIN(31),
       3 SKIPPED       FIXED BIN(31);

 PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER   = '0003';
 PARM_INT_AREA.MSG_VAR_CODES    = '';
 PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6  = WRK_RCBBAC1;
 PARM_INT_AREA.MSG_VAR_CODE_7   = 'C1';
 CNT_PIC9                       = PARM_COUNT.ACTIONS;
 PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;
 PARM_INT_AREA.MSG_VAR_CODE_11  = 'C5';
 CNT_PIC9                       = PARM_COUNT.SKIPPED;
 PARM_INT_AREA.MSG_VAR_VALUE_11 = CNT_PIC9;
 CALL RCB0M1M(PTR_INT_AREA);

0PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER   = '0148';
 PARM_INT_AREA.MSG_VAR_CODES    = '';
 PARM_INT_AREA.MSG_VAR_CODE_6   = 'IN';
 CNT_PIC9                       = PARM_COUNT.INSERTS;
 PARM_INT_AREA.MSG_VAR_VALUE_6  = CNT_PIC9;
 PARM_INT_AREA.MSG_VAR_CODE_7   = 'UP';
 CNT_PIC9                       = PARM_COUNT.UPDATES;
 PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;
 PARM_INT_AREA.MSG_VAR_CODE_8   = 'DL';
 CNT_PIC9                       = PARM_COUNT.DELETES;
 PARM_INT_AREA.MSG_VAR_VALUE_8  = CNT_PIC9;
 CALL RCB0M1M(PTR_INT_AREA);
 END RCBBAHM_ISSUE_CNT;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_INV_COUNT                       */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE INVALID RECORD COUNT IN FILE    */
 /*                    USING RCB0M1M                                 */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_INV_COUNT: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0007';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 PARM_INT_AREA.MSG_VAR_CODE_7  = 'C7';
 PARM_INT_AREA.MSG_VAR_VALUE_7 = RCBBAC1_TRAILER.CNT_RECS;
 PARM_INT_AREA.MSG_VAR_CODE_8  = 'C8';
 PARM_INT_AREA.MSG_VAR_VALUE_8 = COUNT.CNT_TOT.ACTIONS;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_INV_COUNT;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_CHKP_LIMIT                      */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE DEFAULT CHKP LIMIT              */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_CHKP_LIMIT: PROC;
0PARM_INT_AREA.MESSAGE_TYPE      = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER    = '0008';
 PARM_INT_AREA.MSG_VAR_CODES     = ' ';
 WRK_CHKP_LIMIT                  = RCBP12S.CHKP_LIMIT;
 PARM_INT_AREA.MSG_VAR_CODE_6    = 'NO';
 PARM_INT_AREA.MSG_VAR_VALUE_6   = WRK_CHKP_LIMIT;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_CHKP_LIMIT;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_EMPTY_FILE                      */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE EMPTY INPUT FILE USING          */
 /*                    RCB0M1M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_EMPTY_FILE: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0013';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_EMPTY_FILE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_INV_HEADER                      */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE INVALID HEADER IN FILE USING    */
 /*                    RCB0M1M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_INV_HEADER: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0014';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_INV_HEADER;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_REC_AFTER                       */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE RECORDS AFTER TRAILER IN FILE   */
 /*                    USING RCB0M1M                                 */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_REC_AFTER: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0015';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_REC_AFTER;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_NO_HEADER                       */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE MISSING HEADER IN FILE USING    */
 /*                    RCB0M1M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_NO_HEADER: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0016';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_NO_HEADER;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_NO_TRAILER                      */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE MISSING TRAILER IN FILE USING   */
 /*                    RCB0M1M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_NO_TRAILER: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0017';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_NO_TRAILER;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_INV_REC_TYPE                    */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE INVALID RECORD TYPE IN FILE     */
 /*                    USING RCB0M1M                                 */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_INV_REC_TYPE: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0018';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 PARM_INT_AREA.MSG_VAR_CODE_7  = 'RT';
 PARM_INT_AREA.MSG_VAR_VALUE_7 = RCBBAC1_RECORD.REC_TYPE;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_INV_REC_TYPE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_INV_ACTION                      */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE INVALID ACTION USING            */
 /*                    RCB0M1M                                       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_INV_ACTION: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0019';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'FL';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RCBBAC1;
 PARM_INT_AREA.MSG_VAR_CODE_7  = 'AC';
 PARM_INT_AREA.MSG_VAR_VALUE_7 = RCBBAC1_RECORD.ACTION_IND;
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_INV_ACTION;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_ACTION_MESSAGE                  */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE ACTION ON DATABASE              */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_ACTION_MESSAGE: PROC;
0PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '0021';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 PARM_INT_AREA.MSG_VAR_CODE_2  = 'CU';
 PARM_INT_AREA.MSG_VAR_VALUE_2 = RCBBAC1_RECORD.CUSTOMER_NUMBER;
 PARM_INT_AREA.MSG_VAR_CODE_6  = 'AC';
 PARM_INT_AREA.MSG_VAR_VALUE_6 = RCBBAC1_RECORD.ACTION_IND;
 PARM_INT_AREA.MSG_VAR_CODE_7  = 'DB';
 PARM_INT_AREA.MSG_VAR_VALUE_7 = 'RCBV0010_CUSTOMER';
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_ACTION_MESSAGE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_CHKP_XD                         */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE STATUS CODE XD                  */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_CHKP_XD: PROC;
 PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '9998';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_CHKP_XD;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ISSUE_SUCCESS                         */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE MESSAGE SUCCESFULLY ENDED               */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ISSUE_SUCCESS: PROC;
 PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
 PARM_INT_AREA.MESSAGE_NUMBER  = '9999';
 PARM_INT_AREA.MSG_VAR_CODES   = '';
 CALL RCB0M1M (PTR_INT_AREA);
 END RCBBAHM_ISSUE_SUCCESS;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_CHKP_RESTART                          */
 /*                                                                  */
 /* DESCRIPTION      : DETERMINE CHECKPOINT TO RESTART PROGRAM       */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_CHKP_RESTART: PROC;
0CHKP_CNT_STEPS = 0;
 CHKP_AREA      = '';
 CHKP_XRST      = '';
0CALL PLITDLI (SIX,
               XRST,
               PTR_PCB_IO,
               ADDR(CHKP_LEN_IO),
               ADDR(CHKP_XRST),
               ADDR(CHKP_LEN_AREA),
               ADDR(CHKP_AREA));
 SELECT (PCB_IO.ST_CODE);
 WHEN ('');
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR (PTR_PCB_IO,
                         'IMS_IO',
                         '#040');
   END;
 END;
0IF CHKP_XRST.NAME = ' '
 THEN
   /******************************************************************/
   /*        N O R M A L    S T A R T                                */
   /******************************************************************/
   DO;
0    CHKP_AREA.CNT_NUM          = 1;
     CHKP_AREA.COUNT            = '';
     CHKP_AREA.CTRYNO           = PARM_INT_AREA.COUNTRY_NUMBER;
     CHKP_ID.NUMBER             = CHKP_AREA.CNT_NUM;
0    CALL PLITDLI (SIX,
                   CHKP,
                   PTR_PCB_IO,
                   ADDR(CHKP_LEN_IO),
                   ADDR(CHKP_ID),
                   ADDR(CHKP_LEN_AREA),
                   ADDR(CHKP_AREA));
     SELECT (PCB_IO.ST_CODE);
     WHEN ('');
     WHEN ('XD')
       DO;
         CALL RCBBAHM_ISSUE_CHKP_XD;
         CALL RCBBAHM_ERROR (PTR_PCB_IO,
                             'IMS_IO',
                             '#041');
       END;
     OTHERWISE
       DO;
         CALL RCBBAHM_ERROR (PTR_PCB_IO,
                             'IMS_IO',
                             '#042');
       END;
     END;
   END;
 ELSE
   /******************************************************************/
   /*                   R E S T A R T                                */
   /******************************************************************/
   DO;
     PARM_INT_AREA.COUNTRY_NUMBER = CHKP_AREA.CTRYNO;
     CALL RCBBAHM_READ_FILE_RCBBAC1;    /* READ FIRST DATA RECORD    */
   END;
 END RCBBAHM_CHKP_RESTART;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_CHKP_ISSUE                            */
 /*                                                                  */
 /* DESCRIPTION      : ISSUE CHECKPOINT, COMMITTING ALL CHANGES      */
 /*                    TO THE DATABASES (SYMBOLIC)                   */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_CHKP_ISSUE: PROC;
0CHKP_AREA.CNT_NUM       = CHKP_AREA.CNT_NUM + 1;
 CHKP_ID.NUMBER          = CHKP_AREA.CNT_NUM;
 CHKP_AREA.CTRYNO        = PARM_INT_AREA.COUNTRY_NUMBER;
0CALL PLITDLI (SIX,
               CHKP,
               PTR_PCB_IO,
               ADDR(CHKP_LEN_IO),
               ADDR(CHKP_ID),
               ADDR(CHKP_LEN_AREA),
               ADDR(CHKP_AREA));
 SELECT (PCB_IO.ST_CODE);
 WHEN ('')
   DO;
     CHKP_CNT_STEPS = 0;
   END;
 WHEN ('XD')
   DO;
     CALL RCBBAHM_ISSUE_CHKP_XD;
     CALL RCBBAHM_ERROR (PTR_PCB_IO,
                         'IMS_IO',
                         '#043');
   END;
 OTHERWISE
   DO;
     CALL RCBBAHM_ERROR (PTR_PCB_IO,
                         'IMS_IO',
                         '#044');
   END;
 END;
0CALL RCBBAHM_LOCK_TABLE;   /* RE-LOCK THE TABLE AFTER A CHECK POINT */
 END RCBBAHM_CHKP_ISSUE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBAHM_ERROR                                 */
 /*                                                                  */
 /* DESCRIPTION      : CALLS THE COMMON ERROR ROUTINE AFTER FILLING  */
 /*                    THE INPUT VARIABLES                           */
 /*                                                                  */
 /********************************************************************/
0RCBBAHM_ERROR: PROC     (PTR_ERROR,
                          ERR_TYPE,
                          CALL_ID);
0DCL PTR_ERROR    PTR;
 DCL ERR_TYPE     CHAR(8);
 DCL CALL_ID      CHAR(4);
0PARM_INT_AREA.PTR_ERROR      = PTR_ERROR;
 PARM_INT_AREA.ERR_TYPE       = ERR_TYPE;
 PARM_INT_AREA.CALL_ID        = CALL_ID;
0CALL RCB0E1M (PTR_INT_AREA);
 END RCBBAHM_ERROR;
1/*******************************************************************/
 /*DO NOT CHANGE THIS PART, IT IS MEANT FOR ABR                     */
 /*******************************************************************/
0%INCLUDE DAIFPLH ;                      /* COMPILE DATE/TIME STAMP */
 $DAIMOD (RCBBAHM);                      /* MODULE TO BE COMPILED   */
0/*******************************************************************/
 /* END OF ABR BLOCK                                                */
 /*******************************************************************/
0END RCBBAHM;