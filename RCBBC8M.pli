 /* RCBBC8M - MAPPING SDW LA INPUT FILE TO DI/DO/SA0 OUTPUT FILES    */
 /*                                                                  */
 /* 5695-153 (C) COPYRIGHT IBM EMEA WORLD TRADE CORPORATION 1991     */
 /* LICENSED MATERIAL - PROGRAM PROPERTY OF IBM                      */
 /* REFER TO COPYRIGHT INSTRUCTIONS: FORM G120-2083                  */
 /*                                                                  */
 /********************************************************************/
 /* PROGRAM          : RCBBC8M                                       */
 /*                                                                  */
 /* LANGUAGE         : PLISQL                                        */
 /*                                                                  */
 /* GENERATED BY     : RCBBC8P  - SDW LA MAPPING PROGRAM             */
 /*                                                                  */
 /* TYPE             : BATCH                                         */
 /*                                                                  */
 /* DESCRIPTION      : SDW LA MAPPING TO GENERATE DI/DO/SA0 FILES.   */
 /*                    THIS INPUT FILE CONTAINS HEADER, DATA AND     */
 /*                    TRAILER. ONLY HEADER AND TRAILER ARE          */
 /*                    VALIDATED.                                    */
 /*                                                                  */
 /* INPUT            : - FILES : UPSTREAM RCBBC80                    */
 /*                            : RCBTYDI                             */
 /*                            : RCBTYDO                             */
 /*                            : RCBBC60                             */
 /*                      DB2   : RCBT0500_PARM                       */
 /*                            : RCBT0260_HW_IN_ORD                  */
 /*                                                                  */
 /* OUTPUT           : - FILES : RCBC8DI DI OUTPUT FILE              */
 /*                            : RCBC8DO DO OUTPUT FILE              */
 /*                            : RCBBSAF0 SA0 OUTPUT FILE            */
 /*                            : RCB0M10 MESSAGE FILE                */
 /*                                                                  */
 /* EXTERNAL MODULES : - RCB0M1M   MESSAGE MODULE                    */
 /*                    - RCB0E1M   ERROR MODULE                      */
 /*                    - RCB0T1M   RETRIEVE SYSTEM DATE              */
 /*                    - RCBF50M   INSERT PARAMETER                  */
 /*                    - RCBG50M   UPDATE FILE SEQUENCE NO           */
 /*                    - RCBI50M   REFERENCE PARAMETER               */
 /*                    - RCB019M   RETRIEVE COUNTRY-NUMBERS          */
 /*                    - RCB020M   RETRIEVE RUN DATE                 */
 /*                    - RCB018M   COMPUTE HASH TOTAL                */
 /*                                                                  */
 /* MESSAGES         : 0005/0007/0013/0014/0015/0017//0180/0181/0184/*/
 /*                    0325/I050/9999                                */
 /*                                                                  */
 /* THE FOLLOWING EXCEPTION ROUTINES HAVE BEEN APPLIED DURING        */
 /* GENERATION :  0                                                  */
 /*                                                                  */
 /* MAINTENANCE LOG  :                                               */
 /* ---------------                                                  */
 /*                                                                  */
 /* DATE       | WORK-ITEMNO. | DESCRIPTION                          */
 /*---------------------------------------------------------------   */
 /* 2013-06-20 | RB01332      | CEDS 3.3 A20 IP PROTECTION -         */
 /*            |              | SDW LA REQUIREMENT                   */
 /********************************************************************/
1RCBBC8M: PROC
          OPTIONS (MAIN)
          REORDER;
 /********************************************************************/
 /* FILE DECLARATIONS                                                */
 /********************************************************************/
0DCL RCBBC80       FILE                       /* UPSTREAM INPUT FILE */
                   RECORD
                   INPUT
                   SEQUENTIAL
                   ENV (FB RECSIZE(149));

0DCL RCBBC60       FILE                          /* UNLOAD T260 FILE */
                   RECORD
                   INPUT
                   SEQUENTIAL
                   ENV (FB RECSIZE(165));

0DCL RCBTYDI       FILE          /* DI INPUT FILE FOR HEADER/TRAILER */
                   RECORD
                   INPUT
                   SEQUENTIAL
                   ENV (VB RECSIZE(27994));

0DCL RCBTYDO       FILE          /* DO INPUT FILE FOR HEADER/TRAILER */
                   RECORD
                   INPUT
                   SEQUENTIAL
                   ENV (VB RECSIZE(27994));

0DCL RCBC8DI       FILE                            /* OUTPUT DI FILE */
                   RECORD
                   OUTPUT
                   SEQUENTIAL
                   ENV (VB RECSIZE(507));

0DCL RCBC8DO       FILE                            /* OUTPUT DO FILE */
                   RECORD
                   OUTPUT
                   SEQUENTIAL
                   ENV (VB RECSIZE(579));

0DCL RCBC8SA0      FILE                           /* OUTPUT SA0 FILE */
                   RECORD
                   OUTPUT
                   SEQUENTIAL
                   ENV (FB RECSIZE(240));
 /********************************************************************/
 /* EXTERNAL ENTRIES                                                 */
 /********************************************************************/
 DCL RCB0E1M   ENTRY EXTERNAL;       /* COMMON ERROR ROUTINE         */
 DCL RCB0M1M   ENTRY EXTERNAL;       /* COMMON MESSAGE ROUTINE       */
 DCL RCBI50M   ENTRY EXTERNAL;       /* RETRIEVE SEQ# NUMBER         */
 DCL RCBG50M   ENTRY EXTERNAL;       /* UPDATE FILE SEQUENCE NO      */
 DCL RCB019M   ENTRY EXTERNAL;       /* RETRIEVE COUNTRY-NUMBERS     */
 DCL RCBF50M   ENTRY EXTERNAL;       /* INSERT FILE SEQUENCE NO      */
 DCL RCB020M   ENTRY EXTERNAL;       /* RETRIEVE RUN DATE            */
 DCL RCB0T1M   ENTRY EXTERNAL;       /* RETRIEVE SYSTEM DATE         */
 DCL RCB018M   ENTRY EXTERNAL;       /* COMPUTE HASH TOTAL           */
1/********************************************************************/
 /* EXTERNAL PARAMETER INTERFACES                                    */
 /********************************************************************/
 DCL PTR_INT_AREA         PTR;                  /* INTERFACE AREA    */
 DCL PTR_RETURN_AREA      PTR;                  /* RETURN AREA       */
 DCL PTR_RETURN_AREA_BB   PTR;                  /* RETURN AREA       */
 DCL PTR_COUNTRY_AREA     PTR;                  /* INTERFACE RCB019M */
 DCL PTR_RUN_DATE_AREA    PTR;                  /* INTERFACE RCB020M */

 DCL 1 RETURN_AREA,                                   /* RETURN AREA */
       %INCLUDE (RCBZ02S);;
 DCL 1 RETURN_AREA_BB,
       %INCLUDE (RCBZ02S);;
 DCL 1 PARM_INT_AREA,                              /* INTERFACE AREA */
       %INCLUDE (RCBZ01S);;
 DCL 1 RUN_DATE_AREA,                               /* RUN DATE AREA */
       %INCLUDE (RCBZ28S);;
1/********************************************************************/
 /* DB2 TABLE STRUCTURE                                              */
 /********************************************************************/
 DCL PTR_RCBV500          PTR;                  /* PTR PARAMETER ROW */
 DCL PTR_RCBV500I         PTR;            /* PTR NULL-IND. PARAMETER */
0DCL RCBZ02S_PTR          PTR;                    /* PTR RETURN INFO */

 DCL 1 TB_RCBV500,                                  /* PARAMETER ROW */
       %INCLUDE (RCB500S);;
 DCL 1 TB_RCBV500_I,                          /* NULL-IND. PARAMETER */
       %INCLUDE (RCB500SI);;
0DCL 1 TB_RCB035          BASED(PTR_RCBV500), /* RUN SEQUENCE NUMBER */
       %INCLUDE (RCBP35S);;
0DCL 1 RCB035,
       %INCLUDE (RCBP35S);;
 DCL 1 COUNTRY_AREA,                           /* COUNTRY ARRAY AREA */
       %INCLUDE (RCBZ26S);;
 DCL 1 RCBZ02S            BASED(RCBZ02S_PTR),
       %INCLUDE (RCBZ02S);;
1/********************************************************************/
 /* RECORD STRUCTURES FOR INPUT AND OUTPUT FILES                     */
 /********************************************************************/
 DCL FILE_RCBBC80         CHAR(149);
 DCL 1 RCBBC80_HEADER     BASED(ADDR(FILE_RCBBC80)),
       %INCLUDE RCBBC8SH;;
 DCL 1 RCBBC80_DATAREC    BASED(ADDR(FILE_RCBBC80)),
       %INCLUDE RCBBC8S;;
 DCL 1 RCBBC80_TRAILER    BASED(ADDR(FILE_RCBBC80)),
       %INCLUDE RCBBC8ST;;

 DCL FILE_RCBBC60         CHAR(165);
 DCL 1 RCBBC60_REC        BASED(ADDR(FILE_RCBBC60)),
       %INCLUDE RCBBC6S;;

 DCL FILE_RCBTY_DI        CHAR(503);
 DCL FILE_RCBTYDI         CHAR(503) VARYING;

 DCL FILE_RCBTY_DO        CHAR(575);
 DCL FILE_RCBTYDO         CHAR(575) VARYING;

 DCL 1 RCBC8DI_TYPE_DI,
       %INCLUDE (RCBBCAS1);,
       %INCLUDE (RRDDI1);;
 DCL 1 RCBC8DO_TYPE_DO,
       %INCLUDE (RCBBCAS1);,
       %INCLUDE (RRDDO1);;

 DCL RCBC8SA0_REC         CHAR(240);
 DCL 1 RCBC8SA0_C000_SA0  BASED(ADDR(RCBC8SA0_REC)),
       %INCLUDE (RCBBKAS1);;
 DCL 1 RCBC8SA0_C001_SA0  BASED(ADDR(RCBC8SA0_REC)),
       %INCLUDE (RCBBKAS2);;
 DCL 1 RCBC8SA0_C002_SA0  BASED(ADDR(RCBC8SA0_REC)),
       %INCLUDE (RCBBKAS7);;
 DCL 1 RCBC8SA0_C998_SA0  BASED(ADDR(RCBC8SA0_REC)),
       %INCLUDE (RCBBKAS5);;
 DCL 1 RCBC8SA0_C999_SA0  BASED(ADDR(RCBC8SA0_REC)),
       %INCLUDE (RCBBKAS6);;
 /********************************************************************/
 /* BIT SWITCHES                                                     */
 /********************************************************************/
 DCL TRUE                 BIT(1) INIT('1'B);
 DCL FALSE                BIT(1) INIT('0'B);
 DCL SW_C998              BIT(1) INIT('0'B);
 DCL EOF_RCBBC80          BIT(1) INIT('0'B); /* EOF - RCBBC80 SWITCH */
 DCL EOF_RCBBC60          BIT(1) INIT('0'B); /* EOF - RCBBC60 SWITCH */
 DCL WRK_HEADER_FOUND     BIT(1) INIT('0'B);        /* HEADER FOUND  */
 DCL WRK_TRAILER_FOUND    BIT(1) INIT('0'B);        /* TRAILER FOUND */
 DCL SWITCH_END_CTY       BIT(1) INIT('0'B);   /* END OF CTRY - PARM */
 DCL SKIP_COUNTRY         BIT(1) INIT('0'B);
 DCL CTRY_FLG_SET         BIT(1) INIT('0'B);
 DCL SWITCH_NEXT1         BIT(1) INIT('0'B);
 DCL SWITCH_NEXT2         BIT(1) INIT('0'B);
 DCL SWITCH_NEXT3         BIT(1) INIT('0'B);
 DCL SWITCH_ORN_SET       BIT(1) INIT('0'B);
 DCL SWITCH_ORN_UNL_SET   BIT(1) INIT('0'B);
0/********************************************************************/
 /* TEMPORARY WRK VARIABLES                                          */
 /********************************************************************/
 DCL EFFECTIVE_DTE_N      CHAR (10);
 DCL END_DTE_N            CHAR (10);
 DCL WRK_RUN_DATE         CHAR (10);
 DCL WRK_RUN_DATE_TEMP1   CHAR (08);
 DCL WRK_INST_STATUS      CHAR (01);
 DCL WRK_MACH_SER         CHAR (07);
 DCL TEMP_MACH_SER        CHAR (07);
 DCL WRK_CORR_HOUR        CHAR (02);
 DCL WRK_TEMP_MIN         CHAR (01);
 DCL WRK_CORR_MIN         CHAR (02);
 DCL WRK_CORRECT_TIME     CHAR (08);
 DCL TEMP_MON_STRT        CHAR (08);
 DCL TEMP_MON_STOP        CHAR (08);
 DCL TEMP_TUE_STRT        CHAR (08);
 DCL TEMP_TUE_STOP        CHAR (08);
 DCL TEMP_WED_STRT        CHAR (08);
 DCL TEMP_WED_STOP        CHAR (08);
 DCL TEMP_THU_STRT        CHAR (08);
 DCL TEMP_THU_STOP        CHAR (08);
 DCL TEMP_FRI_STRT        CHAR (08);
 DCL TEMP_FRI_STOP        CHAR (08);
 DCL TEMP_SAT_STRT        CHAR (08);
 DCL TEMP_SAT_STOP        CHAR (08);
 DCL TEMP_SUN_STRT        CHAR (08);
 DCL TEMP_SUN_STOP        CHAR (08);
 DCL WRK_HASH_FIELD       CHAR (04);
 DCL WRK_CTRY_FILE_PREV   CHAR (03);
 DCL VAR_A                CHAR (01);
 DCL VAR_B                CHAR (01);
 DCL VAR_C                PIC  '999';
 DCL VAR_D                CHAR (01);
 DCL VAR_D1               PIC  '9';
 DCL WRK_A                PIC  '99';
 DCL WRK_B                PIC  '99';
 DCL WRK_D                PIC  '99';
 DCL WRK_HASH_CTRY        FIXED DEC (15,0);
 DCL WRK_HASH_TOTL        FIXED DEC (15,0);
 DCL CTY_IDX              FIXED DEC (3,0)   INIT(0);
 DCL WRK_INDNULL          FIXED BIN (15);
 DCL WRK_TEMP_DAY         PIC  '999';
 DCL WRK_SEQ_NO_SA0       PIC  '99999';
 DCL WRK_INS_DATE         PIC  '99999';
 DCL WRK_WRTY_XP          PIC  '99999';
 DCL WRK_SEQ              PIC  '99999';
 DCL WRK_SEQ_NO           PIC  '99999';
 DCL WRK_RUN_DATE_TEMP    PIC  '99999';
 DCL WRK_ORDER_REFNUM     CHAR (06)         INIT('');
 DCL WRK_GEN_ORDER_REFNUM CHAR (06)         INIT('');
 DCL WRK_MOD_NAME         CHAR (08)         INIT ('RCBBC8M');
 DCL WRK_PRG_NAME         CHAR (08)         INIT ('RCBBC8P');
 DCL WRK_FIL_NAME         CHAR (07)         INIT ('RCBBC80');
 DCL WRK_REC_DI           CHAR (16)         INIT ('NO OF DI RECORDS');
 DCL WRK_REC_DO           CHAR (16)         INIT ('NO OF DO RECORDS');
 DCL WRK_REC_SA0          CHAR (17)         INIT ('NO OF SA0 RECORDS');
 DCL WRK_SKIP_REC_CTRY    CHAR (16)         INIT ('SKIPPED CTRY REC');
 DCL WRK_SYSTEM_TYPE      CHAR (01)         INIT ('B');
 DCL WRK_CTRYNO           CHAR (03)         INIT ('');
 DCL WRK_PGR_RUN_TYPE     CHAR (03)         INIT ('');
 DCL WRK_SKIP_REC_INS     CHAR (22)
                          INIT ('SKIPPED INS_STATUS REC');
 DCL WRK_ALPHANUMERIC     CHAR (36)
                          INIT('0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ');
 DCL WRK_ALPHA            CHAR (26)
                          INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
 DCL WRK_NUMERIC          CHAR (10)
                          INIT('0123456789');
0/********************************************************************/
 /* COUNTS                                                           */
 /********************************************************************/
 DCL RCBBC80_READ_REC     FIXED BIN (31);
 DCL RCBBC80_READ_CTY_REC FIXED BIN (31);
 DCL RCBBC80_READ_DI      FIXED BIN (31);
 DCL WRK_READ_DI          FIXED BIN (31);
 DCL WRK_NO_REC_DI        CHAR(4) BASED(ADDR(WRK_READ_DI));
 DCL RCBBC80_READ_DO      FIXED BIN (31);
 DCL WRK_READ_DO          FIXED BIN (31);
 DCL WRK_NO_REC_DO        CHAR(4) BASED(ADDR(WRK_READ_DO));
 DCL RCBBC80_SKIP_CTRY    FIXED BIN (31);
 DCL RCBBC80_SKIP_REC     FIXED BIN (31);
 DCL WRK_NO_OF_REC        PIC '(15)9'    INIT (0);
 DCL COUNT_CTRY_REC       PIC '(10)9'    INIT (0);
 DCL CNT_PIC9             PIC '(9)9';
 DCL CNT_PIC10            PIC '(9)9';
 DCL CNT_PIC11            PIC '(9)9';
1/********************************************************************/
 /*  SORT KEY                                                        */
 /********************************************************************/
 DCL 1 SK_KEY,
       3 COUNTRY_NUMBER  CHAR (3),
       3 PRODUCT_TYPE    CHAR (4),
       3 ORIGIN          CHAR (2),
       3 SEQUENCE_NUMBER CHAR (7);

 DCL 1 SK_INP1   LIKE   SK_KEY;
 DCL 1 SK_INP    BASED(ADDR(SK_INP1))  CHAR(16);

 DCL 1 SK_UNL1   LIKE   SK_KEY;
 DCL 1 SK_UNL    BASED(ADDR(SK_UNL1))  CHAR(16);
0/********************************************************************/
 /*                 S Q L    D E C L A R A T I O N S                 */
 /********************************************************************/
 EXEC SQL INCLUDE SQLCA;
0/********************************************************************/
 /*  BUILTIN FUNCTIONS                                               */
 /********************************************************************/
0DCL (ADDR,
      NULL,
      VERIFY,
      REPATTERN,
      INDEX,
      SUBSTR)            BUILTIN;
1/********************************************************************/
 /* ON ERROR CONDITIONS                                              */
 /********************************************************************/
 %INCLUDE (RCB0E0M);
  END;
1/********************************************************************/
 /* ON ENDFILE                                                       */
 /********************************************************************/
0ON ENDFILE (RCBBC80)
   BEGIN;
     EOF_RCBBC80 = '1'B;
   END;

0ON ENDFILE (RCBBC60)
   BEGIN;
     EOF_RCBBC60 = '1'B;
   END;

1/********************************************************************/
 /*                 S T A R T   P R O C C E S S I N G                */
 /********************************************************************/
 CALL RCBBC8M_INIT_PROGRAM;                          /* INIT PROGRAM */
 CALL RCBBC8M_INITIAL_PROCESS;                       /* INIT PROCESS */

 WRK_CTRY_FILE_PREV = RCBBC80_DATAREC.COUNTRY_CDE;
                            /* RETRIEVE ORDER REFERENCE NO FROM T260 */
 CALL RCBBC8M_RETRIEVE_RCB260S_ORN;

                              /* WHILE NOT EOF AND NOT EOF CTY-ARRAY */
 DO WHILE (¬EOF_RCBBC80);
   IF (RCBBC80_TRAILER.SORTKEY = HIGH(21)) THEN
     DO;
       WRK_TRAILER_FOUND  = '1'B;
       RCBBC80_READ_REC   = RCBBC80_READ_REC + 1;
       IF RCBBC80_READ_REC ¬= RCBBC80_TRAILER.TOTAL_COUNT
       THEN
       DO;
         CALL RCBBC8M_MSG('0007');
         CALL RCBBC8M_ERROR(NULL,'OTHER','#001');
       END;

       IF WRK_CTRYNO ¬= RCBC8SA0_C001_SA0.IOPUCTY
       THEN
       CALL RCBBC8M_SAF0_HDRTRL;

       CALL RCBBC8M_WRITE_TRAILER;
       CALL RCBBC8M_READ_INP;            /* READ LAST RECORD FOR EOF */
       IF ¬EOF_RCBBC80 THEN
       DO;
         CALL RCBBC8M_MSG('0015');
         CALL RCBBC8M_ERROR(NULL,'OTHER','#002');
       END;
     END;
   ELSE
     DO;
       IF ¬WRK_TRAILER_FOUND THEN
         DO;
                                   /* MORE RECORDS FOR THIS COUNTRY? */
           DO WHILE ((RCBBC80_DATAREC.COUNTRY_CDE = WRK_CTRY_FILE_PREV
                    & ¬EOF_RCBBC80)
                    & (RCBBC80_DATAREC.COUNTRY_CDE <= WRK_CTRYNO
                    | SWITCH_END_CTY));
             RCBBC80_READ_CTY_REC = RCBBC80_READ_CTY_REC + 1;
             RCBBC80_READ_REC = RCBBC80_READ_REC + 1;
             IF (SKIP_COUNTRY)              /* CTRY NOT IN PARAMETER */
             THEN
               DO;
                 CALL RCBBC8M_SKIP_CTRY_REC;          /* SKIP RECORD */
                 WRK_CTRY_FILE_PREV = RCBBC80_DATAREC.COUNTRY_CDE;
                 CALL RCBBC8M_READ_INP;          /* READ NEXT RECORD */
               END;
             ELSE
             DO;
               IF VERIFY(RCBBC80_DATAREC.INSTALL_STATUS,'013459') = 0
                   & CTRY_FLG_SET
               THEN
                 CALL RCBBC8M_C001_CTRY_SA0;

                 CALL RCBBC8M_PROCESS_INPUT;
                 WRK_CTRY_FILE_PREV = RCBBC80_DATAREC.COUNTRY_CDE;
                 CALL RCBBC8M_READ_INP;
             END;
           END;
           CALL RCBBC8M_TERM_COUNTRY;
           CALL RCBBC8M_INIT_COUNTRY;
           CALL RCBBC8M_RETRIEVE_RCB260S_ORN;
           WRK_CTRY_FILE_PREV = RCBBC80_DATAREC.COUNTRY_CDE;
         END;
     END;
 END;

 CALL RCBBC8M_INIT_COUNTRY;
 DO WHILE (EOF_RCBBC80 & ¬SWITCH_END_CTY);
    CALL RCBBC8M_SAF0_HDRTRL;
    CALL RCBBC8M_INIT_COUNTRY;
 IF SWITCH_END_CTY THEN
    DO;
      CALL RCBBC8M_C999_TRAILER_SA0;
    END;
 END;

 IF ¬WRK_TRAILER_FOUND
 THEN
 DO;
   CALL RCBBC8M_MSG('0017');
   CALL RCBBC8M_ERROR(NULL,'OTHER','#003');
 END;


 CALL RCBBC8M_TERM_PROGRAM;                     /* TERMINATE PROGRAM */
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_INIT_PROGRAM                          */
 /*                                                                  */
 /* DESCRIPTION      : INITIAL ACTIONS                               */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_INIT_PROGRAM: PROC;
                                 /* INITIALISE TEMPORARY VARIABLES   */
 PTR_INT_AREA       = ADDR(PARM_INT_AREA);
 PTR_COUNTRY_AREA   = ADDR(COUNTRY_AREA);
 PTR_RUN_DATE_AREA  = ADDR(RUN_DATE_AREA);
 PTR_RETURN_AREA    = ADDR(RETURN_AREA);
 PTR_RETURN_AREA_BB = ADDR(RETURN_AREA_BB);

 PARM_INT_AREA.MSG_AREA       = '';
 PARM_INT_AREA.ERR_AREA       = '';
 PARM_INT_AREA.MSG_REQUEST    = 'O';
 PARM_INT_AREA.MSG_TARGET     = 'F';
 PARM_INT_AREA.ID_SOURCE_APPL = 'RCB';
 PARM_INT_AREA.ID_SOURCE_PROG = WRK_PRG_NAME;
 PARM_INT_AREA.ID_MOD_PATH(1) = WRK_MOD_NAME;
 PARM_INT_AREA.ID_MOD_LEVEL   = 1;
 PARM_INT_AREA.PTR_PCB_IO     = NULL;
 PARM_INT_AREA.PTR_PCB_ALT    = NULL;
 PARM_INT_AREA.SYSTEM_TYPE    = WRK_SYSTEM_TYPE;
 PARM_INT_AREA.TXN_CODE       = '';
 PARM_INT_AREA.VERSION        = '';
                                                /* OPEN MESSAGE FILE */
 CALL RCB0M1M(PTR_INT_AREA);
 PARM_INT_AREA.MSG_REQUEST    = 'P';

 CALL RCB0T1M(PTR_INT_AREA);                  /* RECEIVE SYSTEM DATE */

 CALL RCB019M (PTR_COUNTRY_AREA,           /* RETRIEVE ALL COUNTRIES */
               PTR_INT_AREA);              /*       THEY COME SORTED */

 IF COUNTRY_AREA.COUNT_CTRY = 0
 THEN DO;
       CALL RCBBC8M_ERROR(NULL,'OTHER','#004');
       CALL RCBBC8M_MSG('0005');
      END;

 SWITCH_END_CTY     = FALSE;
                                   /* INITIALIZE TEMPORARY VARIABLES */
 WRK_NO_OF_REC        = 0;
 COUNT_CTRY_REC       = 0;
 RCBBC80_READ_REC     = '';
 RCBBC80_READ_CTY_REC = '';
 RCBBC80_READ_DI      = '';
 RCBBC80_READ_DO      = '';
 RCBBC80_SKIP_CTRY    = '';
 RCBBC80_SKIP_REC     = '';
 WRK_HASH_CTRY        = 0;
 WRK_HASH_TOTL        = 0;
 SW_C998              = FALSE;
 RCBC8SA0_REC         = '';
                                                   /* OPEN ALL FILES */
 OPEN FILE (RCBBC80);
 OPEN FILE (RCBBC60);
 OPEN FILE (RCBTYDI);
 OPEN FILE (RCBTYDO);
 OPEN FILE (RCBC8DI);
 OPEN FILE (RCBC8DO);
 OPEN FILE (RCBC8SA0);

 END RCBBC8M_INIT_PROGRAM;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_INITIAL_PROCESS                       */
 /*                                                                  */
 /* DESCRIPTION      : INITIAL PROCESS                               */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_INITIAL_PROCESS: PROC;

 FILE_RCBBC80 = '';

 CALL RCBBC8M_READ_INP;                  /* READ FIRST HEADER RECORD */
 CALL RCBBC8M_HEADER_CHECK;

 CALL RCBBC8M_READ_UNL;           /* READ FIRST T260 UNLOADED RECORD */
 CALL RCBBC8M_WRITE_HEADER;             /* WRITE DI/DO HEADER RECORD */

 CALL RCBBC8M_READ_INP;               /* READ NEXT RECORD FROM INPUT */
 CALL RCBBC8M_INIT_COUNTRY;

 CALL RCBBC8M_WRITE_HEADER_SA0;           /* WRITE SAO HEADER RECORD */

 END RCBBC8M_INITIAL_PROCESS;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_INIT_COUNTRY                          */
 /*                                                                  */
 /* DESCRIPTION      : CHECK REQUESTED COUNTRY NUMBER FROM PARM      */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_INIT_COUNTRY: PROC;

 CTRY_FLG_SET = TRUE;
 RCBBC80_READ_CTY_REC = 0;

 IF RCBBC80_DATAREC.COUNTRY_CDE > WRK_CTRYNO
    | (EOF_RCBBC80
    | RCBBC80_TRAILER.SORTKEY = HIGH(21))
    & ¬SWITCH_END_CTY                   /* NOT END OF PARAMETER LIST */
 THEN DO;
   IF (¬ SKIP_COUNTRY) THEN             /* PREV. COUNTRY NOT IN LIST */
     CTY_IDX = CTY_IDX + 1;             /* INCREMENT LIST INDEX      */
   IF CTY_IDX > COUNTRY_AREA.COUNT_CTRY THEN
     SWITCH_END_CTY = TRUE;             /* END OF COUNTRY LIST       */
   ELSE
   DO;
     WRK_PGR_RUN_TYPE = COUNTRY_AREA.CTRY_ARRAY.PGR_TYPE(CTY_IDX);
     WRK_CTRYNO       = COUNTRY_AREA.CTRY_ARRAY.CTRYNO(CTY_IDX);
     PARM_INT_AREA.COUNTRY_NUMBER = WRK_CTRYNO;
   END;
 END;
 SKIP_COUNTRY = '0'B;
                                     /* MORE INPUT COUNTRIES IN FILE */
                                     /* THAN IN PARAMETER            */
 IF (RCBBC80_DATAREC.COUNTRY_CDE < WRK_CTRYNO | SWITCH_END_CTY)
    & ¬EOF_RCBBC80
    & RCBBC80_TRAILER.SORTKEY ¬= HIGH(21)
 THEN
 DO;
   SKIP_COUNTRY = '1'B;
                               /* GIVE MESSAGE ABOUT COUNTRY IGNORED */
   CALL RCBBC8M_MSG('0181');
 END;

 END RCBBC8M_INIT_COUNTRY;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_GET_RUN_DATE                          */
 /*                                                                  */
 /* DESCRIPTION      : RETRIEVE THE RUN DATE FROM RCB001 PARM        */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_GET_RUN_DATE: PROC;

 RUN_DATE_AREA.PROC_ID   =  COUNTRY_AREA.PROC_ID;
 RUN_DATE_AREA.CTRYNO    =  WRK_CTRYNO;
 RUN_DATE_AREA.PGR_TYPE  =  WRK_PGR_RUN_TYPE;

 CALL RCB020M (PTR_RUN_DATE_AREA,
               PTR_INT_AREA);

   IF RUN_DATE_AREA.RUN_DATE = ''        /* NO RUN DATE RCB001 FOUND */
    THEN
     DO;
       WRK_RUN_DATE = PARM_INT_AREA.SYSTEM_DATE;
     END;
   ELSE
     DO;
       WRK_RUN_DATE  = RUN_DATE_AREA.RUN_DATE;
     END;

 WRK_RUN_DATE_TEMP1 = SUBSTR(WRK_RUN_DATE,1,4) ||
                      SUBSTR(WRK_RUN_DATE,6,2) ||
                      SUBSTR(WRK_RUN_DATE,9,2) ;

 WRK_RUN_DATE_TEMP  = REPATTERN(WRK_RUN_DATE_TEMP1,
                               'YYDDD','YYYYMMDD');

 END RCBBC8M_GET_RUN_DATE;
 /********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_RETRIEVE_RCB260S_ORN                  */
 /*                                                                  */
 /* DESCRIPTION      : RETRIEVE THE ORN FROM RCBV0260_HW_IN_ORD      */
 /*                    FOR THE REQUESTED COUNTRY. WHEN ORN NOT FOUND */
 /*                    ASSIGN WRK_ORDER_REFNUM TO 'AA000A'           */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_RETRIEVE_RCB260S_ORN: PROC;

 WRK_ORDER_REFNUM   = '';
 SWITCH_ORN_SET     = FALSE;
 SWITCH_ORN_UNL_SET = FALSE;

 EXEC SQL
      SELECT MAX(ORDER_REF_NUMBER)
      INTO   :WRK_ORDER_REFNUM :WRK_INDNULL
      FROM   RCBV0260_HW_IN_ORD
      WHERE  COUNTRY_NUMBER = :RCBBC80_DATAREC.COUNTRY_CDE;

 SELECT(SQLCA.SQLCODE);
   WHEN(0)
   DO;
     IF WRK_INDNULL = 0 THEN
       SWITCH_ORN_UNL_SET = TRUE;
     ELSE
     DO;
       WRK_ORDER_REFNUM = 'AA000A';
       WRK_GEN_ORDER_REFNUM = WRK_ORDER_REFNUM;
       SWITCH_ORN_SET   = TRUE;
     END;
   END;
   WHEN(100)                           /* ORDER REF NUMBER NOT FOUND */
   DO;                                       /* INITIALIZE TO AA000A */
     WRK_ORDER_REFNUM = 'AA000A';
     WRK_GEN_ORDER_REFNUM = WRK_ORDER_REFNUM;
     SWITCH_ORN_SET   = TRUE;
   END;
   OTHERWISE
   DO;
     CALL RCBBC8M_ERROR (ADDR (SQLCA),
                         'DB2','#005');
   END;
 END;

 END RCBBC8M_RETRIEVE_RCB260S_ORN;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_READ_INP                              */
 /*                                                                  */
 /* DESCRIPTION      : READ INPUT FILE RCBBC80 FROM SDW              */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_READ_INP: PROC;

 READ FILE (RCBBC80) INTO (FILE_RCBBC80);

 IF ¬ (RCBBC80_HEADER.SORTKEY  = LOW(21)   |
       RCBBC80_TRAILER.SORTKEY = HIGH(21))
 THEN
   DO;
     SK_INP1.COUNTRY_NUMBER  = RCBBC80_DATAREC.COUNTRY_CDE;
     SK_INP1.PRODUCT_TYPE    = RCBBC80_DATAREC.MACH_TYPE;
     SK_INP1.ORIGIN          = RCBBC80_DATAREC.ORIGIN;
     SK_INP1.SEQUENCE_NUMBER = RCBBC80_DATAREC.SERNUM;
   END;

 END RCBBC8M_READ_INP;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_READ_UNL                              */
 /*                                                                  */
 /* DESCRIPTION      : READ UNLOAD FILE RCBBC60 FROM T260            */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_READ_UNL: PROC;

 READ FILE (RCBBC60) INTO (FILE_RCBBC60);

 SK_UNL1.COUNTRY_NUMBER  = RCBBC60_REC.COUNTRY_NUMBER;
 SK_UNL1.PRODUCT_TYPE    = RCBBC60_REC.PRODUCT_TYPE;
 SK_UNL1.ORIGIN          = RCBBC60_REC.ORIGIN;
 SK_UNL1.SEQUENCE_NUMBER = RCBBC60_REC.SEQUENCE_NUMBER;

 END RCBBC8M_READ_UNL;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_HEADER_CHECK                          */
 /*                                                                  */
 /* DESCRIPTION      : VALIDATE HEADER FROM INPUT FILE               */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_HEADER_CHECK: PROC;

 IF WRK_HEADER_FOUND = 0 &
    (EOF_RCBBC80)                                      /* EMPTY FILE */
 THEN
 DO;
   CALL RCBBC8M_MSG('0013');
   CALL RCBBC8M_ERROR(NULL,'OTHER','#006');
 END;

 IF RCBBC80_HEADER.SORTKEY ¬= LOW(21)        /* FIRST REC : HEADER ? */
 THEN
 DO;
   CALL RCBBC8M_MSG('0014');
   CALL RCBBC8M_ERROR (NULL, 'OTHER', '#007');
 END;

 IF RCBBC80_HEADER.SORTKEY = LOW(21)                    /* IF HEADER */
 THEN
 DO;
   RCBBC80_READ_REC   = RCBBC80_READ_REC + 1;
   WRK_HEADER_FOUND   = '1'B;
   WRK_TRAILER_FOUND  = '0'B;
   CALL RCBBC8M_SEQNO_CHECK;
 END;

 END RCBBC8M_HEADER_CHECK;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_SEQNO_CHECK                           */
 /*                                                                  */
 /* DESCRIPTION      : RETRIEVE FILE SEQUENCE NUMBER FROM RCB035     */
 /*                    AND CHECK IF IT IS VALID OR NOT               */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_SEQNO_CHECK: PROC;

 PTR_RCBV500        = ADDR (TB_RCBV500);
 PTR_RCBV500I       = ADDR (TB_RCBV500_I);

               /* RETRIEVE PREVIOUS FILE SEQUENCE NUMBER FROM RCB035 */

 TB_RCBV500                  = '';
 TB_RCBV500_I                = '';
 TB_RCB035.NUMBER            = 'RCB035';
 TB_RCB035.PROC_ID           = COUNTRY_AREA.PROC_ID;
 TB_RCB035.SEQ_NR            = '01';
 TB_RCB035.FILLER_G1         = COUNTRY_AREA.CTRY_SET_ID;

0CALL RCBI50M ('R',
               PTR_RCBV500,
               PTR_RCBV500I,
               PTR_RETURN_AREA,
               PTR_INT_AREA);

 IF RETURN_AREA.RETURN_CODE = 4
 THEN DO;
               /* RETRIEVE THE OLD SEQUENCE NUMBER FOR COUNTRY BLANK */
                          /* NOT FOUND HANDLED IN THE FOLLOWING WHEN */

   TB_RCB035.FILLER_G1 = '';
   CALL RCBI50M ('U',
                 PTR_RCBV500,
                 PTR_RCBV500I,
                 PTR_RETURN_AREA,
                 PTR_INT_AREA);
   IF RETURN_AREA.RETURN_CODE = 0
   THEN DO;
                 /* INSERT THE SEQUENCE NUMBER FOR FIRST RUN COUNTRY */
                             /* ERRORS HANDLED IN THE FOLLOWING WHEN */
     TB_RCB035.FILLER_G1 = COUNTRY_AREA.CTRY_SET_ID;

     CALL RCBF50M (PTR_RCBV500,
                   PTR_RCBV500I,
                   PTR_RETURN_AREA,
                   PTR_INT_AREA);
   END;
 END;

 SELECT (RETURN_AREA.RETURN_CODE);
   WHEN (0)
   DO;
     RCB035 = TB_RCB035, BY NAME;
     IF RCB035.FILE_SEQ_NUM_SC + 1 ¬= RCBBC80_HEADER.SEQ_NUM
     THEN DO;
       CALL RCBBC8M_MSG('0180');            /* INCORRECT FILE SEQ.NO */
       CALL RCBBC8M_ERROR (NULL,'OTHER','#008');
          END;
     ELSE
       WRK_SEQ = RCBBC80_HEADER.SEQ_NUM;
   END;
   WHEN (4)
   DO;
     CALL RCBBC8M_MSG('I050');                   /* RECORD NOT FOUND */
     CALL RCBBC8M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
                         'OTHER','#009');
   END;
   OTHERWISE
     CALL RCBBC8M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
                         'DB2','#010');
 END;

 END RCBBC8M_SEQNO_CHECK;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_WRITE_HEADER                          */
 /*                                                                  */
 /* DESCRIPTION      : WRITE THE HEADER TO DI/DO OUTPUT FILES        */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_WRITE_HEADER: PROC;

 FILE_RCBTYDI     = ' ';
 FILE_RCBTYDO     = ' ';

 READ FILE(RCBTYDI) INTO(FILE_RCBTYDI);

 SUBSTR(FILE_RCBTY_DI,01,1) = 'H';
 SUBSTR(FILE_RCBTY_DI,02)   = FILE_RCBTYDI;

 READ FILE(RCBTYDO) INTO(FILE_RCBTYDO);

 SUBSTR(FILE_RCBTY_DO,01,1) = 'H';
 SUBSTR(FILE_RCBTY_DO,02)   = FILE_RCBTYDO;

 WRITE FILE(RCBC8DI) FROM(FILE_RCBTY_DI);
 WRITE FILE(RCBC8DO) FROM(FILE_RCBTY_DO);
 RCBBC80_READ_DI = RCBBC80_READ_DI + 1;
 RCBBC80_READ_DO = RCBBC80_READ_DO + 1;

 END RCBBC8M_WRITE_HEADER;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_SA0_SEQNO_HEADER                      */
 /*                                                                  */
 /* DESCRIPTION      : TO GET THE SEQUENCE NUMBER FROM ULO1 AND      */
 /*                    WRITE TO OUTPUT SA0 FILE                      */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_SA0_SEQNO_HEADER: PROC;

               /* RETRIEVE PREVIOUS FILE SEQUENCE NUMBER FROM RCB035 */

 TB_RCBV500                  = '';
 TB_RCBV500_I                = '';
 TB_RCB035.NUMBER            = 'RCB035';
 TB_RCB035.PROC_ID           = 'UL01';
 TB_RCB035.SEQ_NR            = '01';
 TB_RCB035.FILLER_G1         = COUNTRY_AREA.CTRYNO(1);

0CALL RCBI50M ('R',
               PTR_RCBV500,
               PTR_RCBV500I,
               PTR_RETURN_AREA,
               PTR_INT_AREA);

 IF RETURN_AREA.RETURN_CODE = 4
 THEN                                  /* RETRIEVE THE OLD SEQUENCE  */
   DO;                                 /* NUMBER FOR COUNTRY = BLANK */
     TB_RCB035.FILLER_G1 = '';         /* IF NOT FOUND ERROR IS      */
     CALL RCBI50M ('R',                /* HANDLED IN NEXT STATEMENT  */
                   PTR_RCBV500,
                   PTR_RCBV500I,
                   PTR_RETURN_AREA,
                   PTR_INT_AREA);
     IF RETURN_AREA.RETURN_CODE = 0    /* INSERT THE SEQUENCE NUMBER */
     THEN                              /* FOR FIRST RUN COUNTRY      */
       DO;
         TB_RCB035.FILLER_G1 = COUNTRY_AREA.CTRYNO(1);
         CALL RCBF50M (PTR_RCBV500,
                       PTR_RCBV500I,
                       PTR_RETURN_AREA,
                       PTR_INT_AREA);
       END;
   END;

 SELECT (RETURN_AREA.RETURN_CODE);
   WHEN (0)
     DO;
       RCB035 = TB_RCB035 , BY NAME;
       WRK_SEQ_NO_SA0 = RCB035.FILE_SEQ_NUM_SC + 1;
     END;
   WHEN (4)
     DO;
       PARM_INT_AREA.COUNTRY_NUMBER   = '';
       PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
       PARM_INT_AREA.MESSAGE_NUMBER   = 'I050';
       PARM_INT_AREA.MSG_VAR_CODES    = ' ';
       PARM_INT_AREA.MSG_VAR_CODE_6   = 'PN';
       PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCB035';
       PARM_INT_AREA.MSG_VAR_CODE_7   = 'PK';
       PARM_INT_AREA.MSG_VAR_VALUE_7  = TB_RCBV500.PARAMETER_KEY;
       CALL RCB0M1M (PTR_INT_AREA);
       CALL RCBBC8M_ERROR (ADDR (RETURN_AREA.RETURN_SQL),
                           'OTHER','#011');
     END;
   OTHERWISE
     DO;
       CALL RCBBC8M_ERROR (ADDR (RETURN_AREA.RETURN_SQL),
                           'DB2','#012');
     END;
 END;

  END RCBBC8M_SA0_SEQNO_HEADER;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_WRITE_HEADER_SA0                      */
 /*                                                                  */
 /* DESCRIPTION      : WRITE HEADER FOR SA0 FILE WITH SEQUENCE NO    */
 /*                    RETRIEVED FROM UL01 + 1                       */
 /********************************************************************/
 RCBBC8M_WRITE_HEADER_SA0: PROC;

 CALL RCBBC8M_SA0_SEQNO_HEADER;
 CALL RCBBC8M_GET_RUN_DATE;

 RCBC8SA0_C000_SA0.CDBSFRT = 'C000';
 RCBC8SA0_C000_SA0.FILLER1 = '';
 RCBC8SA0_C000_SA0.DDEXSID = WRK_RUN_DATE;
 RCBC8SA0_C000_SA0.IDBSSN0 = WRK_SEQ_NO_SA0;
 RCBC8SA0_C000_SA0.DDLBACK = '';
 RCBC8SA0_C000_SA0.TDBSFIL = 'LOCAL CONTRACT DATA';

 WRITE FILE (RCBC8SA0) FROM (RCBC8SA0_REC);
 WRK_NO_OF_REC  = WRK_NO_OF_REC + 1;

 END RCBBC8M_WRITE_HEADER_SA0;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_PROCESS_INPUT                         */
 /*                                                                  */
 /* DESCRIPTION      : PROCESS THE INPUT SDW FILE AND MAP TO CREATE  */
 /*                    DI/DO/SAO FILES                               */
 /********************************************************************/
 RCBBC8M_PROCESS_INPUT: PROC;

 WRK_INST_STATUS    = RCBBC80_DATAREC.INSTALL_STATUS;

 SELECT;
   WHEN ( WRK_INST_STATUS = '1' | WRK_INST_STATUS = '3' |
          WRK_INST_STATUS = '4')
     DO;
       CALL RCBBC8M_PROCESS_DI;                     /* MAP SDW TO DI */
       IF RCBBC80_DATAREC.CONTR_NO ¬= ''
       THEN
       DO;
         CALL RCBBC8M_PROCESS_SA0;                 /* MAP SDW TO SA0 */
         CALL RCBBC8M_C002_CTRY_SA0;
       END;
     END;
    WHEN ( WRK_INST_STATUS = '0' | WRK_INST_STATUS = '5' |
           WRK_INST_STATUS = '9')
      DO;
        CALL RCBBC8M_PROCESS_DO;                    /* MAP SDW TO DO */
        IF RCBBC80_DATAREC.CONTR_NO ¬= ' '
        THEN DO;
           CALL RCBBC8M_PROCESS_SA0;               /* MAP SDW TO SA0 */
           CALL RCBBC8M_C002_CTRY_SA0;
           END;
      END;
    OTHERWISE
      CALL RCBBC8M_SKIP_RECORD;
 END;

 END RCBBC8M_PROCESS_INPUT;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_MACH_SER_CHECK                        */
 /*                                                                  */
 /* DESCRIPTION      : MACHINE SERIAL CHECK                          */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_MACH_SER_CHECK: PROC;

 TEMP_MACH_SER = RCBBC80_DATAREC.ORIGIN ||
                 SUBSTR(RCBBC80_DATAREC.SERNUM,3,5);

 IF VERIFY(TEMP_MACH_SER,WRK_ALPHANUMERIC) = 0                          11390081
  THEN
  WRK_MACH_SER = TEMP_MACH_SER;

 ELSE DO;
   WRK_MACH_SER = '';
   CALL RCBBC8M_MSG('0325');        /* MACHINE SERIAL NUMBER INVALID */
 END;

 END RCBBC8M_MACH_SER_CHECK;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_PROCESS_DI                            */
 /*                                                                  */
 /* DESCRIPTION      : PROCESS THE DI INPUT RECORDS                  */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_PROCESS_DI: PROC;

 IF RCBBC80_DATAREC.INSTALL_DTE ¬= ''
 THEN
   DO;
     WRK_INS_DATE = REPATTERN(RCBBC80_DATAREC.INSTALL_DTE,
                                      'YYDDD','YYYYMMDD');
   END;
 ELSE
   WRK_INS_DATE = '';

 IF RCBBC80_DATAREC.WRTY_EXP_DTE  ¬= ''
 THEN
   DO;
     WRK_WRTY_XP = REPATTERN(RCBBC80_DATAREC.WRTY_EXP_DTE,
                                      'YYDDD','YYYYMMDD');
   END;
 ELSE
   WRK_WRTY_XP  = '';

 CALL RCBBC8M_MACH_SER_CHECK;
 CALL RCBBC8M_MAP_SDW_DI;

 WRITE FILE(RCBC8DI) FROM (RCBC8DI_TYPE_DI);
 RCBBC80_READ_DI = RCBBC80_READ_DI + 1;

 END RCBBC8M_PROCESS_DI;
0/********************************************************************/
 /* IODULE NAME      : RCBBC8M_MAP_SDW_DI                            */
 /*                                                                  */
 /* DESCRIPTION      : MAP DI TYPE OF RECORDS FROM SDW TO DI         */
 /*                    OUTPUT FILE                                   */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_MAP_SDW_DI: PROC;

 RCBC8DI_TYPE_DI = '';

 RCBC8DI_TYPE_DI.GCYAA           = ' ' || RCBBC80_DATAREC.COUNTRY_CDE;
 RCBC8DI_TYPE_DI.AASID           = 'DI';
 RCBC8DI_TYPE_DI.GRKDI.CMAXA     = RCBBC80_DATAREC.MACH_TYPE;
 RCBC8DI_TYPE_DI.GRKDI.RMAXA     = WRK_MACH_SER;
 RCBC8DI_TYPE_DI.DVOXB           = 0;
 RCBC8DI_TYPE_DI.DVXAD           = 0;
 RCBC8DI_TYPE_DI.DVNXF           = 0;
 RCBC8DI_TYPE_DI.CMCXA           = RCBBC80_DATAREC.TYPE_OF_MAINT;
 RCBC8DI_TYPE_DI.VSRAA           = 0;
 RCBC8DI_TYPE_DI.DVNXH           = 0;
 RCBC8DI_TYPE_DI.VLRAA           = 0;
 RCBC8DI_TYPE_DI.VLSAA           = 0;
 RCBC8DI_TYPE_DI.VSRXA           = 0;
 RCBC8DI_TYPE_DI.VLRXA           = 0;
 RCBC8DI_TYPE_DI.VLSXA           = 0;
 RCBC8DI_TYPE_DI.VLIXA           = 0;
 RCBC8DI_TYPE_DI.RCUAC           = SUBSTR(RCBBC80_DATAREC.CUSTNO,3,6);
 RCBC8DI_TYPE_DI.DVOXU           = 0;
 RCBC8DI_TYPE_DI.DVOXR           = 0;
 RCBC8DI_TYPE_DI.DVNXD           = 0;
 RCBC8DI_TYPE_DI.DVNXE           = 0;
 RCBC8DI_TYPE_DI.DVXAI           = 0;
 RCBC8DI_TYPE_DI.DVNXC           = WRK_INS_DATE;
 RCBC8DI_TYPE_DI.DVOXS           = 0;
 RCBC8DI_TYPE_DI.DVPXA           = 0;
 RCBC8DI_TYPE_DI.DVOXT           = 0;
 RCBC8DI_TYPE_DI.QTHXB           = 0;
 RCBC8DI_TYPE_DI.CAGXA           = RCBBC80_DATAREC.TYPE_OF_AGREE;
 RCBC8DI_TYPE_DI.CSTXA           = RCBBC80_DATAREC.INSTALL_STATUS;
 RCBC8DI_TYPE_DI.GISBY           = '0'B;
 RCBC8DI_TYPE_DI.QTHAS           = 0;
 RCBC8DI_TYPE_DI.DVYYI           = 0;
 RCBC8DI_TYPE_DI.DVXXD           = 0;
 RCBC8DI_TYPE_DI.GDMXK           = '0'B;
 RCBC8DI_TYPE_DI.GISAF           = '0'B;
 RCBC8DI_TYPE_DI.GMMAC.CMMXA     = RCBBC80_DATAREC.MACH_MDL;
 RCBC8DI_TYPE_DI.DVNXO           = 0;
 RCBC8DI_TYPE_DI.QUEAH           = 0;
 RCBC8DI_TYPE_DI.DVXAR(*)        = 0;
 RCBC8DI_TYPE_DI.DVNYB           = 0;
 RCBC8DI_TYPE_DI.DVOXD           = 0;
 RCBC8DI_TYPE_DI.QTHXD           = 0;
 RCBC8DI_TYPE_DI.DVYYA           = 0;
 RCBC8DI_TYPE_DI.DVYYB           = 0;
 RCBC8DI_TYPE_DI.DVYYC           = 0;
 RCBC8DI_TYPE_DI.CMCXB           = RCBBC80_DATAREC.TYPE_OF_MAINT;
 RCBC8DI_TYPE_DI.DVNXG           = 0;
 RCBC8DI_TYPE_DI.DVYYK           = 0;
 RCBC8DI_TYPE_DI.VLRXB           = 0;
 RCBC8DI_TYPE_DI.VLSAB           = 0;
 RCBC8DI_TYPE_DI.MPRAA           = 0;
 RCBC8DI_TYPE_DI.MPRAB           = 0;
 RCBC8DI_TYPE_DI.DVXAP           = 0;
 RCBC8DI_TYPE_DI.GISBG           = '0'B;
 RCBC8DI_TYPE_DI.DVNXN           = 0;
 RCBC8DI_TYPE_DI.DVNXR           = 0;
 RCBC8DI_TYPE_DI.DVNXT           = 0;
 RCBC8DI_TYPE_DI.DVNXQ           = 0;
 RCBC8DI_TYPE_DI.DVNXM           = 0;
 RCBC8DI_TYPE_DI.DVNXP           = 0;
 RCBC8DI_TYPE_DI.DVXAS(*)        = 0;
 RCBC8DI_TYPE_DI.DMCRE           = 0;
 RCBC8DI_TYPE_DI.VLRXS           = 0;
 RCBC8DI_TYPE_DI.MPMMP           = 0;
 RCBC8DI_TYPE_DI.DVWAC           = WRK_WRTY_XP;
 RCBC8DI_TYPE_DI.QUBXP           = 0;
 RCBC8DI_TYPE_DI.DVPXB           = 0;
 RCBC8DI_TYPE_DI.DMACC           = 0;
 RCBC8DI_TYPE_DI.DMDIS           = 0;

 END RCBBC8M_MAP_SDW_DI;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_PROCESS_DO                            */
 /*                                                                  */
 /* DESCRIPTION      : PROCESS THE DO INPUT RECORDS                  */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_PROCESS_DO: PROC;

 CALL RCBBC8M_MACH_SER_CHECK;
                          /* THIS CONDITION IS CHECKED TO WRITE THE  */
                          /* INITIALIZED ORN AA000A TO OUTPUT FILE.  */
                          /* SWITCH_ORN_SET IS RESET AFTER 1ST WRITE */
 IF ¬SWITCH_ORN_SET & ¬SWITCH_ORN_UNL_SET
 THEN
   DO;
     CALL RCBBC8M_ASSIGN_ORD_REF_NO;
   END;

 IF SWITCH_ORN_UNL_SET & ¬EOF_RCBBC60
 THEN
  DO;
    DO UNTIL (SK_UNL >= SK_INP);
      IF SK_UNL < SK_INP
      THEN
        DO;
          CALL RCBBC8M_READ_UNL;
        END;
    END;

    SELECT;
      WHEN (SK_UNL = SK_INP)
        DO;
          IF RCBBC60_REC.ORDER_REF_NUMBER ¬= ''
          THEN
            DO;
              WRK_GEN_ORDER_REFNUM = RCBBC60_REC.ORDER_REF_NUMBER;
            END;
          ELSE
          CALL RCBBC8M_ASSIGN_ORD_REF_NO;

          CALL RCBBC8M_READ_UNL;
        END;
      WHEN (SK_UNL > SK_INP)
        DO;
          CALL RCBBC8M_ASSIGN_ORD_REF_NO;
        END;
      OTHERWISE;
    END;
  END;

 CALL RCBBC8M_MAP_SDW_DO;

 WRITE FILE(RCBC8DO) FROM (RCBC8DO_TYPE_DO);
 RCBBC80_READ_DO = RCBBC80_READ_DO + 1;

 SWITCH_ORN_SET = FALSE;

 END RCBBC8M_PROCESS_DO;
 /********************************************************************/
 /* MODULE NAME      : RCBBC8M_MAP_SDW_DO                            */
 /*                                                                  */
 /* DESCRIPTION      : MAP DO TYPE OF RECORDS FROM SDW TO DO         */
 /*                    OUTPUT FILES                                  */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_MAP_SDW_DO: PROC;

 RCBC8DO_TYPE_DO = '';

 RCBC8DO_TYPE_DO.GCYAA             = ' ' || RCBBC80_DATAREC.COUNTRY_CDE;
 RCBC8DO_TYPE_DO.AASID             = 'DO';
 RCBC8DO_TYPE_DO.GRKDO.RORXA       = WRK_GEN_ORDER_REFNUM;
 RCBC8DO_TYPE_DO.DVOXB             = 0;
 RCBC8DO_TYPE_DO.DVXAD             = 0;
 RCBC8DO_TYPE_DO.CMAXA             = RCBBC80_DATAREC.MACH_TYPE;
 RCBC8DO_TYPE_DO.YLKAD.RMAXA       = WRK_MACH_SER;
 RCBC8DO_TYPE_DO.RMLAA             = 0;
 RCBC8DO_TYPE_DO.DVLXJ             = 0;
 RCBC8DO_TYPE_DO.CMCXA             = RCBBC80_DATAREC.TYPE_OF_MAINT;
 RCBC8DO_TYPE_DO.QTFXA             = 0;
 RCBC8DO_TYPE_DO.QUEAA             = 0;
 RCBC8DO_TYPE_DO.DVKXJ             = 0;
 RCBC8DO_TYPE_DO.DVNXI             = 0;
 RCBC8DO_TYPE_DO.DVNXL             = 0;
 RCBC8DO_TYPE_DO.DVNXS             = 0;
 RCBC8DO_TYPE_DO.RCUAC             = SUBSTR(RCBBC80_DATAREC.CUSTNO,3,6);
 RCBC8DO_TYPE_DO.DVNXJ             = 0;
 RCBC8DO_TYPE_DO.DVNXK             = 0;
 RCBC8DO_TYPE_DO.VSRXA             = 0;
 RCBC8DO_TYPE_DO.DVNXW             = 0;
 RCBC8DO_TYPE_DO.QTHAS             = 0;
 RCBC8DO_TYPE_DO.VLSXA             = 0;
 RCBC8DO_TYPE_DO.VLRXA             = 0;
 RCBC8DO_TYPE_DO.DVOXC             = 0;
 RCBC8DO_TYPE_DO.VSRAA             = 0;
 RCBC8DO_TYPE_DO.DVLXI             = 0;
 RCBC8DO_TYPE_DO.VLSAA             = 0;
 RCBC8DO_TYPE_DO.VLRAA             = 0;
 RCBC8DO_TYPE_DO.DVOAI             = 0;
 RCBC8DO_TYPE_DO.DVCXH             = WRK_RUN_DATE_TEMP;
 RCBC8DO_TYPE_DO.DVKXO             = 0;
 RCBC8DO_TYPE_DO.DVCXG             = 0;
 RCBC8DO_TYPE_DO.DVKXA             = WRK_RUN_DATE_TEMP;
 RCBC8DO_TYPE_DO.DVLXA             = 0;
 RCBC8DO_TYPE_DO.DVLXB             = WRK_RUN_DATE_TEMP;
 RCBC8DO_TYPE_DO.DVCXI             = 0;
 RCBC8DO_TYPE_DO.DVNXA             = 0;
 RCBC8DO_TYPE_DO.DVIXA             = 0;
 RCBC8DO_TYPE_DO.DVDAB             = 0;
 RCBC8DO_TYPE_DO.CAGXA             = RCBBC80_DATAREC.TYPE_OF_AGREE;
 RCBC8DO_TYPE_DO.QXDXP             = 0;
 RCBC8DO_TYPE_DO.GDMXF             = '0'B;
 RCBC8DO_TYPE_DO.GMMAC.CMMXA       = RCBBC80_DATAREC.MACH_MDL;
 RCBC8DO_TYPE_DO.RASXA             = 0;
 RCBC8DO_TYPE_DO.CIEAV             = '0'B;
 RCBC8DO_TYPE_DO.CIFHC             = '0'B;
 RCBC8DO_TYPE_DO.CICSD             = '0'B;
 RCBC8DO_TYPE_DO.CIOSM             = '0'B;
 RCBC8DO_TYPE_DO.CIDGK             = '0'B;
 RCBC8DO_TYPE_DO.XALB3             = '0'B;
 RCBC8DO_TYPE_DO.DVYYL             = 0;
 RCBC8DO_TYPE_DO.DVYYM             = 0;
 RCBC8DO_TYPE_DO.CIFBE             = '0'B;
 RCBC8DO_TYPE_DO.CIFBE             = '0'B;
 RCBC8DO_TYPE_DO.CIFBF             = '0'B;
 RCBC8DO_TYPE_DO.CISBP             = '0'B;
 RCBC8DO_TYPE_DO.CIFBQ             = '0'B;
 RCBC8DO_TYPE_DO.CIFBH             = '0'B;
 RCBC8DO_TYPE_DO.CIDDG             = '0'B;
 RCBC8DO_TYPE_DO.CIDAZ             = '0'B;
 RCBC8DO_TYPE_DO.CIDXW             = '0'B;
 RCBC8DO_TYPE_DO.DVXAI             = 0;
 RCBC8DO_TYPE_DO.QUEAH             = 0;
 RCBC8DO_TYPE_DO.GISAF             = '0'B;
 RCBC8DO_TYPE_DO.DVAFD             = 0;
 RCBC8DO_TYPE_DO.GRNDO.DVXAR(*)    = 0;
 RCBC8DO_TYPE_DO.QTHXC             = 0;
 RCBC8DO_TYPE_DO.CMCXB             = RCBBC80_DATAREC.TYPE_OF_MAINT;
 RCBC8DO_TYPE_DO.DVLIS             = 0;
 RCBC8DO_TYPE_DO.DADLI             = 0;
 RCBC8DO_TYPE_DO.DVPAD             = 0;

 END RCBBC8M_MAP_SDW_DO;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_ASSIGN_ORD_REF_NO                     */
 /*                                                                  */
 /* DESCRIPTION      : GENERATE ORDER REFERENCE NO (ORN) FOR A RECORD*/
 /*                    WHICH DOES NOT HAVE A VALID ORN FROM T260     */
 /********************************************************************/
 RCBBC8M_ASSIGN_ORD_REF_NO: PROC;

 SWITCH_NEXT1 = FALSE;
 SWITCH_NEXT2 = FALSE;
 SWITCH_NEXT3 = FALSE;

 VAR_A  = SUBSTR (WRK_ORDER_REFNUM,1,1);
 VAR_B  = SUBSTR (WRK_ORDER_REFNUM,2,1);
 VAR_C  = SUBSTR (WRK_ORDER_REFNUM,3,3);
 VAR_D  = SUBSTR (WRK_ORDER_REFNUM,6,1);

 IF VERIFY (VAR_D,WRK_ALPHANUMERIC) = 0
 THEN
   DO;
     IF VERIFY (VAR_D,WRK_ALPHA) = 0
     THEN
       DO;
         IF VAR_D ¬= 'Z' THEN
           DO;
             WRK_D = INDEX(WRK_ALPHANUMERIC,VAR_D);
             WRK_D = WRK_D + 1;
           END;
         ELSE
           DO;
             WRK_D = 1;
           END;
         VAR_D  = SUBSTR(WRK_ALPHANUMERIC,WRK_D,1);
       END;
     ELSE
     IF VERIFY (VAR_D,WRK_NUMERIC) = 0
     THEN
       DO;
         IF VAR_D ¬= '9' THEN
           DO;
             VAR_D1 = VAR_D;
             VAR_D1 = VAR_D1 + 1;
             VAR_D  = VAR_D1;
           END;
         ELSE
           DO;
             SWITCH_NEXT1 = TRUE;
             VAR_D = 'A';
           END;
       END;
     WRK_GEN_ORDER_REFNUM = VAR_A || VAR_B || VAR_C || VAR_D ;
   END;

   IF SWITCH_NEXT1 = TRUE
   THEN
   DO;
     IF VAR_C ¬= 999
     THEN
       VAR_C = VAR_C + 1;
     ELSE
       DO;
         VAR_C = 000;
         SWITCH_NEXT2 = TRUE;
       END;
    WRK_GEN_ORDER_REFNUM = VAR_A || VAR_B || VAR_C || VAR_D ;
   END;

   IF SWITCH_NEXT2 = TRUE
   THEN
   DO;
     IF VAR_B ¬= 'Z'
     THEN
       DO;
         WRK_B = INDEX(WRK_ALPHA,VAR_B);
         WRK_B = WRK_B + 1;
       END;
     ELSE
       DO;
         SWITCH_NEXT3 = TRUE;
         WRK_B = 1;
       END;
     VAR_B  = SUBSTR(WRK_ALPHA,WRK_B,1);

    WRK_GEN_ORDER_REFNUM = VAR_A || VAR_B || VAR_C || VAR_D ;
   END;

   IF SWITCH_NEXT3 = TRUE
   THEN
   DO;
     IF VAR_A ¬= 'Z'
     THEN
       DO;
         WRK_A = INDEX(WRK_ALPHA,VAR_A);
         WRK_A = WRK_A + 1;
       END;
     ELSE
         WRK_A = 1;

     VAR_A  = SUBSTR(WRK_ALPHA,WRK_A,1);

    WRK_GEN_ORDER_REFNUM = VAR_A || VAR_B || VAR_C || VAR_D ;
   END;

 WRK_ORDER_REFNUM = WRK_GEN_ORDER_REFNUM;

 END RCBBC8M_ASSIGN_ORD_REF_NO;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_PROCESS_SA0                           */
 /*                                                                  */
 /* DESCRIPTION      : PROCESS THE SA0 INPUT RECORDS                 */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_PROCESS_SA0: PROC;

 EFFECTIVE_DTE_N = SUBSTR(RCBBC80_DATAREC.EFFECTIVE_DTE,1,4) ||
                   '-' ||
                   SUBSTR(RCBBC80_DATAREC.EFFECTIVE_DTE,5,2) ||
                   '-' ||
                   SUBSTR(RCBBC80_DATAREC.EFFECTIVE_DTE,7,2);

 END_DTE_N       = SUBSTR(RCBBC80_DATAREC.END_DTE,1,4) ||
                   '-' ||
                   SUBSTR(RCBBC80_DATAREC.END_DTE,5,2) ||
                   '-' ||
                   SUBSTR(RCBBC80_DATAREC.END_DTE,7,2);

 WRK_TEMP_DAY  = RCBBC80_DATAREC.MON_STRT_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_MON_STRT = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.MON_STOP_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_MON_STOP = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.TUE_STRT_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_TUE_STRT = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.TUE_STOP_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_TUE_STOP = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.WED_STRT_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_WED_STRT = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.WED_STOP_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_WED_STOP = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.THU_STRT_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_THU_STRT = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.THU_STOP_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_THU_STOP = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.FRI_STRT_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_FRI_STRT = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.FRI_STOP_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_FRI_STOP = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.SAT_STRT_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_SAT_STRT = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.SAT_STOP_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_SAT_STOP = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.SUN_STRT_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_SUN_STRT = WRK_CORRECT_TIME;

 WRK_TEMP_DAY  = RCBBC80_DATAREC.SUN_STOP_TME;
 CALL RCBBC8M_CONV_TIME;
 TEMP_SUN_STOP = WRK_CORRECT_TIME;

 END RCBBC8M_PROCESS_SA0;
 /********************************************************************/
 /* MODULE NAME      : RCBBC8M_C001_CTRY_SA0                         */
 /*                                                                  */
 /* DESCRIPTION      : CREATE THE COUNTRY HEADER - C001 FOR SA0      */
 /*                    OUTPUT FILE                                   */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_C001_CTRY_SA0: PROC;

 RCBC8SA0_REC = ' ';

 RCBC8SA0_C001_SA0.CDBSFRT  =  'C001';
 RCBC8SA0_C001_SA0.IOPUCTY  =  WRK_CTRYNO;

 WRITE FILE(RCBC8SA0) FROM(RCBC8SA0_REC);

 COUNT_CTRY_REC = COUNT_CTRY_REC + 1;
 WRK_NO_OF_REC  = WRK_NO_OF_REC  + 1;

 CTRY_FLG_SET = '0'B;
 SW_C998      = TRUE;

 END RCBBC8M_C001_CTRY_SA0;
 /********************************************************************/
 /* MODULE NAME      : RCBBC8M_C002_CTRY_SA0                         */
 /*                                                                  */
 /* DESCRIPTION      : CREATE THE COUNTRY DATA REC - C002 FOR SA0    */
 /*                    OUTPUT FILE                                   */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_C002_CTRY_SA0: PROC;

 RCBC8SA0_C002_SA0 = ' ';

 RCBC8SA0_C002_SA0.CDBSFRT             = 'C002';
 RCBC8SA0_C002_SA0.IOPUCTY             = RCBBC80_DATAREC.COUNTRY_CDE;
 RCBC8SA0_C002_SA0.CSLMTYP             = RCBBC80_DATAREC.MACH_TYPE;
 RCBC8SA0_C002_SA0.CSLMMOD             = RCBBC80_DATAREC.MACH_MDL;
 IF WRK_MACH_SER ¬= ' ' THEN
 DO;
 RCBC8SA0_C002_SA0.IHSIMID             = SUBSTR(WRK_MACH_SER,1,2)||
                                         '00'||SUBSTR(WRK_MACH_SER,3,5);
 END;
 RCBC8SA0_C002_SA0.ICUSHWU             = RCBBC80_DATAREC.CUSTNO;
 RCBC8SA0_C002_SA0.IAGRNBR             = RCBBC80_DATAREC.CONTR_NO;
 RCBC8SA0_C002_SA0.DDBSEFF             = EFFECTIVE_DTE_N;
 RCBC8SA0_C002_SA0.DDBSIAC             = END_DTE_N;
 RCBC8SA0_C002_SA0.DAGRASS             = EFFECTIVE_DTE_N;
 RCBC8SA0_C002_SA0.DAGREXP             = END_DTE_N;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMFR (1) = TEMP_MON_STRT;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMTO (1) = TEMP_MON_STOP;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMFR (2) = TEMP_TUE_STRT;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMTO (2) = TEMP_TUE_STOP;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMFR (3) = TEMP_WED_STRT;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMTO (3) = TEMP_WED_STOP;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMFR (4) = TEMP_THU_STRT;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMTO (4) = TEMP_THU_STOP;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMFR (5) = TEMP_FRI_STRT;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMTO (5) = TEMP_FRI_STOP;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMFR (6) = TEMP_SAT_STRT;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMTO (6) = TEMP_SAT_STOP;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMFR (7) = TEMP_SUN_STRT;
 RCBC8SA0_C002_SA0.SRCCMCV.DAGRMTO (7) = TEMP_SUN_STOP;
 RCBC8SA0_C002_SA0.QCUOHVP             = 0;
 RCBC8SA0_C002_SA0.IAGRNOE             = 'A';
 RCBC8SA0_C002_SA0.ICESMIC             = 0;

 WRITE FILE(RCBC8SA0) FROM(RCBC8SA0_REC);

 COUNT_CTRY_REC = COUNT_CTRY_REC + 1;
 WRK_NO_OF_REC  = WRK_NO_OF_REC  + 1;

 WRK_HASH_FIELD = SUBSTR (RCBC8SA0_C002_SA0.IHSIMID,5,4);

 CALL RCB018M (WRK_HASH_FIELD,
               WRK_HASH_CTRY,
               PTR_INT_AREA);

 END RCBBC8M_C002_CTRY_SA0;
 /********************************************************************/
 /* MODULE NAME      : RCBBC8M_C998_CTRY_SA0                         */
 /*                                                                  */
 /* DESCRIPTION      : CREATE THE COUNTRY TRAILER - C998 FOR SA0     */
 /*                    OUTPUT FILE                                   */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_C998_CTRY_SA0: PROC;

 RCBC8SA0_REC = ' ';

 COUNT_CTRY_REC = COUNT_CTRY_REC + 1;
 WRK_NO_OF_REC  = WRK_NO_OF_REC  + 1;

 RCBC8SA0_C998_SA0.CDBSFRT = 'C998';
 RCBC8SA0_C998_SA0.IOPUCTY = WRK_CTRYNO;
 RCBC8SA0_C998_SA0.SRCCF04 = '';
 RCBC8SA0_C998_SA0.QCINRBA = COUNT_CTRY_REC;       /* NO OF CTRY REC */
 RCBC8SA0_C998_SA0.QDBSHST = WRK_HASH_CTRY;            /* HASH TOTAL */

 WRITE FILE (RCBC8SA0) FROM (RCBC8SA0_REC);

 COUNT_CTRY_REC = 0;
 WRK_HASH_TOTL  = WRK_HASH_TOTL + WRK_HASH_CTRY;
 WRK_HASH_CTRY  = 0;

 END RCBBC8M_C998_CTRY_SA0;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      :  RCBBC8M_CONV_TIME                            */
 /*                                                                  */
 /* DESCRIPTION      :  CONVERSION FROM HHD TO HH:MM:SS              */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_CONV_TIME: PROC;

 WRK_CORR_HOUR = SUBSTR(WRK_TEMP_DAY,1,2);
 WRK_TEMP_MIN  = SUBSTR(WRK_TEMP_DAY,3,1);

 SELECT(WRK_TEMP_MIN);
     WHEN ('0')                                   /* FREQUENTLY USED */
     WRK_CORR_MIN = '00';

     WHEN ('5')                                   /* FREQUENTLY USED */
     WRK_CORR_MIN = '30';

     WHEN ('1')
     WRK_CORR_MIN = '06';

     WHEN ('2')
     WRK_CORR_MIN = '12';

     WHEN ('3')
     WRK_CORR_MIN = '18';

     WHEN ('4')
     WRK_CORR_MIN = '24';

     WHEN ('6')
     WRK_CORR_MIN = '36';

     WHEN ('7')
     WRK_CORR_MIN = '42';

     WHEN ('8')
     WRK_CORR_MIN = '48';

     WHEN ('9')
     WRK_CORR_MIN = '54';

     OTHERWISE
     DO;
       CALL RCBBC8M_ERROR (ADDR (SQLCA),
                           'OTHER','#013');
     END;
 END;

 WRK_CORRECT_TIME = WRK_CORR_HOUR || ':' || WRK_CORR_MIN|| ':' || '00';

 END RCBBC8M_CONV_TIME;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_TERM_COUNTRY                          */
 /*                                                                  */
 /* DESCRIPTION      : TERMINATE CURRENT COUNTRY                     */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_TERM_COUNTRY: PROC;

 IF SW_C998                /* WRITE SA0 TRAILER RECORD FOR A COUNTRY */
 THEN
   DO;
     CALL RCBBC8M_C998_CTRY_SA0;
     SW_C998 = FALSE;
   END;

 IF SKIP_COUNTRY = '1'B
 THEN
   PARM_INT_AREA.COUNTRY_NUMBER  = WRK_CTRY_FILE_PREV;
 ELSE
 DO;
   PARM_INT_AREA.COUNTRY_NUMBER  = WRK_CTRYNO;
                           /******************************************/
                           /* GIVE WARNING IF ALL COUNTS ZERO FOR    */
                           /* A COUNTRY (MSG 184) -->COUNTRY MISSING */
                           /******************************************/
 IF RCBBC80_READ_CTY_REC = 0 &
    WRK_CTRYNO ¬= RCBC8SA0_C001_SA0.IOPUCTY
   THEN
   DO;
     CALL RCBBC8M_MSG('0184');
     CALL RCBBC8M_SAF0_HDRTRL;
   END;

 END;

 END RCBBC8M_TERM_COUNTRY;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_SAF0_HDRTRL                           */
 /*                                                                  */
 /* DESCRIPTION      : WRITING SA0 HEADER/TRAILER FOR REQUESTED      */
 /*                    COUNTRY BUT NO RECORDS IN FILE                */
 /********************************************************************/
 RCBBC8M_SAF0_HDRTRL: PROC;

 CALL RCBBC8M_C001_CTRY_SA0;
 CALL RCBBC8M_C998_CTRY_SA0;
 SW_C998 = FALSE;

 END RCBBC8M_SAF0_HDRTRL;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_C999_TRAILER_SA0                      */
 /*                                                                  */
 /* DESCRIPTION      : WRITING TRAILER FOR SA0 OUTPUT FILE           */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_C999_TRAILER_SA0: PROC;

 RCBC8SA0_C999_SA0.CDBSFRT = 'C999';
 RCBC8SA0_C999_SA0.FILLER1 = '';
 RCBC8SA0_C999_SA0.QDBSCDR = WRK_NO_OF_REC;         /* TOTAL REC CNT */
 RCBC8SA0_C999_SA0.QDBSHST = WRK_HASH_TOTL;            /* HASH TOTAL */
                                         /* WRITE SA0 TRAILER RECORD */
 WRITE FILE (RCBC8SA0) FROM (RCBC8SA0_REC);

 END RCBBC8M_C999_TRAILER_SA0;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_SKIP_CTRY_REC                         */
 /*                                                                  */
 /* DESCRIPTION      : COUNT OF SKIPPED COUNTRY RECORDS              */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_SKIP_CTRY_REC: PROC;

 RCBBC80_SKIP_CTRY = RCBBC80_SKIP_CTRY + 1;

 END RCBBC8M_SKIP_CTRY_REC;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_SKIP_RECORD                           */
 /*                                                                  */
 /* DESCRIPTION      : COUNT OF SKIPPED COUNTRY RECORDS              */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_SKIP_RECORD: PROC;

 RCBBC80_SKIP_REC = RCBBC80_SKIP_REC + 1;

 END RCBBC8M_SKIP_RECORD;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_WRITE_TRAILER                         */
 /*                                                                  */
 /* DESCRIPTION      : WRITE THE TRAILER TO DI/DO/SAO OUTPUT FILES   */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_WRITE_TRAILER: PROC;

 RCBBC80_READ_DI = RCBBC80_READ_DI + 1;
 RCBBC80_READ_DO = RCBBC80_READ_DO + 1;

 READ FILE(RCBTYDI) INTO(FILE_RCBTYDI);

 WRK_READ_DI = RCBBC80_READ_DI - 2;
 WRK_READ_DO = RCBBC80_READ_DO - 2;

 SUBSTR(FILE_RCBTYDI,37,4)  = WRK_NO_REC_DI;
 SUBSTR(FILE_RCBTY_DI,01,1) = 'T';
 SUBSTR(FILE_RCBTY_DI,02)   = FILE_RCBTYDI;

 READ FILE(RCBTYDO) INTO(FILE_RCBTYDO);

 SUBSTR(FILE_RCBTYDO,37,4)  = WRK_NO_REC_DO;
 SUBSTR(FILE_RCBTY_DO,01,1) = 'T';
 SUBSTR(FILE_RCBTY_DO,02)   = FILE_RCBTYDO;
                                      /* WRITE DI/DO TRAILER RECORDS */
 WRITE FILE(RCBC8DI) FROM(FILE_RCBTY_DI);
 WRITE FILE(RCBC8DO) FROM(FILE_RCBTY_DO);

 WRK_NO_OF_REC  = WRK_NO_OF_REC + 1;

 IF SWITCH_END_CTY THEN
 DO;
   CALL RCBBC8M_C999_TRAILER_SA0;
 END;

 END RCBBC8M_WRITE_TRAILER;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_MSG                                   */
 /*                                                                  */
 /* DESCRIPTION      : CALLS THE COMMON MESSAGE ROUTINE TO PRINT     */
 /*                    THE RIGHT MESSAGE                             */
 /*                                                                  */
 /********************************************************************/
0RCBBC8M_MSG: PROC (A_MSG_NR);

 DCL A_MSG_NR  CHAR(04);
                                              /* RESET COMMON FIELDS */
 PARM_INT_AREA.MSG_VAR_CODES = ' ';

 SELECT (A_MSG_NR);
                                     /* 0005: NO CTRY FOUND FOR PROG */
   WHEN ('0005') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'CY';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC8M';
   END;
                      /* 0007: MISMATCH OF RECORD COUNT WITH TRAILER */
   WHEN ('0007') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = RCBBC80_READ_REC;
     PARM_INT_AREA.MSG_VAR_CODE_7   = 'C7';
     PARM_INT_AREA.MSG_VAR_VALUE_7  = RCBBC80_TRAILER.TOTAL_COUNT;
   END;
                                     /* 0013: EMPTY FILE OR DATABASE */
   WHEN ('0013') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
   END;
                                       /* 0014: INVALID HEADER FOUND */
   WHEN ('0014') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
   END;
                               /* 0015: RECORDS FOUND AFTER TRAILER */
   WHEN ('0015') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
   END;
                                           /* 0017: NO TRAILER FOUND */
   WHEN ('0017') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
   END;
                                   /* 0180: RUNS ARE OUT OF SEQUENCE */
   WHEN ('0180') DO;
     PARM_INT_AREA.COUNTRY_NUMBER   = '';
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
     PARM_INT_AREA.MSG_VAR_CODE_7   = 'SQ';
     PARM_INT_AREA.MSG_VAR_VALUE_7  = RCBBC80_HEADER.SEQ_NUM;
     PARM_INT_AREA.MSG_VAR_CODE_8   = 'SQ';
     WRK_SEQ_NO                     = RCB035.FILE_SEQ_NUM_SC + 1;
     PARM_INT_AREA.MSG_VAR_VALUE_8  = WRK_SEQ_NO;
   END;
      /* 0181: COUNTRY WAS NOT REQUESTED IN PARM BUT PRESENT IN FILE */
   WHEN ('0181') DO;
     PARM_INT_AREA.COUNTRY_NUMBER   = RCBBC80_DATAREC.COUNTRY_CDE;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'CY';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
   END;
                          /* 0184: COUNTRY REQUESTED NOT IN I/P FILE */
   WHEN ('0184') DO;
     PARM_INT_AREA.COUNTRY_NUMBER   = WRK_CTRYNO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'CY';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
   END;
                              /* 0325: MACHINE SERIAL NUMBER INVALID */
   WHEN ('0325') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'BU';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBC80';
   END;
                              /* I050: RECORD NOT FOUND FOR PK PN ST */
   WHEN('I050') DO;
     PARM_INT_AREA.COUNTRY_NUMBER   = '';
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MSG_VAR_CODE_6   = 'PN';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCB035';
     PARM_INT_AREA.MSG_VAR_CODE_7   = 'PK';
     PARM_INT_AREA.MSG_VAR_VALUE_7  =  TB_RCBV500.PARAMETER_KEY;
   END;
                                  /* 9999: PROGRAM SUCCESFULLY ENDED */
   WHEN ('9999') DO;
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   END;
   OTHERWISE DO;
     PUT SKIP LIST( '#DBG# '||'A_MSG_NR=' || A_MSG_NR);
     CALL RCBBC8M_ERROR (NULL, 'OTHER', '#014');            /* ABORT */
     END;
 END;
                                 /* MESSAGE IS VALID, REPORT MESSAGE */
 PARM_INT_AREA.MESSAGE_NUMBER = A_MSG_NR;
 CALL RCB0M1M(PTR_INT_AREA);

 END RCBBC8M_MSG;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_TERM_PROGRAM                          */
 /*                                                                  */
 /* DESCRIPTION      : TERMINATE PROGRAM                             */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_TERM_PROGRAM: PROC;
 TB_RCBV500   = '';
 TB_RCBV500_I = '';
                                        /* ADD 1 TO FILE SEQ. NUMBER */

 RCB035.FILE_SEQ_NUM_SC = WRK_SEQ;
 TB_RCB035              = RCB035 , BY NAME;

 TB_RCB035.PROC_ID      = COUNTRY_AREA.PROC_ID;
 TB_RCB035.FILLER_G1    = COUNTRY_AREA.CTRY_SET_ID;

 CALL RCBG50M (PTR_RCBV500,                         /* UPDATE RCB035 */
               PTR_RCBV500I,
               PTR_RETURN_AREA,
               PTR_INT_AREA);

 SELECT (RETURN_AREA.RETURN_CODE);
   WHEN (0);
   OTHERWISE
     DO;
       CALL RCBBC8M_ERROR (ADDR (RETURN_AREA.RETURN_SQL),
                          'DB2','#015');
     END;
 END;
 PARM_INT_AREA.COUNTRY_NUMBER  = '';
                                  /***********************************/
                                  /* CLOSE ALL FILES                 */
                                  /***********************************/
 CLOSE FILE (RCBBC80);
 CLOSE FILE (RCBBC60);
 CLOSE FILE (RCBTYDI);
 CLOSE FILE (RCBTYDO);
 CLOSE FILE (RCBC8DI);
 CLOSE FILE (RCBC8DO);
 CLOSE FILE (RCBC8SA0);
                                 /* SUCCESSFUL COMPLETION OF PROGRAM */
 CALL RCBBC8M_MSG('9999');

                              /***************************************/
                              /* COUNT MESSAGES FOR THE OUTPUT FILES */
                              /***************************************/
     PARM_INT_AREA.MSG_VAR_CODES    = '';
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MESSAGE_NUMBER   = '0004';

     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_CODE_7   = 'C6';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = WRK_REC_DI;
     CNT_PIC9                       = RCBBC80_READ_DI;
     PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;

     PARM_INT_AREA.MSG_VAR_CODE_8   = 'FL';
     PARM_INT_AREA.MSG_VAR_CODE_9   = 'C6';
     PARM_INT_AREA.MSG_VAR_VALUE_8  = WRK_REC_DO;
     CNT_PIC10                      = RCBBC80_READ_DO;
     PARM_INT_AREA.MSG_VAR_VALUE_9  = CNT_PIC10;

     PARM_INT_AREA.MSG_VAR_CODE_10  = 'FL';
     PARM_INT_AREA.MSG_VAR_CODE_11  = 'C6';
     PARM_INT_AREA.MSG_VAR_VALUE_10 = WRK_REC_SA0;
     CNT_PIC11                      = WRK_NO_OF_REC;
     PARM_INT_AREA.MSG_VAR_VALUE_11 = CNT_PIC11;
     CALL RCB0M1M (PTR_INT_AREA);

     PARM_INT_AREA.MSG_VAR_CODES    = '';
     PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
     PARM_INT_AREA.MESSAGE_NUMBER   = '0003';

     PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
     PARM_INT_AREA.MSG_VAR_CODE_7   = 'C1';
     PARM_INT_AREA.MSG_VAR_VALUE_6  = WRK_FIL_NAME;
     CNT_PIC9                       = RCBBC80_READ_REC;
     PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;

     PARM_INT_AREA.MSG_VAR_CODE_8   = 'FL';
     PARM_INT_AREA.MSG_VAR_CODE_9   = 'C4';
     PARM_INT_AREA.MSG_VAR_VALUE_8  = WRK_SKIP_REC_CTRY;
     CNT_PIC10                      = RCBBC80_SKIP_CTRY;
     PARM_INT_AREA.MSG_VAR_VALUE_9  = CNT_PIC10;

     PARM_INT_AREA.MSG_VAR_CODE_10  = 'FL';
     PARM_INT_AREA.MSG_VAR_CODE_11  = 'C5';
     PARM_INT_AREA.MSG_VAR_VALUE_10 = WRK_SKIP_REC_INS;
     CNT_PIC10                      = RCBBC80_SKIP_REC;
     PARM_INT_AREA.MSG_VAR_VALUE_11 = CNT_PIC10;
     CALL RCB0M1M (PTR_INT_AREA);

                       /* CLOSE MESSAGE FILE (ALWAYS LAST ACTION..!) */
 PARM_INT_AREA.MSG_REQUEST    = 'C';
 CALL RCB0M1M(PTR_INT_AREA);

 END RCBBC8M_TERM_PROGRAM;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBC8M_ERROR                                 */
 /*                                                                  */
 /* DESCRIPTION      : CALLS THE COMMON ERROR ROUTINE                */
 /*                                                                  */
 /********************************************************************/
 RCBBC8M_ERROR: PROC (PTR_ERROR,
                      ERR_TYPE,
                      CALL_ID);

 DCL PTR_ERROR  PTR;
 DCL ERR_TYPE   CHAR (8);
 DCL CALL_ID    CHAR (4);

 PARM_INT_AREA.PTR_ERROR = PTR_ERROR;
 PARM_INT_AREA.ERR_TYPE  = ERR_TYPE;
 PARM_INT_AREA.CALL_ID   = CALL_ID;
 CALL RCB0E1M (PTR_INT_AREA);

 END RCBBC8M_ERROR;
1/********************************************************************/
 /*DO NOT CHANGE THIS PART, IT IS MEANT FOR ABR                      */
 /********************************************************************/
0%INCLUDE DAIFPLH ;                       /* COMPILE DATE/TIME STAMP */
 $DAIMOD (RCBBC8M);                         /* MODULE TO BE COMPILED */
0/********************************************************************/
 END RCBBC8M;