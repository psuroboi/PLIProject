 /* RCBBQPM - PUT RECORDS ON MQ SERIES QUEUE            CEDS SYSTEM   */
 /* #LVL# ************************************************************/
 /* #LVL#:RCBBQPM  P050 02/16/04 20:39 PLI                           */
 /* REASON:R021 SR1615  FIX CUII HDR                                 */
 /* #LVL# ************************************************************/
 /* #LVL#:RCBBQPM  P050 05/31/02 14:03 PLI                           */
 /* REASON:R015 ESG006  LE CONVERSION                                */
 /* #LVL# ************************************************************/
 /* #LVL#:RCBBQPM  P040 11/20/01 13:11 PLI                           */
 /* REASON:R013 CHQ042  MQSERIES UTILITIES                           */
 RCBBQPM: PROC (PARAM) OPTIONS(MAIN) REORDER;
 /*********************************************************************/
 /*  MODULE-NAME: RCBBQPM                                             */
 /*                                                                   */
 /*  DESCRIPTION: Read file and load to MQ Series queue based         */
 /*               ON PARMS AND CONTROL CARDS                          */
 /*                                                                   */
 /*  FUNCTION:                                                        */
 /*      READ A MESSAGE FILE AND PUT THE RECORDS ON THE               */
 /*      MQ Series queue specified in the input parameters.           */
 /*                                                                   */
 /*  ENTRY-POINT:  RCBBQPM                                            */
 /*                                                                   */
 /*  LANGUAGE: PL/I - MQ SERIES                                       */
 /*                                                                   */
 /*  PARMS:   MQ Series Queue Manager                                 */
 /*           MQ Series Queue Name                                    */
 /*                                                                   */
 /*  INPUT:   DDNAME = MQINPUT                                        */00150091
 /*               FILE CONTAINING THE DATA FOR MESSAGES TO BE         */00160091
 /*               SENT                                                */00170091
 /*           DDNAME = CONTROL                                        */00150091
 /*               CONTROL CARD CONTINING INFORMATION ON PROCESSING    */00160091
 /*               OPTIONS                                             */00290091
 /*           POS 01-01  *  FOR COMMENT OR CEDS  INSTANCE CHAR(1)     */00290091
 /*               02-02 FILLER                                        */00290091
 /*               03-07 LENGTH OF DATA  CHAR(5)                       */00290091
 /*               08-08 FILLER                                        */00290091
 /*               09-16 TRANSACTIONS TYPE FOR MESSAGE RECORD ID       */00290091
 /*               17-17 FILLER                                        */00290091
 /*               18-25  SINGLE OR MULTIPLE MESSAGES CHAR(8)          */00290091
 /*               26-26 FILLER                                        */00290091
 /*               27-32 LIMIT OF MULTIPLE TRANSACTIONS  CHAR(6)       */00290091
 /*               33-33 FILLER                                SR1561  */
 /*               34-41 APPLICATION ID SENDING char(8)        SR1561  */
 /*               42-80 FILLER                                SR1561  */
 /*                                                                   */00290091
 /* OUTPUTS : DDNAME: MQMRPT   = MQSeries Summary Report              */
 /*                              RECFM = FBA   LRECL = 133            */
 /*                                                                   */
 /*  ENVIRONMENT       : MVS BATCH, PL/I , MQSERIES                   */
 /*                                                                   */
 /*  EXIT-NORMAL:                                                     */
 /*         STATE THE CONDITIONS AT, AND/OR TECHNIQUES FOR,           */
 /*         NORMAL EXIT OF THIS MODULE. EXAMPLE BELOW:                */
 /*      RETURN CODE  - 000                                           */
 /*                                                                   */
 /*  EXIT-ERROR:                                                      */
 /*         STATE THE CONDITIONS AT, AND/OR TECHNIQUES FOR,           */
 /*         ABNORMAL EXIT OF THIS MODULE (CONDITION CODES             */
 /*         AND THEIR MEANINGS, ETC). EXAMPLES BELOW:                 */
 /*                                                                   */
 /*  CHANGE ACTIVITY:                                                 */
 /* |  DATE  |  DPSR  |  NAME       | DESCRIPTION OF MODIFICATION |   */
 /* |--------|--------|-------------|-----------------------------|   */
 /* | 11/01  |CHQ042  |L.COLEMAN    |NEW PROGRAM                  |   */
 /* | 07/02  |ESG006  |DEW          |LE CONVERSION                |   */
 /* | 01/2004|SR1561  |LSC          |ADD APPL. ID TO CONTROL CARD |   */
 /* | 02/2004|SR1428  |RAE          |SKIP PUT DATA FOR MULTIPLE OPT   */
 /* | 02/2004|SR1615  |RAE          |FIX HEADER MOVE TO BUFFER    |   */
 /* |        |        |             |                             |   */
 /*********************************************************************/
 DCL COIBM EXTERNAL CHAR(40) STATIC INITIAL
    ('RCBBQPM FOR IBM INTERNAL USE ONLY');
0 DCL                                                                   00540057
    PLIXOPT CHAR(80) VAR EXT INIT                                       00550099
            ('HEAP(4K,4K,ANYWHERE)');                       /* esg006 */00560099
0 DEFAULT RANGE(*) STATIC;                                              00570057
                                                                        00017600
1/*********************************************************************/
 /*                   PARAMETER DECLARATIONS                          */
 /*********************************************************************/
0DEFAULT RANGE(*) STATIC;
0DCL PARAM  CHAR(100) VARYING;

 DCL PARM_PTR PTR;
 DCL 1 PARM_OVLY BASED(PARM_PTR),          /* PARAMETER OVERLAY       */
       3 PARM_LENGTH  FIXED BINARY(15),    /* LENGTH OF PARAMETERS    */
       3 PARMS        CHAR(98);            /* PARAMETERS PASSED       */

 DCL B FIXED BINARY(31) INIT (1);
 /*********************************************************************/
 /*  CONTROL CARD                                                     */00290091
 /*********************************************************************/
  DCL 1 CONTROL_CARD,
        2 INSTANCE CHAR(1), /* 01-01 COMMENT CARD OR CEDS  INSTANCE   */
        2 FILL1    CHAR(1), /* 02-02 FILLER                           */
        2 RECLEN PIC'99999',/*03-07 LENGTH OF DATA                    */
        2 FILL2    CHAR(1), /* 08-08 FILLER                           */
        2 RECTYPE  CHAR(8), /* 09-16 RECORD TYPE FOR MESSAGE HEADER   */
        2 FILL3    CHAR(1), /* 17-17 FILLER                           */
        2 SIN_MUL  CHAR(8), /* 18-25 SINGLE OR MULTIPLE MESSAGES      */
        2 FILL4    CHAR(1), /* 26-26 FILLER                           */
        2 LIMIT    char(6), /* 27-32 LIMIT OF MULTIPLE TRANSACTIONS   */
        2 FILL5    CHAR(1), /* 33-33 FILLER                   SR1561  */
        2 APPLID   CHAR(8), /* 34-41 APPLICATION ID SENDING   SR1561  */
        2 FILL6    CHAR(39);/* 42-80 FILLER                   SR1561  */
  DCL LIMIT_PIC PIC'999999' ;
 /*********************************************************************/
 /*       COPY FILE OF MQ DEFINITIONS                                 */
 /*********************************************************************/

 %INCLUDE SYSLIB(CMQP) ;
 %INCLUDE SYSLIB(CMQEPP) ;

0/*********************************************************************/
 /*        FILE DECLARES AND I/O WORKAREAS                            */
 /*********************************************************************/

 DCL MQINPUT        FILE RECORD INPUT ;
 DCL CONTROL        FILE RECORD INPUT ;
 DCL MQMRPT         FILE RECORD OUTPUT ,
     SYSPRINT       FILE OUTPUT PRINT EXTERNAL;

 DCL MQINPUT_AREA   CHAR(500) INIT(' ');
 DCL  MESSAGE_HEADER_AREA CHAR(20) INIT('');
 DCL 1 MESSAGE_HEADER def message_header_area,
        2 RECORD_ID   CHAR(8) ,                 /*  01-08 RECORD_ID */
        2 APPL_ID     CHAR(8) ,                 /*  09-16 APPL_ID */
        2 CEDS_ID     CHAR(4) ;                 /*  17-20 CEDS_ID */
 DCL DATAARRAY(*)   CHAR(*) CONTROLLED ;
 DCL ROWS_NEEDED    FIXED BIN(31) INIT(0);
 DCL MQBUFFER(*)    CHAR(*) CONTROLLED ;
 DCL MESSAGELIMIT   FIXED BINARY(31) INIT(0);
 DCL POS            FIXED BINARY(31) INIT(0);

 /*********************************************************************/
 /*       Lines of the print report                                   */
 /*********************************************************************/
0dcl 1 PRT_HEADER_0 static,
       3 h00       char(01) init('1'),
       3 h01       char(17) init('PROGRAM = RCBBQPM'),
       3 h02       char(42) init(' '),
       3 h03_Text  char(15) init('IBM CORPORATION'),
       3 h04       char(33) init(' '),
       3 h05_Page  char(07) init('PAGE = '),
       3 Hdr0_Page pic 'ZZZZ9' init('0'),
       3 h06       char(13) init('');

 dcl 1 PRT_HEADER_1 static,
       3 h10       char(01) init(' '),
       3 h11       char(11) init('RUN DATE = '),
       3 Hdr1_MM   char(2)  init(''),
       3 h12       char(1)  init('/'),
       3 Hdr1_DD   char(2)  init(''),
       3 h13       char(1)  init('/'),
       3 Hdr1_YYYY char(4)  init(''),
       3 h14       char(36) init(''),
       3 H15       CHAR(43) INIT('CEDS  APPLICATION-RCBBQPM-MQPUT'),
       3 h17_SEC   char(21) init(''),
       3 h18       char(11) init('');

 dcl 1 PRT_HEADER_2 static,
       3 h20           char(01) init('0'),
       3 h21           char(24) init(''),
       3 h22           char(29) init('        QUEUE MANAGER NAME : '),
       3 Hdr2_MQM_Name char(48) init(''),
       3 h23           char(31) init('');

 dcl 1 PRT_HEADER_3 static,
       3 h30           char(01) init(' '),
       3 h31           char(36) init(''),
       3 h32           char(17) init('    QUEUE NAME : '),
       3 Hdr3_Q_Name   char(48) init(''),
       3 h33           char(31) init('');

 dcl 1 PRT_HEADER_5 static,
       3 h50           char(01)  init(' '),
       3 h51           char(15)  init(''),
       3 h52           char(10)  init('  MESSAGE '),
       3 h53           char(107) init('  MESSAGE ');

 dcl 1 PRT_HEADER_6 static,
       3 h60  char(01)  init(' '),
       3 h61  char(15)  init(''),
       3 h62  char(10)  init('  NUMBER  '),
       3 h63  char(10)  init('  LENGTH  '),
       3 h64  char(33)  init('---------------------------------'),
       3 h65  char(14)  init(' MESSAGE DATA '),
       3 h66  char(50)  init('---------------------------------');

 /*********************************************************************/
 /*                                                                   */
 /*      Error and information messages                               */
 /*                                                                   */
 /*********************************************************************/
 DCL RCBBQPM_0_I STATIC CHAR(133) INIT('      ***  END OF REPORT ***');

 dcl 1 Errors static,
       3 m41       char(24) init('             **********'),
       3 m42       char(21) init('AN ERROR OCCURRED IN'),
       3 Msg4_Type char(11) init(''),
       3 m43       char(18) init('COMPLETION CODE = '),
       3 Msg4_CC   pic '(4)Z9' init('0'),
       3 m44       char(15) init(' REASON CODE ='),
       3 Msg4_Reas pic '(4)Z9' init('0'),
       3 m45       char(31) init(' ********** ');

 dcl 1 Message_line static,
       3 m51                     char(16) init(''),
       3 Msg5_Message_Number     pic '(7)Z9' init('0'),
       3 m52                     char(2)  init(''),
       3 Msg5_Message_Length     pic '(7)Z9' init('0'),
       3 m53                     char(2)  init(''),
       3 Msg5_Data               char(80)init(''),
       3 m54                     char(14) init('');

 dcl 1 RCBBQPM_RECORDS  static,
       3 rec0              char(01) init(' '),
       3 REC1              CHAR(06) INIT(''),
       3 REC2   CHAR(34) INIT('NUMBER OF INPUT RECORDS READ =    '),
       3 RECS_READ         PIC '(7)Z9' INIT('0'),
       3 REC3              CHAR(62) INIT('');

 DCL 1 RCBBQPM_MESSAGE_processing STATIC,
       3 MSG0     CHAR(01) INIT(' '),
       3 MSG1     CHAR(06) INIT(''),
       3 MSG2     CHAR(24) INIT('RECORDS WILL BE SENT AS '),
       3 SIN_MUL  CHAR(10) INIT(' '),
       3 MSG3              CHAR(62) INIT(' RECORDS PER MESSAGE');

 DCL 1 RCBBQPM_MESSAGES STATIC,
       3 MSG0     CHAR(01) INIT(' '),
       3 MSG1     CHAR(06) INIT(''),
       3 MSG2     CHAR(34) INIT('NUMBER OF MESSAGES PUT ON QUEUE = '),
       3 PUT_MSGS          PIC '(7)Z9' INIT(''),
       3 MSG3              CHAR(62) INIT('');
 /*                                                                   */
 /*     Variable declarations                                         */
 /*                                                                   */
 DCL  PARMINDEX1 FIXED BINARY(31) INIT(0); /* INDEX OF COMMA IN PARM */
 dcl  RPTBUFFER    char(133)       init('');
 dcl  MsgArea      char(133)       init('');
 dcl  PageNumber   fixed binary(31) init(0);
 dcl  PUTMESSAGECOUNT fixed binary(31) init(0);
 dcl  RecordCount  fixed binary(31) init(0);

                                 /* Names of length fields are        */
                                 /* preprocessor variables from the   */
                                 /* MQ copy file. They are replaced   */
                                 /* by the preprocessor               */
 dcl  QueueManager char(MQ_Q_MGR_NAME_LENGTH) init('');
 dcl  Queue        char(MQ_Q_NAME_LENGTH)  init('');

 /*                                                                   */
 /*     Variables for MQ calls                                        */
 /*                                                                   */
 dcl Hconn    fixed binary(31) init(0);    /* Connection handle       */
 dcl CompCode fixed binary(31) init(0);    /* Completion code         */
 dcl Reason   fixed binary(31) init(0);    /* Qualifying reason       */

 dcl 1 ObjDesc like MQOD;                  /* Object descriptor       */
 dcl OpenOptions fixed binary(31) init(0); /* Options which control   */
                                           /*  the MQOPEN call        */
 dcl Hobj fixed binary(31) init(0);        /* Object handle           */

 dcl 1 MsgDesc like MQMD;                  /* Message descriptor      */
 dcl DataLength fixed binary(31);          /* Length of the message   */
 DCL BUFFERLENGTH FIXED BINARY(31) INIT(0);/* Length of buffer        */

 dcl 1 PutMsgOpts like MQPMO;              /* Options which control   */
                                           /*  the MQPUT call         */
 dcl  RetCode    fixed binary(31) init(0); /* Return code in program */

1/*********************************************************************/
 /*                     MISCELLANEOUS DECLARES                        */
 /*********************************************************************/
 DCL I                FIXED BINARY(31)    INIT(0);
 DCL TESTIT           BIT (01)            INIT('1'B);
 DCL BLANK            CHAR(01)            INIT(' ');
 DCL MQINPUT_EOF      BIT (1) ALIGNED     INIT ('0'B);
 DCL CONTROL_EOF      BIT (1) ALIGNED     INIT ('0'B);
0/*********************************************************************/
 /*        BUILTIN FUNCTIONS                                          */
 /*********************************************************************/
0DCL
   ADDR               BUILTIN,
   DATETIME           BUILTIN,
   INDEX              BUILTIN,
   LENGTH             BUILTIN,
   NULL               BUILTIN,
   PLIRETC            BUILTIN,
   STRING             BUILTIN,
   SUBSTR             BUILTIN;
1/*********************************************************************/
 /*                        ON CONDITIONS                              */
 /*********************************************************************/
-ON ENDFILE (MQINPUT)                   /* EOF BLOCK FOR MQINPUT FILE */
   MQINPUT_EOF = '1'B;
-ON ENDFILE (CONTROL)                   /* EOF BLOCK FOR CONTROL FILE */
   CONTROL_EOF = '1'B;
  ON ERROR SNAP
    BEGIN;
      ON ERROR SYSTEM;
      RETCODE = 256;
      PUT SKIP EDIT ('PROGRAM RCBBQPM HAS ABENDED') (A);
      CALL ROLLBACK;
      GOTO EXIT1;
    END;
 /*********************************************************************/
 /*        Mainline code starts here                                  */
 /*                                                                   */
 /* Description:                                                      */
 /*  This function receives the names of the queue manager and the    */
 /*  queue from the PARM statement in the JCL. It opens the queue for */
 /*  OUTPUT, OPENS THE INPUT FILES , READS RECORDS FROM FILES         */ */
 /*  and puts them on  queue.                                         */
 /*                                                                   */
 /*********************************************************************/
   PARM_PTR            = ADDR(PARAM);

   OPEN FILE (MQMRPT) ;
   OPEN FILE (MQINPUT);
   OPEN FILE (CONTROL);
   CALL PROCESS_PARAMETER;
   CALL PROCESS_CONTROL;

   Hdr2_MQM_Name = QueueManager;
   Hdr3_Q_Name   = Queue;
   put skip list('QueueManager:',QueueManager);
   put skip list('Queue:',Queue);
   CALL PRINTHEADER ; /*  OUTPUT THE FIRST HEADER LINES               */

   /*                                                                 */
   /* Connect to the specified queue manager                          */
   /*   Test the output of the connect call.  If the call failed,     */
   /*   print an error message showing the completion code and        */
   /*   reason code, then leave the program                           */
   /*                                                                 */
   call MQCONN (QueueManager,
                Hconn,
                CompCode,
                Reason);

   if ((CompCode ¬= MQCC_OK) | (Reason ¬= MQRC_NONE))
      then do;
             Msg4_Type = 'CONNECT:';
             Msg4_CC = CompCode;
             Msg4_Reas = Reason;
             RPTBUFFER = string(Errors);
             call PrintLine(RPTBUFFER);
             RETCODE = 252;
             goto Exit2;
           end;

   /*                                                                 */
   /*  Initialize the object descriptor (MQOD) control block.         */
   /*  (The declaration sets StrucId, Version, ObjectType,            */
   /*  ObjectQMgrName, DynamicQName, and AlternateUserid fields)      */
   /*                                                                 */
   ObjDesc.ObjectName = Queue;

   /*                                                                 */
   /*  Initialize the other fields required for the open call         */
   /*                                                                 */

   OpenOptions  = MQOO_OUTPUT +            /* open queue for puts     */
                  MQOO_FAIL_IF_QUIESCING;

   put skip list('MQOO_OUTPUT:',MQOO_OUTPUT)
   put skip list('MQOO_FAIL_IF_QUIESCING:',MQOO_FAIL_IF_QUIESCING);
   put skip list('OpenOptions:',OpenOptions);
   /*                                                                 */
   /* Open the queue                                                  */
   /*   Test the output of the open call.  If the call failed,        */
   /*   print an error message showing the completion code and        */
   /*   reason code, then bypass processing, disconnect and           */
   /*   leave the program                                             */
   /*                                                                 */
   call MQOPEN(Hconn,
               ObjDesc,
               OpenOptions,
               Hobj,
               CompCode,
               Reason);

   if ((CompCode ¬= MQCC_OK) | (Reason ¬= MQRC_NONE))
      then do;
             Msg4_Type = 'OPEN:';
             Msg4_CC = CompCode;
             Msg4_Reas = Reason;
             RPTBUFFER = string(Errors);
             call PrintLine(RPTBUFFER);
             RETCODE = 253;
             goto Exit1;
           end;

   /*  Initialize the message descriptor and put message options      */
   /*  control blocks                                                 */
   /*     No need to change the message descriptor (MQMD) control     */
   /*     block because declaration default sets all the fields       */
   /*                                                                 */
   /*     Initialize the put message options (MQPMO) control block    */
   /*     (The declaration initializes all the other fields)          */
   /*                                                                 */

 /*MsgDesc.FORMAT     = MQFMT_RF_HEADER_2;     Message contains chars*/
   MsgDesc.FORMAT     = MQFMT_STRING;       /* Message contains chars*/
   PUTMSGOPTS.OPTIONS = MQPMO_SYNCPOINT;    /* SYNCPOINT NOT REQUIRED*/
   /* CONVERSION */ /* MQENC_NATIVE; */
   MsgDesc.ENCODING   = MQENC_NATIVE;
   put skip list('codeid:',MsgDesc.CODEDCHARSETID);
   MsgDesc.CODEDCHARSETID =0;
   put skip list('MsgDesc.FORMAT:',MsgDesc.FORMAT);
   put skiP LIST('PUTMSGOPTS.OPTIONS:',PUTMSGOPTS.OPTIONS);
   put skip list('codeid:',MsgDesc.CODEDCHARSETID);
   put skip list('MsgDesc.ENCODING:',MsgDesc.ENCODING);
   ROWS_NEEDED = 1;
   DATAARRAY(ROWS_NEEDED) = '';
   READ FILE(MQINPUT) INTO (DATAARRAY(ROWS_NEEDED));
   put skip list('DATAARRAY(ROWS_NEEDED):',DATAARRAY(ROWS_NEEDED));
   DO WHILE (¬MQINPUT_EOF);
      RECORDCOUNT = RECORDCOUNT + 1;
      IF CONTROL_CARD.SIN_MUL = 'SINGLE'
         THEN CALL MQPUT_ROUTINE;   /* WRITE SINGLE RECORD PER MESSAGE*/
         ELSE DO;                   /* ACCUMULATE RECORDS IN 1 MESSAGE*/
              IF ROWS_NEEDED = messagelimit
                 THEN DO ;
                      PUT SKIP LIST('messagelimit:',messagelimit);
                      CALL MQPUT_ROUTINE;
                      ROWS_NEEDED =  1;
                      END;
                 ELSE ROWS_NEEDED = ROWS_NEEDED + 1;
              END;
    /*DATAARRAY(ROWS_NEEDED) = ''; */
      READ FILE(MQINPUT) INTO (DATAARRAY(ROWS_NEEDED));
      RECLEN       = LENGTH(DATAARRAY(ROWS_NEEDED));
      PUT SKIP LIST('RECLEN:',RECLEN);
      PUT SKIP LIST('SECOND RECORD READ:');
      END;
    ROWS_NEEDED = ROWS_NEEDED - 1;
    IF ROWS_NEEDED > 0
       THEN do;
       put skip list('is this statment processed?:');
       CALL MQPUT_ROUTINE;
       END;

    RCBBQPM_MESSAGE_processing.sin_mul = control_card.sin_mul;
    RPTBUFFER = string(RCBBQPM_MESSAGE_processing);
    call PrintLine(RPTBUFFER);

    recs_read = RecordCount;
    RPTBUFFER = string(RCBBQPM_RECORDS);
    call PrintLine(RPTBUFFER);

    put_msgs     = PUTMESSAGECOUNT;
    RPTBUFFER = string(RCBBQPM_MESSAGES);
    call PrintLine(RPTBUFFER);

    CALL PRINTLINE(RCBBQPM_0_I);

   /*                                                                 */
   /*   Close the queue                                               */
   /*    Test the output of the close call.  If the call failed,      */
   /*    print an error message showing the completion code and       */
   /*    reason code                                                  */
   /*                                                                 */
   call MQCLOSE(Hconn,
                Hobj,
                MQCO_NONE,
                CompCode,
                Reason);

   if ((CompCode ¬= MQCC_OK) | (Reason ¬= MQRC_NONE))
      then do;
             Msg4_Type = 'CLOSE:';
             Msg4_CC = CompCode;
             Msg4_Reas = Reason;
             RPTBUFFER = string(Errors);
             call PrintLine(RPTBUFFER);
             RETCODE = 254;
           end;

 EXIT1:;
   /*                                                                 */
   /*   Disconnect from the queue manager                             */
   /*    Test the output of the disconnect call.  If the call         */
   /*    failed, print an error message showing the completion        */
   /*    code and reason code                                         */
   /*                                                                 */
   call MQDISC(Hconn,
               CompCode,
               Reason);

   if ((CompCode ¬= MQCC_OK) | (Reason ¬= MQRC_NONE))
      then do;
             Msg4_Type = 'DISCONNECT:';
             Msg4_CC = CompCode;
             Msg4_Reas = Reason;
             RPTBUFFER = string(Errors);
             call PrintLine(RPTBUFFER);
             RETCODE = 256;
           end;

 EXIT2:;
0  CLOSE FILE (MQINPUT),
       FILE (MQMRPT),
       FILE (SYSPRINT);
   call pliretc(RetCode);

 /*********************************************************************/
 /* End of mainline module                                            */
 /*********************************************************************/
 /*********************************************************************/
 /*  MODULE-NAME: PROCESS_PARAMETER                                   */
 /*                                                                   */
 /*  DESCRIPTIVE-NAME:                                                */
 /*   SEPARATE INTO THE RELEVANT FIELDS ANY DATA PASSED IN THE PARM   */
 /*********************************************************************/
 PROCESS_PARAMETER:PROC ;
   PARM_PTR            = ADDR(PARAM);
   IF PARM_LENGTH = 0 /* IF NO PARM PASSED, ABEND PROGRAM    */
      THEN DO;
            PUT SKIP EDIT('ERROR===> NO PARM PASSED TO PROGRAM')(A);
            RETCODE = 250 ;
            GOTO EXIT2;
           END;
   PARMINDEX1= INDEX(PARMS,',') ;          /* PARAMETER 1  QM         */

   IF PARMINDEX1 = 0                       /* INVALID PARAMENTER     */
      THEN DO;
             PUT SKIP EDIT('ERROR===> MISSING QUEUE MANAGER OR QN')(A);
             RETCODE = 251;
             GOTO EXIT2;
           END;
      ELSE DO;
           /* MOVE THE PARAMETER DATA INTO THE RELEVANT FIELDS        */
           QUEUEMANAGER = SUBSTR(PARMS,1,PARMINDEX1 - 1);
           QUEUE    = SUBSTR(PARMS,PARMINDEX1 + 1,
                  (PARM_LENGTH-PARMINDEX1) );
           END;

  END PROCESS_PARAMETER;
 /*********************************************************************/
 /*  MODULE-NAME: PROCESS_CONTROL                                     */
 /*                                                                   */
 /*  DESCRIPTIVE-NAME:                                                */
 /*   READ CONTROL CARD AND SETUP PROCESSING OPTIONS                  */
 /*********************************************************************/
  PROCESS_CONTROL: PROC;
   READ FILE(CONTROL) INTO (CONTROL_CARD);
   put skip data(CONTROL_CARD);
   DO WHILE (¬CONTROL_EOF);
      IF CONTROL_CARD.INSTANCE = '*'
         THEN;
         ELSE DO;
              MESSAGE_HEADER.CEDS_ID = CONTROL_CARD.INSTANCE ;
              IF CONTROL_CARD.APPLID = ' '                    /*SR1561*/
                THEN MESSAGE_HEADER.APPL_ID = 'CEDS ';       /*SR1561*/
                ELSE MESSAGE_HEADER.APPL_ID = CONTROL_CARD.APPLID;
              MESSAGE_HEADER.RECORD_ID = CONTROL_CARD.RECTYPE ;
              IF CONTROL_CARD.LIMIT = ' '
                 THEN MESSAGELIMIT = 1000;
                 ELSE DO;
                      LIMIT_PIC = CONTROL_CARD.LIMIT;
                      MESSAGELIMIT = LIMIT_PIC;
                      END;
              if testit then put skip data(message_header_area);
              END;
      READ FILE(CONTROL) INTO (CONTROL_CARD);
      END;

  IF TESTIT THEN PUT SKIP DATA(CONTROL_CARD.RECLEN,CONTROL_CARD.RECTYPE,
    CONTROL_CARD.APPLID,
    CONTROL_CARD.INSTANCE,CONTROL_CARD.SIN_MUL,CONTROL_CARD.limit);

  IF CONTROL_CARD.SIN_MUL = 'SINGLE'
     THEN ALLOCATE DATAARRAY(1) CHAR(CONTROL_CARD.RECLEN);
     ELSE ALLOCATE DATAARRAY(MESSAGELIMIT) CHAR(CONTROL_CARD.RECLEN);
    put skip list('CONTROL_CARD.RECLEN:',CONTROL_CARD.RECLEN);
  END PROCESS_CONTROL;

 /*********************************************************************/
 /* Function name:    MQPUT_Routine                                   */
 /*                                                                   */
 /* Description:                                                      */
 /*     This function calls MQPUT to place the input data onto the    */
 /*     message queue                                                 */
 /*********************************************************************/
 MQPUT_ROUTINE : PROC;
   BUFFERLENGTH = (RECLEN * ROWS_NEEDED);
   PUT SKIP LIST('BUFFERLENGTH:',BUFFERLENGTH);
   IF TESTIT THEN PUT SKIP DATA (BUFFERLENGTH,rows_needed);
   IF CONTROL_CARD.SIN_MUL = 'SINGLE' THEN
   DO;
      ALLOCATE MQBUFFER(1) CHAR(BUFFERLENGTH);
   END;
   ELSE
   DO;
 /*SUBSTR(MQBUFFER,1,20) = MESSAGE_HEADER_AREA ; */         /* SR1615 */
   PUT SKIP LIST('NO RECORDS NEED TO PROCESS:',ROWS_NEEDED);
       ALLOCATE MQBUFFER(BUFFERLENGTH) CHAR(1);

   DO I = 1 TO  ROWS_NEEDED ;
      /*
      SUBSTR(MQBUFFER,POS,RECLEN) =  DATAARRAY(I);
      pos = pos + reclen ;
      PUT SKIP LIST('POS OF EACH RECORD LENG:',POS); */
         DO J =1 TO RECLEN;
            MQBUFFER(B) = SUBSTR(DATAARRAY(I),J,1);
            B = B + 1;
         END;
      END;
   END;
   IF CONTROL_CARD.SIN_MUL = 'SINGLE' THEN                  /* SR1428 */
     DO;                                                    /* SR1428 */
      if testit then put skip data (mqbuffer);
     END;                                                   /* SR1428 */
   ELSE
     DO;
      if testit then
       PUT SKIP LIST('MQBUFFER-:',mqbuffer);
    /*  put skip edit ('mqbuffer=',substr(mqbuffer,1,reclen)) (a,a);*/
     END;
                        /*MQENC_NATIVE;*/
   MsgDesc.ENCODING   = MQENC_NATIVE;
   MsgDesc.CODEDCHARSETID = 0;
   PUT SKIP LIST('BEFORE WRITE:');
   PUT SKIP LIST('MQBUFFER(BUFFERLENGTH):',MQBUFFER(BUFFERLENGTH));
   PUT SKIP LIST('BUFFERLENGTH:',BUFFERLENGTH);
   DO I = 78603 TO BUFFERLENGTH
      PUT SKIP LIST('MQBUFFER:',MQBUFFER(BUFFERLENGTH));
   END;
   CALL MQPUT(HCONN,
              Hobj,
              MsgDesc,
              PutMsgOpts,
              BufferLength,
              MQBUFFER,
              CompCode,
              Reason);
   PUT SKIP LIST('AFTER  WRITE:');
   PUT SKIP LIST('COMPCODE:',COMPCODE);
   PUT SKIP LIST('Reason:',Reason);
   If ( ( (COMPCODE = MQCC_OK) |
        ( (CompCode = MQCC_WARNING) &
        (REASON = MQRC_TRUNCATED_MSG_ACCEPTED) ) ) )

     THEN do;
     PUTMESSAGECOUNT = PUTMESSAGECOUNT + 1;
     put skip list('PUTMESSAGECOUNT:',PUTMESSAGECOUNT);
     end;
     Else do;
   /*                                                                 */
   /*     If the call failed for any other reason,                    */
   /*     print an error message showing the completion code          */
   /*     and reason code                                             */
   /*                                                                 */
           Msg4_Type = 'PUT:';
           Msg4_CC = CompCode;
           Msg4_Reas = Reason;
           RPTBUFFER = string(Errors);
           CALL PrintLine(RPTBUFFER);
           RETCODE = 257;
           End;

  FREE MQBUFFER;
 End;
 /*********************************************************************/
 /* Function name:    rollback                                        */
 /*                                                                   */
 /* Description:                                                      */
 /*     This function calls MQback to rollback changes on abend       */
 /*********************************************************************/
 ROLLBACK  : PROC;
    CALL MQBACK( HCONN,
                 COMPCODE,
                 REASON);

    IF ((COMPCODE ¬= MQCC_OK) | (REASON ¬= MQRC_NONE))
         THEN DO;
           Msg4_Type = 'back:';
           Msg4_CC = CompCode;
           Msg4_Reas = Reason;
           RPTBUFFER = string(Errors);
           CALL PrintLine(RPTBUFFER);
           RETCODE = 257;
           End;

 End;
 /*********************************************************************/
 /* FUNCTION NAME:    PRINTHEADER                                     */
 /*                                                                   */
 /* Description:                                                      */
 /*     THIS FUNCTION PRINTS THE HEADER OF REPORT                     */
 /*********************************************************************/
 PRINTHEADER: PROC;

   DCL YYYYMMDD CHAR(8) ;

   PageNumber = PageNumber + 1;

   YYYYMMDD = SUBSTR(DATETIME,1,8);
   Hdr0_Page = PageNumber;
   Hdr1_MM   = substr(yyyymmdd,5,2);
   Hdr1_DD   = substr(yyyymmdd,7,2);
   Hdr1_YYYY = substr(yyyymmdd,1,4);

   MsgArea  =  string(PRT_HEADER_0);
   write FILE (MQMRPT) from (MsgArea);

   MsgArea  =  string(PRT_HEADER_1);
   write FILE (MQMRPT) from (MsgArea);

   MsgArea  =  string(PRT_HEADER_2);
   write FILE (MQMRPT) from (MsgArea);

   MsgArea  =  string(PRT_HEADER_3);
   write FILE (MQMRPT) from (MsgArea);

 END PRINTHEADER;

 /*********************************************************************/
 /* Function name:    PrintLine                                       */
 /*                                                                   */
 /* Description:                                                      */
 /*     This section prints all data lines produced by the program    */
 /*     If the maximum number of lines for a page has been printed,   */
 /*     start a new page.                                             */
 /*                                                                   */
 /* Called by:   Mainline code                                        */
 /*                                                                   */
 /*********************************************************************/
 PrintLine: proc(RPTBUFFER);
 dcl  RPTBUFFER char(133);

   MsgArea  =  RPTBUFFER;
   write FILE (MQMRPT) from (MsgArea);

 end PrintLine;

 END RCBBQPM;