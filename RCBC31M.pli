 /* RCBC31P - LIST FLEXIBLE WARRANTY TYPE AND MODELS                 */
 /********************************************************************/
 /*                                                                  */
 /* TRANSACTION CODE    : RC31                                       */
 /*                                                                  */
 /* PROGRAM NAME        : RCBC31M                                    */
 /*                                                                  */
 /* TYPE                : CICS/VS                                    */
 /*                                                                  */
 /* USED MAPSET         : RCBM31                                     */
 /*      MAP            : RCBM31                                     */
 /*                                                                  */
 /*                                                                  */
 /* DESCRIPTION         : - LIST FLEXIBLE WARRANTY TYPE MODELS       */
 /*                                                                  */
 /* LINKED TRANSACTION  : - RC31                                     */
 /*                                                                  */
 /* MESSAGES            :                                            */
 /*                                                                  */
 /*                                                                  */
 /*  MAINTENANCE LOG :                                               */
 /*  ---------------                                                 */
 /*                                                                  */
 /*  DATE       | WORK-ITEMNO. | DESCRIPTION                         */
 /*  --------------------------------------------------------------  */
 /*  2007-07-27 | RB01281      | CHANGES FOR FLEXIBLE WARRANTY       */
 /*             |              | MACHINES - INITIAL DEVELOPMENT      */
 /*  2008-04-15 | CEDS00000384 | HANDLING OF NULL COLUMNS            */
 /*  2008-11-11 | RB01298      | HANDLING HARDBUNDLE MACHINES        */
 /*  2009-11-02 | CEDS00000495 | ADDED CONTINUATION AFTER LCD IN     */
 /*             |              | CT_0690 CURSOR                      */
 /*  2014-05-05 | RB01338      | CEDS 3.3 A21 RELEASE - RACF USER    */
 /*             |              | GROUP FOR TS ACCESS MANAGEMENT TEAM */
 /*  2014-11-26 | CEDS00000714 | TREC TEMEA-T081555 CORRECTED CODE   */
 /*             |              | FOR COUNTRY NUMBER DISPLAY          */
 /*  2015-06-18 | CEDS00000744 | TREC T10-2151 INSERT IN CLEAR SCREEN*/
 /*             |              | IS HANDLED THRU ENTER FOLLOWED BY F5*/
 /*  2015-06-25 | CEDS00000749 | TREC T10-2155 COUNTRY NUMBER SET TO */
 /*             |              | NEW CODE PROVIDED BY USER FOR       */
 /*             |              | COUNTRY RULES SELECTION             */
 /********************************************************************/
1RCBC31M: PROC(COMMPTR)
          OPTIONS (MAIN)
          REORDER;
0/********************************************************************/
 /*  EXTERNAL ENTRIES                                                */
 /********************************************************************/

0DCL PLIXOPT   VAR  CHAR (256)
               INIT ('STORAGE(00,00,00,0)') STATIC EXTERNAL;

 DCL RCB004N ENTRY EXTERNAL;
0/********************************************************************/
 /*  BMS RELATED CONSTANTS                                           */
 /********************************************************************/
 %INCLUDE DFHBMSCA;
0/********************************************************************/
 /*  ATTENTION IDENTIFIER CONSTANTS                                  */
 /********************************************************************/
 %INCLUDE DFHAID;
1/********************************************************************/
 /*  COMMUNICATION AREA                                              */
 /********************************************************************/
     %INCLUDE (RCBCP2S);
     %INCLUDE (RCBCHDS);,
     %INCLUDE (RCBC00S);,
     %INCLUDE (RCBC31S);;
0/********************************************************************/
 /*  MAP STRUCTURES                                                  */
 /********************************************************************/
 %INCLUDE (RCBM31);
0/********************************************************************/
 /*  DB2 STRUCTURES                                                  */
 /********************************************************************/
 DCL 1 RCB690S,
     %INCLUDE (RCB690S);;
 DCL 1 RCB690SI,
     %INCLUDE (RCB690SI);;
 DCL 1 RCB400S,
     %INCLUDE (RCB400S);;
 DCL 1 RCB400SI,
     %INCLUDE (RCB400SI);;
 DCL 1 TB_RCBV470,
     %INCLUDE (RCB470S);;
 DCL 1 TB_RCBV470_I,
     %INCLUDE (RCB470SI);;
 DCL 1 TB_RCBV475,
     %INCLUDE (RCB475S);;
 DCL 1 TB_RCBV475_I,
     %INCLUDE (RCB475SI);;
 DCL 1 RCB560S,
     %INCLUDE (RCB560S);;
 DCL 1 RCB560SI,
     %INCLUDE (RCB560SI);;
0/********************************************************************/
 /*  NULL INDICATORS                                                 */
 /********************************************************************/
 DCL 1 NULL690      BASED(ADDR(RCB690SI)),
       3 NUL690A    FIXED BIN(15) INIT(0),
       3 NUL690B    FIXED BIN(15) INIT(0),
       3 NUL690C    FIXED BIN(15) INIT(0),
       3 NUL690D    FIXED BIN(15) INIT(0),
       3 NUL690E    FIXED BIN(15) INIT(0),
       3 NUL690F    FIXED BIN(15) INIT(0),
       3 NUL690G    FIXED BIN(15) INIT(0),
       3 NUL690H    FIXED BIN(15) INIT(0),
       3 NUL690I    FIXED BIN(15) INIT(0),                /*RB01298*/
       3 NUL690J    FIXED BIN(15) INIT(0);                /*RB01298*/
 DCL 1 NULL400      BASED(ADDR(RCB400SI)),
       3 NUL400A    FIXED BIN(15) INIT(0),
       3 NUL400B    FIXED BIN(15) INIT(0),
       3 NUL400C    FIXED BIN(15) INIT(0),
       3 NUL400D    FIXED BIN(15) INIT(0),
       3 NUL400E    FIXED BIN(15) INIT(0),
       3 NUL400F    FIXED BIN(15) INIT(0),
       3 NUL400G    FIXED BIN(15) INIT(0),
       3 NUL400H    FIXED BIN(15) INIT(0),
       3 NUL400I    FIXED BIN(15) INIT(0),
       3 NUL400J    FIXED BIN(15) INIT(0),
       3 NUL400K    FIXED BIN(15) INIT(0),
       3 NUL400L    FIXED BIN(15) INIT(0),
       3 NUL400M    FIXED BIN(15) INIT(0),
       3 NUL400N    FIXED BIN(15) INIT(0),
       3 NUL400O    FIXED BIN(15) INIT(0),
       3 NUL400P    FIXED BIN(15) INIT(0),
       3 NUL400Q    FIXED BIN(15) INIT(0),
       3 NUL400R    FIXED BIN(15) INIT(0),
       3 NUL400S    FIXED BIN(15) INIT(0),
       3 NUL400T    FIXED BIN(15) INIT(0),
       3 NUL400U    FIXED BIN(15) INIT(0),
       3 NUL400V    FIXED BIN(15) INIT(0),
       3 NUL400W    FIXED BIN(15) INIT(0),
       3 NUL400X    FIXED BIN(15) INIT(0),
       3 NUL400Y    FIXED BIN(15) INIT(0),
       3 NUL400Z    FIXED BIN(15) INIT(0),
       3 NUL4000    FIXED BIN(15) INIT(0),
       3 NUL4001    FIXED BIN(15) INIT(0);
0/********************************************************************/
 /*  INTERFACE AREAS                                                 */
 /********************************************************************/
 DCL 1 DATE_AREA,
     %INCLUDE (RCBZ03S);;
0/********************************************************************/
 /*  RETURN CODES                                                    */
 /********************************************************************/
 DCL RESPONSE     FIXED BIN(31) INIT(0);    /*RETURN CODE            */
 DCL CODE_EXPLAIN FIXED BIN(31) INIT(0);    /*RETURN CODE EXPLANATION*/
-/********************************************************************/
 /****   DECLARATIONS OF DB2 ERROR CONDITIONS                     ****/
 /********************************************************************/
  EXEC SQL  WHENEVER NOT FOUND   CONTINUE   ;/*                      */
  EXEC SQL  WHENEVER SQLWARNING  CONTINUE   ;/*                      */
  EXEC SQL  WHENEVER SQLERROR    CONTINUE   ;/*                      */
0/********************************************************************/
 /*  WORKING DECLARATIONS                                            */
 /********************************************************************/
 DCL TRUE                 BIT(1)   INIT('1'B);
 DCL FALSE                BIT(1)   INIT('0'B);
 DCL PF5_FLAG             BIT(1)   INIT('0'B);
 DCL ACT_SEL              BIT(1)   INIT('0'B);
 DCL T400_FLAG            BIT(1)   INIT('0'B);
 DCL SLC_FLAG             BIT(1)   INIT('0'B);
 DCL MAP_OK_FLAG          BIT(1)   INIT('0'B);
 DCL ERROR_FLAG           BIT(1)   INIT('0'B);
 DCL OVERLAP_FLAG         BIT(1)   INIT('0'B);
 DCL ERASE_EOF            CHAR(1)  INIT('Ã˜');
 DCL CHRS                 CHAR(27) INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ ');
 DCL NUMS                 CHAR(11) INIT('0123456789 ');
 DCL WRK_COUNTRY          CHAR(3)  INIT('');
 DCL WRK_PRODUCT_TYPE     CHAR(4)  INIT('');
 DCL WRK_MODEL_NUMBER     CHAR(03) INIT('');
 DCL WRK_B_WARR           PIC'ZZ9';
 DCL WRK_SLC              CHAR(03) INIT('');
 DCL WRK_EFFECTIVE_DATE   CHAR(10) INIT('');
 DCL WRK_END_DATE         CHAR(10) INIT('');
 DCL WRK_CHAR             CHAR(4)  INIT('');
 DCL WRK_CH4              CHAR(4)  INIT('');
 DCL WRK_CHA              CHAR(4)  INIT('');
 DCL WRK_TIME_IN          CHAR(26) INIT('');
 DCL P,Q                  FIXED BIN(15);
 DCL WRK_REC_COUNT        FIXED BIN(15);
 DCL WRK_REC_COUNT1       FIXED BIN(15);
 DCL WRK_COUNT            FIXED BIN(31);
 DCL WRK_BKP_COUNT        FIXED BIN(31);
 DCL PIC_CNT              PIC 'ZZZZ9';
 DCL SCREEN_ERROR         BIT(1);
 DCL PIC_EXPLAIN          PIC 'ZZZZ9';
 DCL COMMAREA_STRING      CHAR(5984);
 DCL SLC2_FLAG            BIT(1)   INIT('0'B);           /*RB01298*/
 DCL WRK_SLC2             CHAR(03) INIT('');             /*RB01298*/
 DCL PFLINE1A             CHAR(66) INIT
   ('F1=Help F2=Clear F3=Return F5=Execute F7=Bkwd F8=Fwd F9=Top/Bot');
 DCL PFLINE1              CHAR(66) INIT
   ('F1=Help F2=Clear F3=Return F7=Bkwd F8=Fwd F9=Top/Bot');
 DCL SALINE               CHAR(52) INIT
   ('Set Act to A(dd) D(elete) C(hange) and make changes.');
 DCL WRKMAP_DATA          CHAR(500);
 DCL 1 WRKMAP             BASED(ADDR(WRKMAP_DATA)),
     %INCLUDE RCBB56L;;
0/********************************************************************/
 /*  MESSAGES                                                        */
 /********************************************************************/
 DCL ERR_MESSAGE2  CHAR(30) INIT('ERROR IN SENDING MAP ');
 DCL ERR_MESSAGE3  CHAR(30) INIT('ERROR IN RECEIVING MAP ');
 DCL ERR_MESSAGE14 CHAR(40) INIT('ERROR IN RETURNING TO CICS  ');
 DCL ERR_O002 CHAR(75) INIT
       ('Invalid date. Use ISO Date format: YYYY-MM-DD');
 DCL ERR_O004 CHAR(30) INIT('Invalid use of Function Key');
 DCL ERR_O005 CHAR(60) INIT
       ('Invalid use of Function Key. Press Enter To Execute.');
 DCL ERR_O022 CHAR(19) INIT('Press F5 to execute');
 DCL ERR_O030 CHAR(24) INIT('Already on first page');
 DCL ERR_O031 CHAR(23) INIT('Already on last page');
 DCL ERR_O032 CHAR(75) INIT
  ('No item selected. Select Standard FW rule or Country FW rule');
 DCL ERR_O033 CHAR(75) INIT
  ('Select only one item. Standard FW rule or Country FW rule');
 DCL ERR_O170 CHAR(55) INIT('No items found for this search criteria');
 DCL ERR_O171 CHAR(50) INIT
  ('No items found for Standard rules criteria');
 DCL ERR_O172 CHAR(50) INIT
  ('No items found for Country rules criteria ');
 DCL ERR_O173 CHAR(60) INIT
  ('No items found for Standard + Type criteria');
 DCL ERR_O174 CHAR(70) INIT
  ('No items found for Standard + Type + Model criteria ');
 DCL ERR_O175 CHAR(60) INIT
  ('No items found for Country + Type criteria');
 DCL ERR_O176 CHAR(60) INIT
  ('No items found for Country + Type + Model criteria');
 DCL ERR_O177 CHAR(60) INIT
  ('Product Type must be filled');
 DCL ERR_O053 CHAR(18) INIT('Nothing is updated');
 DCL ERR_O057 CHAR(75) INIT
 ('You are not authorized to use the function for this Country number');
 DCL ERR_O072 CHAR(25) INIT('Country number is invalid');
 DCL ERR_O178 CHAR(63) INIT
   ('Brand Warranty must be valid Numeric and cannot be Zero');
 DCL ERR_O179 CHAR(40) INIT('Product Type must be four characters');
 DCL ERR_O180 CHAR(40) INIT('Model Number must be three characters');
 DCL ERR_O181 CHAR(63) INIT
   ('End Date must be greater than Effective date');
 DCL ERR_O182 CHAR(73) INIT
   ('End Date must be greater than or equal to Current date ');
 DCL ERR_O183 CHAR(75) INIT
   ('Overlapping or matching periods not allowed. Refresh & Try again');
 DCL ERR_O184 CHAR(73) INIT
   ('Type, Brand Warranty, Effective Date, End Date must be filled');
 DCL ERR_O185 CHAR(73) INIT
   ('SLC must be three characters or leave it blank');
 DCL ERR_O186 CHAR(75) INIT
  ('Row for delete not found. Choose action = A or fill in new values');
 DCL ERR_O122 CHAR(41) INIT
  ('Delete successful. Enter new data or EXIT');
 DCL ERR_O123 CHAR(41) INIT
  ('Insert successful. Enter new data or EXIT');
 DCL ERR_O124 CHAR(41) INIT
  ('Update successful. Enter new data or EXIT');
 DCL ERR_O127 CHAR(48) INIT
  ('Invalid action.');
 DCL ERR_O187 CHAR(65) INIT
   ('Type & Model must exist in table RCBT0400_PO_MOD1');
 DCL ERR_O188 CHAR(75) INIT
   ('SLC must exist in table RCBT0470' );
 DCL ERR_O189  CHAR (75) INIT                           /*SOC RB01298*/
   ('RULE SHOULD BE EITHER FW OR HB');
 DCL ERR_O190  CHAR (75) INIT
   ('VALID SLC FOR SLC2 SHOULD BE ENTERED FOR HB RULE');
 DCL ERR_O191  CHAR (75) INIT
   ('SLC2 SHOULD BE ENTERED FOR HB RULE ONLY');         /*EOC RB01298*/
 DCL CHKLINE1 CHAR(76) INIT
   ('WARNING: This could DELETE the selected record(s)!');
 DCL CHKLINE3 CHAR(74) INIT
   ('Press F5 Key Again To DELETE.');

 /********************************************************************/
 /*  TS AREA                                                         */
 /********************************************************************/
 DCL 1 TS_REC,
       3 CTRY_NO          CHAR(3)   INIT(''),
       3 P_TYPE           CHAR(4)   INIT(''),
       3 MODEL            CHAR(3)   INIT(''),
       3 B_WARR           DEC FIXED(3,0) INIT(0),
       3 SLVLCD           CHAR(3)   INIT(''),
       3 EFF_DATE         CHAR(10)  INIT(''),
       3 END_DATE         CHAR(10)  INIT(''),
       3 LAST_CHANGE_DATE CHAR(10)  INIT(''),
       3 SLVLCD2          CHAR(3)   INIT(''),               /*RB01298*/
       3 RULE             CHAR(2)   INIT('');               /*RB01298*/
0/********************************************************************/
 /*                 BUILT IN FUNCTIONS                               */
 /********************************************************************/
0DCL (LENGTH,
      STRING,
      SUBSTR,
      VERIFY,
      DECIMAL,
      DATETIME,
      INDEX,
      CHAR,
      NULL,
      CSTG,
      STG,
      ADDR)   BUILTIN;
-/********************************************************************/
 /****   DECLARATIONS OF DB2 SQLCA                                ****/
 /********************************************************************/
  EXEC SQL  INCLUDE  SQLCA                  ;/*                      */
-/********************************************************************/
 /****   DECLARATIONS OF DB2 CURSORS                              ****/
 /********************************************************************/

 EXEC SQL DECLARE S_0690 CURSOR FOR             /* Stardard FW Rule */
       SELECT COUNTRY_NUMBER,
        PRODUCT_TYPE,
        MODEL_NUMBER,
        BRAND_WARRANTY_MNT,
        SERVICE_LVL_CODE,
        EFFECTIVE_DATE,
        END_DATE,
        LAST_CHANGE_DATE,
        SERVICE_LVL_CODE_2,                                 /*RB01298*/
        RULE                                                /*RB01298*/
       FROM  RCBV0690_FLEX_WARR
       WHERE COUNTRY_NUMBER    = '***'
   ORDER BY PRODUCT_TYPE,MODEL_NUMBER
   FOR FETCH ONLY
   WITH UR;

   EXEC SQL DECLARE C_0690 CURSOR FOR          /* Country FW Rule   */
       SELECT COUNTRY_NUMBER,
        PRODUCT_TYPE,
        MODEL_NUMBER,
        BRAND_WARRANTY_MNT,
        SERVICE_LVL_CODE,
        EFFECTIVE_DATE,
        END_DATE,
        LAST_CHANGE_DATE,
        SERVICE_LVL_CODE_2,                                 /*RB01298*/
        RULE                                                /*RB01298*/
       FROM RCBV0690_FLEX_WARR T690
       WHERE COUNTRY_NUMBER   = :WRK_COUNTRY_NUMBER
   ORDER BY PRODUCT_TYPE,MODEL_NUMBER,EFFECTIVE_DATE
   FOR FETCH ONLY
   WITH UR;

   EXEC SQL DECLARE ST_0690 CURSOR FOR    /* Standrad + Type FW Rule */
       SELECT COUNTRY_NUMBER,
        PRODUCT_TYPE,
        MODEL_NUMBER,
        BRAND_WARRANTY_MNT,
        SERVICE_LVL_CODE,
        EFFECTIVE_DATE,
        END_DATE,
        LAST_CHANGE_DATE,
        SERVICE_LVL_CODE_2,                                 /*RB01298*/
        RULE                                                /*RB01298*/
       FROM RCBV0690_FLEX_WARR T690
       WHERE COUNTRY_NUMBER      = '***'
       AND PRODUCT_TYPE = :PRODUCT_TYPE_SEL
       ORDER BY PRODUCT_TYPE,MODEL_NUMBER,EFFECTIVE_DATE
       FOR FETCH ONLY
   WITH UR;

   EXEC SQL DECLARE STM_0690 CURSOR FOR /* Standrad+Type+Model FW Rule*/
        SELECT COUNTRY_NUMBER,
         PRODUCT_TYPE,
         MODEL_NUMBER,
         BRAND_WARRANTY_MNT,
         SERVICE_LVL_CODE,
         EFFECTIVE_DATE,
         END_DATE,
         LAST_CHANGE_DATE,
         SERVICE_LVL_CODE_2,                                 /*RB01298*/
         RULE                                                /*RB01298*/
        FROM RCBV0690_FLEX_WARR T690
         WHERE COUNTRY_NUMBER  = '***'
         AND  PRODUCT_TYPE     = :PRODUCT_TYPE_SEL
         AND  MODEL_NUMBER     = :MODEL_NUMBER_SEL
         ORDER  BY PRODUCT_TYPE,MODEL_NUMBER,EFFECTIVE_DATE
        FOR FETCH ONLY
   WITH UR;

   EXEC SQL DECLARE CT_0690 CURSOR FOR /* Country+Type FW Rule       */
       SELECT COUNTRY_NUMBER,
        PRODUCT_TYPE,
        MODEL_NUMBER,
        BRAND_WARRANTY_MNT,
        SERVICE_LVL_CODE,
        EFFECTIVE_DATE,
        END_DATE,
        LAST_CHANGE_DATE,                            /* CEDS00000495 */
        SERVICE_LVL_CODE_2,                                 /*RB01298*/
        RULE                                                /*RB01298*/
       FROM RCBV0690_FLEX_WARR T690
        WHERE COUNTRY_NUMBER   = :WRK_COUNTRY_NUMBER
        AND  PRODUCT_TYPE      = :PRODUCT_TYPE_SEL
        ORDER BY PRODUCT_TYPE,MODEL_NUMBER,EFFECTIVE_DATE
        FOR FETCH ONLY
     WITH UR;

   EXEC SQL DECLARE CTM_0690 CURSOR FOR /* Country+Type+Model FW Rule */
       SELECT COUNTRY_NUMBER,
        PRODUCT_TYPE,
        MODEL_NUMBER,
        BRAND_WARRANTY_MNT,
        SERVICE_LVL_CODE,
        EFFECTIVE_DATE,
        END_DATE,
        LAST_CHANGE_DATE,
        SERVICE_LVL_CODE_2,                                 /*RB01298*/
        RULE                                                /*RB01298*/
       FROM RCBV0690_FLEX_WARR T690
        WHERE COUNTRY_NUMBER   = :WRK_COUNTRY_NUMBER
        AND  PRODUCT_TYPE = :PRODUCT_TYPE_SEL
        AND  MODEL_NUMBER = :MODEL_NUMBER_SEL
        ORDER BY PRODUCT_TYPE,MODEL_NUMBER,EFFECTIVE_DATE
        FOR FETCH ONLY
      WITH UR;

1/********************************************************************/
 /*              M A I N   P R O C E S S I N G                        */
1/********************************************************************/
 RCBM31O.MSGLNBO = '';

 EXEC SQL SET :WRK_TIME_IN = CURRENT TIMESTAMP;
 WRK_DATE = SUBSTR(WRK_TIME_IN,1,10);

 IF EIBCALEN = 0 THEN
 DO;
   EXEC CICS XCTL PROGRAM('RCBC00P');
 END;

 IF HEADER.NEXT = '99' THEN
 DO;
    HEADER.NEXT = '00';
    CALL RCBC31M_CLEAR_WORK;
    CALL RCBC31M_CLEAR_MAP;
    TMP_COUNTRY_NUMBER = WRK_COUNTRY_NUMBER;
    CALL RCBC31M_SEND_MAP;
 END;

 IF HEADER.NEXT = 'H1' THEN
 DO;
   HEADER.NEXT = '00';
   IF (STAND_FW_FLAG = FALSE & CNTRY_FLAG    = FALSE) &
      (STAND_T_FLAG  = FALSE & CNTRY_T_FLAG  = FALSE) &
      (STAND_TM_FLAG = FALSE & CNTRY_TM_FLAG = FALSE)   THEN
   DO;
     CALL RCBC31M_CLEAR_MAP;
     CALL RCBC31M_SEND_MAP;
   END;
   CALL RCBC31M_RESTORE_MAP;
   CALL RCBC31M_SEND_MAP;
 END;

 SELECT (EIBAID);
   WHEN (DFHPF1,DFHPF13)
   DO;
     CALL RCBC31M_RECEIVE_MAP;
     CALL RCBC31M_SAVE_MAP;
     CALL RCBC31M_HELP_MAP;
   END;

   WHEN (DFHPF2,DFHPF14)
   DO;
     IF HEADER.NEXT = '00' THEN
     DO;
     CALL RCBC31M_CLEAR_WORK;
     CALL RCBC31M_CLEAR_MAP;
     CALL RCBC31M_SEND_MAP;
     END;
     ELSE DO;
       RCBM31O.MSGLNBO = 'O004 ' || ERR_O004;
       RCBM31I.S_FW_SELL = -1;
       CALL RCBC31M_SEND_MAP_CSR;
     END;
   END;

   WHEN (DFHPF3,DFHPF15)
   DO;
     IF HEADER.NEXT = 'H1' THEN
     DO;
       HEADER.NEXT = '00';
       CALL RCBC31M_RESTORE_MAP;
       CALL RCBC31M_SEND_MAP;
     END;
     ELSE
     DO;
       HEADER.NEXT    = 'H1';
       CALL RCBC31M_CLEAR_WORK;
       CALL RCBC31M_CLEAR_MAP;
     IF WRK_COUNTRY_NUMBER = '***' THEN
       DO;
        HEADER.IOPUCTY     = TMP_COUNTRY_NUMBER;
        WRK_COUNTRY_NUMBER = HEADER.IOPUCTY;
     END;

       TS_Q = 'RC00' || EIBTRMID;
       EXEC CICS IGNORE CONDITION QIDERR;
       EXEC CICS DELETEQ TS QUEUE(TS_Q);
       EXEC CICS HANDLE CONDITION QIDERR;

       EXEC CICS XCTL
            PROGRAM('RCBC20P')
            COMMAREA(COMMAREA)
            LENGTH(CSTG(COMMAREA))
            RESP(RESPONSE)
            RESP2(CODE_EXPLAIN);
     END;
   END;

   WHEN (DFHPF5,DFHPF17)
   DO;
     /*IF ADMIN_FLAG  = FALSE                         *//* SOC RB01338*/
     /* & UPD_OK_FLAG = FALSE  THEN                                   */
     IF UPD_OK_FLAG = FALSE  THEN
                                                        /* EOC RB01338*/
     DO;
       RCBM31O.MSGLNBO = 'O004 ' || ERR_O004;
       RCBM31I.S_FW_SELL = -1;
       CALL RCBC31M_SEND_MAP_CSR;
     END;

     CALL RCBC31M_RECEIVE_MAP;

     /* IF OK_FLAG = FALSE THEN */                 /*SOC CEDS00000714*/
     IF F5_OK_FLAG = FALSE THEN                    /*EOC CEDS00000714*/
       CALL RCBC31M_PRE_CHECK_MAP;

     PF5_FLAG = TRUE;
     CALL RCBC31M_CHECK_MAP;
     IF (STAND_FW_FLAG = TRUE | CNTRY_FLAG    = TRUE |
         STAND_T_FLAG  = TRUE | CNTRY_T_FLAG  = TRUE |
         STAND_TM_FLAG = TRUE | CNTRY_TM_FLAG = TRUE)  THEN
       DO;
         CALL RCBC31M_CLEAR_MAP;
         CALL RCBC31M_GET_FW;
         CALL RCBC31M_FILL_MAP;
       END;
       IF T690_UPD_FLAG = TRUE THEN
        DO;
          IF INSERT_FLAG = TRUE THEN
             RCBM31O.MSGLNBO    = 'O123 ' || ERR_O123;

          IF UPDATE_FLAG = TRUE THEN
             RCBM31O.MSGLNBO    = 'O124 ' || ERR_O124;

          IF TOP_DEL_FLAG = TRUE THEN
             RCBM31O.MSGLNBO    = 'O122 ' || ERR_O122;

         T690_UPD_FLAG = FALSE;
        END;
       ELSE
         RCBM31O.MSGLNBO    = 'O053 ' || ERR_O053; /* NO UPDATES */

       CALL RCBC31M_SEND_MAP;
   END;

   WHEN (DFHPF7,DFHPF19)
   DO;
     IF TS_CNT = 0  THEN
     DO;
       CALL RCBC31M_CLEAR_MAP;
       RCBM31O.MSGLNBO = 'O004 ' || ERR_O004;
       CALL RCBC31M_SEND_MAP;
     END;

     IF L - 15 <  0 THEN
     DO;
       J = 0;
       CALL RCBC31M_FILL_MAP;
       RCBM31O.MSGLNBO = 'O030 ' || ERR_O030;
       CALL RCBC31M_SEND_MAP;
     END;
     ELSE DO;
       J = L - 15;
       CALL RCBC31M_FILL_MAP;
       CALL RCBC31M_SEND_MAP;
     END;
   END;

   WHEN (DFHPF8,DFHPF20)
   DO;
     IF TS_CNT = 0  THEN
     DO;
       CALL RCBC31M_CLEAR_MAP;
       RCBM31O.MSGLNBO = 'O004 ' || ERR_O004;
       CALL RCBC31M_SEND_MAP;
     END;

     IF J >= TS_CNT THEN
     DO;
       J = J - K;
       CALL RCBC31M_FILL_MAP;
       RCBM31O.MSGLNBO = 'O031 ' || ERR_O031;
       CALL RCBC31M_SEND_MAP;
     END;
     CALL RCBC31M_FILL_MAP;
     CALL RCBC31M_SEND_MAP;
   END;

   WHEN (DFHPF9,DFHPF21)
   DO;
     IF TS_CNT = 0 THEN
     DO;
       CALL RCBC31M_CLEAR_MAP;
       CALL RCBC31M_SEND_MAP;
     END;

     IF O = 0
        & TS_CNT > 14 THEN
       DO;
         O = 1;
         J = TS_CNT - 14;
         IF J < 1 THEN J = 1;
         CALL RCBC31M_FILL_MAP;
         CALL RCBC31M_SEND_MAP;
       END;

       O = 0;
       J = 0;
       CALL RCBC31M_FILL_MAP;
       CALL RCBC31M_SEND_MAP;
   END;

   WHEN (DFHENTER)
   DO;
   IF HEADER.NEXT = 'H1' THEN
    DO;
     HEADER.NEXT = '00';
     CALL RCBC31M_RESTORE_MAP;
     CALL RCBC31M_SEND_MAP;
    END;

     CALL RCBC31M_CLEAR_WORK;
     CALL RCBC31M_CLEAR_MAP;
     CALL RCBC31M_RECEIVE_MAP;
     EXECUTE_FLAG  = TRUE;                           /* CEDS00000744 */

     IF (RCBM31I.COUNTRYI        Â¬= WRK_COUNTRY_NUMBER
      |  RCBM31I.TYPE_SELI       Â¬= PRODUCT_TYPE_SEL
      |  RCBM31I.MODL_SELI       Â¬= MODEL_NUMBER_SEL) THEN
     DO;
       CALL RCBC31M_VALIDATE_MAP;
       CALL RCBC31M_GET_FW;
       CALL RCBC31M_FILL_MAP;
       CALL RCBC31M_SEND_MAP;
     END;
     ELSE
       IF OK_FLAG = FALSE THEN
       DO;
          CALL RCBC31M_PRE_CHECK_MAP;
          CALL RCBC31M_CHECK_MAP;
          CALL RCBC31M_GET_FW;
          CALL RCBC31M_FILL_MAP;
          CALL RCBC31M_SEND_MAP;
       END;
   END;

   WHEN (DFHCLEAR)
   DO;
     EXEC CICS SEND
        CONTROL
        ERASE
        FREEKB;
     EXEC CICS RETURN;
   END;
   OTHERWISE
   DO;
     CALL RCBC31M_RECEIVE_MAP;
     RCBM31O.MSGLNBO = 'O004 ' || ERR_O004;
     RCBM31I.S_FW_SELL = -1;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

 END;
1/********************************************************************/
 /*      FILL MAP RCBM31                                             */
 /********************************************************************/
0RCBC31M_FILL_MAP: PROC;

 CALL RCBC31M_CLEAR_MAP;

 IF STAND_FW_FLAG  = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = 'X';
   RCBM31O.C_FW_SELO = '';
   RCBM31O.TYPE_SELO = '';
   RCBM31O.MODL_SELO = '';
 END;

 IF CNTRY_FLAG     = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = '';
   RCBM31O.C_FW_SELO = 'X';
   RCBM31O.TYPE_SELO = '';
   RCBM31O.MODL_SELO = '';
 END;

 IF STAND_T_FLAG   = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = 'X';
   RCBM31O.C_FW_SELO = '';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = '';
 END;

 IF STAND_TM_FLAG  = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = 'X';
   RCBM31O.C_FW_SELO = '';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = MODEL_NUMBER_SEL;
 END;

 IF CNTRY_T_FLAG   = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = '';
   RCBM31O.C_FW_SELO = 'X';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = '';
 END;

 IF CNTRY_TM_FLAG  = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = '';
   RCBM31O.C_FW_SELO = 'X';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = MODEL_NUMBER_SEL;
 END;

 IF (STAND_FW_FLAG  = TRUE
    |STAND_T_FLAG   = TRUE
    |STAND_TM_FLAG  = TRUE )
    &WRK_COUNTRY_NUMBER = '***'  THEN
    DO;
     RCBM31O.COUNTRYO   = HEADER.IOPUCTY;
     RCBM31O.COUNTRYO   = RCBM31I.COUNTRYI;
    END;

 K = 0;
 PIC_CNT         = J + 1;
 IF PIC_CNT = 0 THEN PIC_CNT = 1;
 RCBM31O.INCNTO  = PIC_CNT;
 L               = PIC_CNT;
 PIC_CNT         = TS_CNT;
 RCBM31O.TOTCNTO = PIC_CNT;

 RCBM31I.ACTIONL(1) = -1;

 DO I = 1 TO 14;

   WRK_B_WARR = 0;
   IF J <= TS_CNT THEN
   DO;
     J = J + 1;     /* NUMBER OF LINES DISPLAYED */
     K = K + 1;     /* NUMBER OF LINES DISPLAYED ON CURRENT SCREEN */
     EXEC CICS READQ TS QUEUE(TS_Q) INTO(TS_REC) ITEM(J);
     RCBM31O.PRD_TYPEO(I)         = TS_REC.P_TYPE;
     RCBM31O.PRD_TYPEA(I)         = DFHBMPRF;
     RCBM31O.MODELO(I)            = TS_REC.MODEL;
     RCBM31O.MODELA(I)            = DFHBMPRF;
     WRK_B_WARR                   = TS_REC.B_WARR;
     RCBM31O.BRD_WARRO(I)         = WRK_B_WARR;
     RCBM31O.SLCO(I)              = TS_REC.SLVLCD;
     RCBM31O.EFF_DATEO(I)         = TS_REC.EFF_DATE;
     RCBM31O.END_DATEO(I)         = TS_REC.END_DATE;
     RCBM31O.SLC2O(I)             = TS_REC.SLVLCD2;         /*RB01298*/
     RCBM31O.RULEO(I)             = TS_REC.RULE;            /*RB01298*/
     FILL_FLAG(I)                 = TRUE;
   END;

   IF J < TS_CNT THEN
   DO;
     RCBM31O.MOREINDO = '+';
   END;
   ELSE DO;
     RCBM31O.MOREINDO = '-';
     I = 15;
   END;
 END;

 /*IF TS_CNT = 0                                     *//* SOC RB01338*/
 /* & ADMIN_FLAG = TRUE THEN                                         */
 IF TS_CNT = 0 THEN
                                                       /* EOC RB01338*/
   RCBM31O.MSGLNBO = 'O170 ' || ERR_O170;


 IF STAND_FW_FLAG = TRUE THEN
 DO;
 RCBM31O.S_FW_SELO = 'X';
 RCBM31O.TYPE_SELO = '';
 RCBM31O.MODL_SELO = '';
 END;

 IF CNTRY_FLAG = TRUE THEN
 DO;
 RCBM31O.C_FW_SELO = 'X';
 RCBM31O.TYPE_SELO = '';
 RCBM31O.MODL_SELO = '';
 END;

0END RCBC31M_FILL_MAP;
1/********************************************************************/
 /*      SEND MAP RCBM31                                             */
 /********************************************************************/
0RCBC31M_SEND_MAP: PROC;

 /*IF ADMIN_FLAG  = TRUE                             *//* SOC RB01338 */
 /* | UPD_OK_FLAG = TRUE THEN                                         */
 IF UPD_OK_FLAG = TRUE THEN
                                                       /* EOC RB01338 */
 DO;
   RCBM31O.PFLINEO = PFLINE1A;
   RCBM31O.SALINEO = SALINE;
 END;
 ELSE DO;
   RCBM31O.PFLINEO = PFLINE1;
 END;

 /*RCBM31O.COUNTRYO = WRK_COUNTRY_NUMBER;        */ /*SOC CEDS00000714*/
                                                    /*SOC CEDS00000749*/
 /*RCBM31O.COUNTRYO = HEADER.IOPUCTY;               /*EOC CEDS00000714*/
 RCBM31O.COUNTRYO = WRK_COUNTRY_NUMBER;             /*EOC CEDS00000749*/

0EXEC CICS SEND
    MAP('RCBM31')
    MAPSET('RCBM31')
    FREEKB
    ERASE
    RESP(RESPONSE)
    RESP2(CODE_EXPLAIN);

0SELECT(RESPONSE);
    WHEN(DFHRESP(NORMAL))
    DO;
      EXEC CICS RETURN
         TRANSID('RC31')
         COMMAREA(COMMAREA)
         LENGTH(CSTG(COMMAREA));
    END;
    OTHERWISE
    DO;
      RCBM31O.MSGLNBO = ERR_MESSAGE2 || 'RCBM31';
      CALL RCBC31M_SEND_MAP;
    END;
 END;

0END RCBC31M_SEND_MAP;
1/********************************************************************/
 /*      SAVE DATA BEFORE GO TO HELP MAP.                            */
 /********************************************************************/
 RCBC31M_SAVE_MAP: PROC;

 PIC_INT_CNT = '';
 PIC_TOT_CNT = '';

 DO P = 1 TO 14;
  TMP_ACTION(P)               = RCBM31I.ACTIONI(P);
  TMP_PRODUCT_TYPE(P)         = RCBM31I.PRD_TYPEI(P);
  TMP_MODEL_NUMBER(P)         = RCBM31I.MODELI(P);

  IF RCBM31I.BRD_WARRI(P)     = ''  THEN
     TMP_BRAND_WARRANTY(P)    = 0;
  ELSE
     TMP_BRAND_WARRANTY(P)    = RCBM31I.BRD_WARRI(P);

  /*TMP_BRAND_WARRANTY(P)       = RCBM31I.BRD_WARRI(P);*/
  TMP_SERVECE_LVL_CD(P)       = RCBM31I.SLCI(P);
  TMP_EFFECTIVE_DATE(P)       = RCBM31I.EFF_DATEI(P);
  TMP_END_DATE(P)             = RCBM31I.END_DATEI(P);
  TMP_SERVECE_LVL_CD_2(P)     = RCBM31I.SLC2I(P);           /*RB01298*/
  TMP_RULE(P)                 = RCBM31I.RULEI(P);           /*RB01298*/
  TMP_FILL_FLAG(P)            = FILL_FLAG(P);
 END;

 WRK_COUNTRY_NUMBER = RCBM31I.COUNTRYI;
 PIC_INT_CNT        = RCBM31I.INCNTI;
 PIC_TOT_CNT        = RCBM31I.TOTCNTI;

 END RCBC31M_SAVE_MAP;
 /********************************************************************/
 /*      RESTORE MAP RCBM31                                          */
 /********************************************************************/
 RCBC31M_RESTORE_MAP: PROC;

 RCBM31O.COUNTRYO           = WRK_COUNTRY_NUMBER;

 IF STAND_FW_FLAG  = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = 'X';
   RCBM31O.C_FW_SELO = '';
   RCBM31O.TYPE_SELO = '';
   RCBM31O.MODL_SELO = '';
 END;

 IF CNTRY_FLAG     = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = '';
   RCBM31O.C_FW_SELO = 'X';
   RCBM31O.TYPE_SELO = '';
   RCBM31O.MODL_SELO = '';
 END;

 IF STAND_T_FLAG   = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = 'X';
   RCBM31O.C_FW_SELO = '';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = '';
 END;

 IF STAND_TM_FLAG  = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = 'X';
   RCBM31O.C_FW_SELO = '';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = MODEL_NUMBER_SEL;
 END;

 IF CNTRY_T_FLAG   = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = '' ;
   RCBM31O.C_FW_SELO = 'X';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = '';
 END;

 IF CNTRY_TM_FLAG  = TRUE THEN
 DO;
   RCBM31O.S_FW_SELO = '';
   RCBM31O.C_FW_SELO = 'X';
   RCBM31O.TYPE_SELO = PRODUCT_TYPE_SEL;
   RCBM31O.MODL_SELO = MODEL_NUMBER_SEL;
 END;

 RCBM31O.MOREINDO = '+';
 IF K < 14 THEN RCBM31O.MOREINDO = '-';

 DO P = 1 TO 14;
   RCBM31O.ACTIONO(P)         = TMP_ACTION(P);
   RCBM31O.PRD_TYPEO(P)       = TMP_PRODUCT_TYPE(P);
   RCBM31O.MODELO(P)          = TMP_MODEL_NUMBER(P);

   IF TMP_BRAND_WARRANTY(P)   = 0 THEN
      RCBM31O.BRD_WARRO(P)    = '';
   ELSE
      RCBM31O.BRD_WARRO(P)    = TMP_BRAND_WARRANTY(P);

   RCBM31O.SLCO(P)            = TMP_SERVECE_LVL_CD(P);
   RCBM31O.EFF_DATEO(P)       = TMP_EFFECTIVE_DATE(P);
   RCBM31O.END_DATEO(P)       = TMP_END_DATE(P);
   RCBM31O.SLC2O(P)           = TMP_SERVECE_LVL_CD_2(P);    /*RB01298*/
   RCBM31O.RULEO(P)           = TMP_RULE(P);                /*RB01298*/
   FILL_FLAG(P)               = TMP_FILL_FLAG(P);
 END;

 RCBM31O.INCNTO  = PIC_INT_CNT;
 RCBM31O.TOTCNTO = PIC_TOT_CNT;

 END RCBC31M_RESTORE_MAP;
1/********************************************************************/
 /*      CLEAR WORK FIELDS                                           */
 /********************************************************************/
0RCBC31M_CLEAR_WORK: PROC;

 PF5_FLAG           = FALSE;
 F5_OK_FLAG         = FALSE;
 MAP_OK_FLAG        = FALSE;
 STAND_FW_FLAG      = FALSE;
 STAND_T_FLAG       = FALSE;
 STAND_TM_FLAG      = FALSE;
 CNTRY_FLAG         = FALSE;
 CNTRY_T_FLAG       = FALSE;
 CNTRY_TM_FLAG      = FALSE;
 TOP_DEL_FLAG       = FALSE;
 INSERT_FLAG        = FALSE;
 UPDATE_FLAG        = FALSE;
 EXECUTE_FLAG       = FALSE;                         /* CEDS00000744 */

 DO I = 1 TO 14;
   FILL_FLAG(I)          = FALSE;
   TMP_PRODUCT_TYPE(I)   = '';
   TMP_MODEL_NUMBER(I)   = '';
   TMP_BRAND_WARRANTY(I) = '';
   TMP_SERVECE_LVL_CD(I) = '';
   TMP_EFFECTIVE_DATE(I) = '';
   TMP_END_DATE(I)       = '';
   TMP_SERVECE_LVL_CD_2(I)= '';                             /*RB01298*/
   TMP_RULE(I)           = '';                              /*RB01298*/
 END;

 PRODUCT_TYPE_SEL        = '****';
 MODEL_NUMBER_SEL        = '***';
 PRODUCT_TYPE_ENT        = 'N';
 MODEL_NUMBER_ENT        = 'N';

0END RCBC31M_CLEAR_WORK;
1/********************************************************************/
 /*      CLEAR MAP RCBM31                                            */
 /********************************************************************/
 RCBC31M_CLEAR_MAP: PROC;

 /*RCBM31O.COUNTRYO           = WRK_COUNTRY_NUMBER; /*SOC CEDS00000714*/
 RCBM31O.COUNTRYO             = HEADER.IOPUCTY;     /*EOC CEDS00000714*/
 F5_OK_FLAG                   = FALSE;
 RCBM31O.S_FW_SELO            = '';
 RCBM31O.C_FW_SELO            = '';
 RCBM31O.TYPE_SELO            = '';
 RCBM31O.MODL_SELO            = '';
 RCBM31O.INCNTO               = '';
 RCBM31O.TOTCNTO              = '';
 RCBM31O.MOREINDO             = '';
 RCBM31O.MSGLNAO              = '';
 RCBM31O.MSGLNBO              = '';

 DO I = 1 TO 14;
 RCBM31O.ACTIONO(I)           = '';
 RCBM31O.PRD_TYPEO(I)         = '';
 RCBM31O.MODELO(I)            = '';
 RCBM31O.BRD_WARRO(I)         = '';
 RCBM31O.SLCO(I)              = '';
 RCBM31O.EFF_DATEO(I)         = '';
 RCBM31O.END_DATEO(I)         = '';
 RCBM31O.SLC2O(I)             = '';                        /*RB01298*/
 RCBM31O.RULEO(I)             = '';                        /*RB01298*/
 FILL_FLAG(I)                 = FALSE;
 END;

 END RCBC31M_CLEAR_MAP;
1/********************************************************************/
 /*      CLEAR MAP2 RCBM31                                           */
 /********************************************************************/
 RCBC31M_CLEAR_MAP_2: PROC;

 F5_OK_FLAG                   = FALSE;
 RCBM31O.S_FW_SELO            = '';
 RCBM31O.C_FW_SELO            = '';
 RCBM31O.TYPE_SELO            = '';
 RCBM31O.MODL_SELO            = '';
 RCBM31O.INCNTO               = '';
 RCBM31O.TOTCNTO              = '';
 RCBM31O.MOREINDO             = '';
 RCBM31O.MSGLNAO              = '';
 RCBM31O.MSGLNBO              = '';

 DO I = 1 TO 14;
 RCBM31O.ACTIONO(I)           = '';
 RCBM31O.PRD_TYPEO(I)         = '';
 RCBM31O.MODELO(I)            = '';
 RCBM31O.BRD_WARRO(I)         = '';
 RCBM31O.SLCO(I)              = '';
 RCBM31O.EFF_DATEO(I)         = '';
 RCBM31O.END_DATEO(I)         = '';
 RCBM31O.SLC2O(I)             = '';                         /*RB01298*/
 RCBM31O.RULEO(I)             = '';                         /*RB01298*/
 FILL_FLAG(I)                 = FALSE;
 END;

 END RCBC31M_CLEAR_MAP_2;
1/********************************************************************/
 /*      PROTECT MAP RCBM31                                          */
 /********************************************************************/
0RCBC31M_PROTECT_MAP: PROC;

 DO I = 1 TO 14;
   IF FILL_FLAG(I) = TRUE THEN
   DO;
     RCBM31O.PRD_TYPEA(I)        = DFHBMPRF;
     RCBM31O.MODELA(I)           = DFHBMPRF;
   END;
 END;

0END RCBC31M_PROTECT_MAP;
1/********************************************************************/
 /*      RECEIVE MAP RCBM31                                          */
 /********************************************************************/
0RCBC31M_RECEIVE_MAP: PROC;

  EXEC CICS RECEIVE                  /* RECEIVE DRIVER MAP       */
     MAP('RCBM31')
     MAPSET('RCBM31')
     RESP(RESPONSE)
     RESP2(CODE_EXPLAIN);
  SELECT(RESPONSE);                  /* CHECK RESPONSE           */
     WHEN(DFHRESP(NORMAL))
     DO;
       HEADER.RET_CODE = '';        /* INITIALISE RETURN CODES  */
       HEADER.SUB_CODE = '';
     END;

     OTHERWISE
     DO;
       RCBM31O.MSGLNBO = ERR_MESSAGE3;
       CALL RCBC31M_SEND_MAP;
     END;
   END;

0END RCBC31M_RECEIVE_MAP;
1/********************************************************************/
 /*      VALIDATE MAP RCBM31                                         */
 /********************************************************************/
0RCBC31M_VALIDATE_MAP: PROC;

 PRODUCT_TYPE_ENT  = 'N';
 MODEL_NUMBER_ENT  = 'N';
 PRODUCT_TYPE_SEL  = '';
 MODEL_NUMBER_SEL  = '';
 STAND_FW_FLAG     = FALSE;
 STAND_T_FLAG      = FALSE;
 STAND_TM_FLAG     = FALSE;
 CNTRY_FLAG        = FALSE;
 CNTRY_T_FLAG      = FALSE;
 CNTRY_TM_FLAG     = FALSE;

 IF WRK_COUNTRY_NUMBER Â¬= RCBM31I.COUNTRYI THEN
 DO;
   SEL_OPT = '9';
   WRK_COUNTRY_NUMBER = RCBM31I.COUNTRYI;

   EXEC CICS LINK
      PROGRAM('RCBC99P')
      COMMAREA(COMMAREA)
      LENGTH(CSTG(COMMAREA));

   IF CTY_OK_FLAG = FALSE THEN
   DO;
     RCBM31I.COUNTRYL = -1;
     RCBM31O.COUNTRYC = DFHRED;
     WRK_COUNTRY_NUMBER      = '001';
     CALL RCBC31M_CLEAR_MAP_2;
     RCBM31O.MSGLNBO         = 'O072 '||  ERR_O072;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   IF OK_FLAG = FALSE THEN
   DO;
     RCBM31I.COUNTRYL        = -1;
     RCBM31O.COUNTRYC        = DFHRED;
     WRK_COUNTRY_NUMBER      = '001';
     CALL RCBC31M_CLEAR_MAP_2;
     RCBM31O.MSGLNBO         = 'O057 ' || ERR_O057;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   IF RCB025_FLAG = FALSE THEN
   DO;
     RCBM31O.COUNTRYC = DFHRED;
     RCBM31I.COUNTRYL = -1;
     WRK_COUNTRY_NUMBER      = '001';
     CALL RCBC31M_CLEAR_MAP_2;
     RCBM31O.MSGLNBO =
                     'Parameter RCB025 is missing for this country';
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   IF RCB098_FLAG = FALSE THEN
   DO;
     RCBM31O.COUNTRYC        = DFHRED;
     RCBM31I.COUNTRYL        = -1;
     WRK_COUNTRY_NUMBER      = '001';
     CALL RCBC31M_CLEAR_MAP_2;
     RCBM31O.MSGLNBO         =
                     'Parameter RCB098 is missing for this country';
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   IF ASCA_STOP_FLAG = TRUE THEN
   DO;
     RCBM31O.COUNTRYC        = DFHRED;
     RCBM31I.COUNTRYL        = -1;
     WRK_COUNTRY_NUMBER      = '001';
     CALL RCBC31M_CLEAR_MAP_2;
     RCBM31O.MSGLNBO         = 'O079 ' || ERR_O079;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   WRK_COUNTRY_NUMBER   = RCBM31I.COUNTRYI;
 END;

 IF (RCBM31I.S_FW_SELI  Â¬= ''
 &   RCBM31I.TYPE_SELI   = ''
 &   RCBM31I.MODL_SELI   = '') THEN
 DO;
   STAND_FW_FLAG         = TRUE;
 END;

 IF RCBM31I.S_FW_SELI   Â¬= ''
 &  RCBM31I.TYPE_SELI   Â¬= ''
 &  RCBM31I.MODL_SELI    = '' THEN
 DO;
   STAND_T_FLAG          = TRUE;
   IF INDEX(RCBM31I.TYPE_SELI,' ') Â¬= 0 THEN
   DO;
          RCBM31O.MSGLNBO = 'O179 ' || ERR_O179;
          RCBM31O.TYPE_SELC = DFHRED;
          RCBM31I.TYPE_SELL = -1;
     CALL RCBC31M_SEND_MAP_CSR;
   END;
   PRODUCT_TYPE_SEL    = RCBM31I.TYPE_SELI;
 END;

 IF RCBM31I.S_FW_SELI Â¬= ''
 &  RCBM31I.TYPE_SELI Â¬= ''
 &  RCBM31I.MODL_SELI Â¬= '' THEN
 DO;
   STAND_TM_FLAG       = TRUE;
   IF INDEX(RCBM31I.TYPE_SELI,' ') Â¬= 0 THEN
   DO;
          RCBM31O.MSGLNBO   = 'O179 ' || ERR_O179;
          RCBM31O.TYPE_SELC = DFHRED;
          RCBM31I.TYPE_SELL = -1;
     CALL RCBC31M_SEND_MAP_CSR;
   END;
   PRODUCT_TYPE_SEL    = RCBM31I.TYPE_SELI;
   IF INDEX(RCBM31I.MODL_SELI,' ') Â¬= 0 THEN
   DO;
          RCBM31O.MSGLNBO = 'O180 ' || ERR_O180;
          RCBM31O.MODL_SELC = DFHRED;
          RCBM31I.MODL_SELL = -1;
     CALL RCBC31M_SEND_MAP_CSR;
   END;
   MODEL_NUMBER_SEL    = RCBM31I.MODL_SELI;
 END;

 IF RCBM31I.C_FW_SELI Â¬= ''
 &  RCBM31I.TYPE_SELI  = ''
 &  RCBM31I.MODL_SELI  = '' THEN
 DO;
   CNTRY_FLAG = TRUE;
 END;

 IF RCBM31I.C_FW_SELI Â¬= ''
 &  RCBM31I.TYPE_SELI Â¬= ''
 &  RCBM31I.MODL_SELI  = '' THEN
 DO;
   CNTRY_T_FLAG = TRUE;
   IF INDEX(RCBM31I.TYPE_SELI,' ') Â¬= 0 THEN
   DO;
          RCBM31O.MSGLNBO   = 'O179 ' || ERR_O179;
          RCBM31O.TYPE_SELC = DFHRED;
          RCBM31I.TYPE_SELL = -1;
     CALL RCBC31M_SEND_MAP_CSR;
   END;
   PRODUCT_TYPE_SEL    = RCBM31I.TYPE_SELI;
 END;

 IF RCBM31I.C_FW_SELI Â¬= ''
 &  RCBM31I.TYPE_SELI Â¬= ''
 &  RCBM31I.MODL_SELI Â¬= '' THEN
 DO;
   CNTRY_TM_FLAG       = TRUE;
   IF INDEX(RCBM31I.TYPE_SELI,' ') Â¬= 0 THEN
   DO;
          RCBM31O.MSGLNBO   = 'O179 ' || ERR_O179;
          RCBM31O.TYPE_SELC = DFHRED;
          RCBM31I.TYPE_SELL = -1;
     CALL RCBC31M_SEND_MAP_CSR;
   END;
   PRODUCT_TYPE_SEL    = RCBM31I.TYPE_SELI;
   IF INDEX(RCBM31I.MODL_SELI,' ') Â¬= 0 THEN
   DO;
          RCBM31O.MSGLNBO = 'O180 ' || ERR_O180;
          RCBM31O.MODL_SELC = DFHRED;
          RCBM31I.MODL_SELL = -1;
     CALL RCBC31M_SEND_MAP_CSR;
   END;
   MODEL_NUMBER_SEL    = RCBM31I.MODL_SELI;
 END;

 IF (RCBM31I.S_FW_SELI Â¬= ''
   & RCBM31I.MODL_SELI Â¬= ''
   & RCBM31I.TYPE_SELI  = '')|
    (RCBM31I.C_FW_SELI Â¬= ''
   & RCBM31I.MODL_SELI Â¬= ''
   & RCBM31I.TYPE_SELI  = '') THEN
   DO;
     RCBM31I.TYPE_SELL = -1;
     RCBM31O.TYPE_SELC = DFHRED;
     RCBM31O.MSGLNBO   = 'O177 ' || ERR_O177;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

 IF (STAND_FW_FLAG = FALSE & CNTRY_FLAG    = FALSE) &
    (STAND_T_FLAG  = FALSE & CNTRY_T_FLAG  = FALSE) &
    (STAND_TM_FLAG = FALSE & CNTRY_TM_FLAG = FALSE)   THEN
 DO;
   RCBM31I.S_FW_SELL = -1;
   RCBM31I.C_FW_SELL = -1;
   RCBM31I.TYPE_SELL = -1;
   RCBM31I.MODL_SELL = -1;
   RCBM31O.S_FW_SELC = DFHRED;
   RCBM31O.C_FW_SELC = DFHRED;
   RCBM31O.MSGLNBO   = 'O032 ' || ERR_O032;
   CALL RCBC31M_SEND_MAP_CSR;
 END;

 IF (STAND_FW_FLAG = TRUE & CNTRY_FLAG    = TRUE) |
    (STAND_T_FLAG  = TRUE & CNTRY_T_FLAG  = TRUE) |
    (STAND_TM_FLAG = TRUE & CNTRY_TM_FLAG = TRUE)   THEN
 DO;
   STAND_FW_FLAG     = FALSE;
   STAND_T_FLAG      = FALSE;
   STAND_TM_FLAG     = FALSE;
   CNTRY_FLAG        = FALSE;
   CNTRY_T_FLAG      = FALSE;
   CNTRY_TM_FLAG     = FALSE;

   RCBM31I.S_FW_SELL = -1;
   RCBM31I.C_FW_SELL = -1;
   RCBM31I.TYPE_SELL = -1;
   RCBM31I.MODL_SELL = -1;
   RCBM31O.S_FW_SELC = DFHRED;
   RCBM31O.C_FW_SELC = DFHRED;
   RCBM31O.MSGLNBO   = 'O033 ' || ERR_O033;
   CALL RCBC31M_SEND_MAP_CSR;
 END;

 IF RCBM31I.S_FW_SELF  = ERASE_EOF THEN
   RCBM31O.S_FW_SELO   = '';

 IF RCBM31I.C_FW_SELF  = ERASE_EOF THEN
   RCBM31O.C_FW_SELO   = '';

 IF RCBM31I.TYPE_SELF  = ERASE_EOF THEN
   RCBM31I.TYPE_SELI   = '';

 IF RCBM31I.MODL_SELF  = ERASE_EOF THEN
   RCBM31I.MODL_SELI   = '';

 IF RCBM31I.TYPE_SELI Â¬= '' THEN
 DO;
   PRODUCT_TYPE_ENT    = 'Y';
   PRODUCT_TYPE_SEL    = RCBM31O.TYPE_SELO;
 END;

 IF RCBM31I.MODL_SELI Â¬= '' THEN
 DO;
   MODEL_NUMBER_ENT    = 'Y';
   MODEL_NUMBER_SEL    = RCBM31O.MODL_SELO;
 END;

 DO I = 1 TO 14;
   IF RCBM31I.ACTIONI(I)    Â¬= '' THEN
   DO;
    IF RCBM31I.PRD_TYPEI(I) Â¬= '' THEN
    DO;
      TYPE_FLAG = TRUE;
      PRODUCT_TYPE_ENT    = 'Y';
      TMP_PRODUCT_TYPE(I) = RCBM31I.PRD_TYPEI(I);
    END;
    IF RCBM31I.MODELI(I) Â¬= '' THEN
    DO;
      MODEL_FLAG          = TRUE;
      MODEL_NUMBER_ENT    = 'Y';
      MODEL_NUMBER_SEL    = RCBM31I.MODELI(I);
      TMP_MODEL_NUMBER(I) = RCBM31I.MODELI(I);
    END;
    CALL RCBC31M_CHECK_MAP;
   END;
 END;

0END RCBC31M_VALIDATE_MAP;
1/********************************************************************/
 /*      VALIDATE DATE PROCESSING                                    */
 /********************************************************************/
0RCBC31M_VALID_DATE: PROC(A_DATE ) RETURNS(BIT(1));
 DCL A_DATE         CHAR(*);
 DCL L_RET          BIT(1) INIT(TRUE);

 DATE_AREA               = '';
 DATE_AREA.WD_IN_FORMAT  = 'ISO';
 DATE_AREA.WD_OUT_FORMAT = 'ISO';
 DATE_AREA.WD_FUNCTION   = 'V';  /*VALIDATE*/
 DATE_AREA.WD_IN_DATE    = A_DATE;
 CALL RCB004N (ADDR(DATE_AREA));

 IF (DATE_AREA.WD_STATUS Â¬= ' ') THEN
 DO;
   L_RET = FALSE;
 END;

 RETURN(L_RET);

0END RCBC31M_VALID_DATE;
1/********************************************************************/
 /*      PRE CHECK MAP RCBM31                                        */
 /********************************************************************/
0RCBC31M_PRE_CHECK_MAP: PROC;

 MAP_OK_FLAG = TRUE;
 OK_FLAG     = FALSE;

 DO I = 1 TO 14;
   IF VERIFY(RCBM31I.ACTIONI(I), ' ACD') Â¬= 0 THEN
   DO;
     RCBM31I.ACTIONL(I) = -1;
     RCBM31O.ACTIONC(I) = DFHRED;
     MAP_OK_FLAG        = FALSE;
   END;

   IF RCBM31I.ACTIONI(I) Â¬= '' THEN
   DO;
     OK_FLAG = TRUE;
   END;

   IF RCBM31I.ACTIONI(I) = 'D' THEN
   DO;
     IF RCBM31I.PRD_TYPEI(I) Â¬= ''
      & RCBM31I.MODELI(I)    Â¬= ''
      & RCBM31I.EFF_DATEI(I) Â¬= '' THEN
     DO;
       F5_OK_FLAG         = TRUE;
       RCBM31O.MSGLNAO    = CHKLINE1;
       RCBM31O.MSGLNBO    = CHKLINE3;
       CALL RCBC31M_SEND_MAP;
     END;
   END;
 END;

 IF MAP_OK_FLAG = FALSE THEN
 DO;
   OK_FLAG = FALSE;
   RCBM31I.ACTIONL(I)   = -1;
   RCBM31O.ACTIONC(I)   = DFHRED;
   RCBM31O.MSGLNBO = 'O127 ' || ERR_O127;
   CALL RCBC31M_SEND_MAP_CSR;
 END;

 IF OK_FLAG = FALSE THEN
 DO;
   RCBM31O.MSGLNBO   = 'O005 ' || ERR_O005;
   CALL RCBC31M_SEND_MAP;
 END;

 IF EXECUTE_FLAG    = FALSE                      /* SOC CEDS00000744 */
  & RCBM31I.ACTIONI(1) = 'A' THEN
 DO;
   RCBM31O.MSGLNBO   =
               'PRESS ENTER TO VALIDATE BEFORE PRESSING F5 TO EXECUTE';
   CALL RCBC31M_SEND_MAP;
 END;
                                                 /* EOC CEDS00000744 */
 RCBM31O.MSGLNAO = '';
 RCBM31O.MSGLNBO = '';

0END RCBC31M_PRE_CHECK_MAP;
1/********************************************************************/
 /*      CHECK MAP RCBM31                                            */
 /********************************************************************/
0RCBC31M_CHECK_MAP: PROC;

 T690_UPD_FLAG = FALSE;

 RCBM31O.MSGLNAO = '';
 RCBM31O.MSGLNBO = '';

   IF STAND_FW_FLAG  = TRUE |
      STAND_T_FLAG   = TRUE |
      STAND_TM_FLAG  = TRUE   THEN
      WRK_COUNTRY_NUMBER  = '***';

   IF CNTRY_FLAG     = TRUE |
      CNTRY_T_FLAG   = TRUE |
      CNTRY_TM_FLAG  = TRUE   THEN
      WRK_COUNTRY_NUMBER = RCBM31I.COUNTRYI;

 DO I = 1 TO 14;
   IF VERIFY(RCBM31I.ACTIONI(I), 'AC') = 0 THEN
   DO;
     CALL RCBC31M_CHECK_ADD;
     CALL RCBC31M_CHECK_400;
     CALL RCBC31M_CHECK_SLC;
     CALL RCBC31M_CHECK_SLC2;                              /*RB01298*/
   END;
 END;

 DO I = 1 TO 14;
   IF VERIFY(RCBM31I.ACTIONI(I), ' ACD') Â¬= 0 THEN
   DO;
     RCBM31I.ACTIONL(I)   = -1;
     RCBM31O.ACTIONC(I)   = DFHRED;
     RCBM31O.MSGLNBO = 'O127 ' || ERR_O127;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   IF RCBM31I.ACTIONI(I) Â¬= ''
    & PF5_FLAG            = FALSE THEN
   DO;
     RCBM31I.ACTIONL(I)   = -1;
     RCBM31O.ACTIONC(I)   = DFHRED;
     RCBM31O.MSGLNBO = 'O022 ' || ERR_O022;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   IF RCBM31I.ACTIONI(I) = 'A' THEN
   DO;
   CALL RCBC31M_CHECK_PERIOD_INSERT;
     IF PF5_FLAG    = TRUE
      & INSERT_FLAG = TRUE THEN
     DO;
       CALL RCBC31M_DEFINE_FW;
       RCBM31O.ACTIONO(I) = '';
       TMP_ACTION(I)      = '1';
       UPDATE_FLAG        = FALSE;
       TOP_DEL_FLAG       = FALSE;
       CALL RCBC31M_UPD_T560;
     END;
   END;

   IF RCBM31I.ACTIONI(I) = 'C'
   &  PF5_FLAG           = TRUE THEN
   DO;
     CALL RCBC31M_UPDATE_FW;
     RCBM31O.ACTIONO(I) = '';
     TMP_ACTION(I)      = '2';
     INSERT_FLAG        = FALSE;
     TOP_DEL_FLAG       = FALSE;
     CALL RCBC31M_UPD_T560;
   END;

   IF RCBM31I.ACTIONI(I) = 'D'
   &  PF5_FLAG           = TRUE THEN
   DO;
   TOP_DEL_FLAG  = TRUE;
     CALL RCBC31M_DELETE_FW;
     RCBM31O.ACTIONO(I) = '';
     TMP_ACTION(I)      = '3';
     INSERT_FLAG        = FALSE;
     UPDATE_FLAG        = FALSE;
     CALL RCBC31M_UPD_T560;
   END;
 END;

 IF OK_FLAG       = TRUE
  & PF5_FLAG      = FALSE
  & T690_UPD_FLAG = FALSE THEN
 DO;
  RCBM31I.ACTIONI(1) = -1;
  RCBM31O.MSGLNBO    = 'O022 ' || ERR_O022;
  CALL RCBC31M_SEND_MAP;
 END;

0END RCBC31M_CHECK_MAP;
1/********************************************************************/
 /*      ADDED RECORDS TO BE VALIDATED                               */
 /********************************************************************/
0RCBC31M_CHECK_ADD: PROC;

 IF (RCBM31I.PRD_TYPEI(I)       = ''
   | RCBM31I.BRD_WARRI(I)       = ''
   | RCBM31I.EFF_DATEI(I)       = ''
   | RCBM31I.END_DATEI(I)       = '') THEN
 DO;
   RCBM31O.MSGLNBO = 'O184 ' || ERR_O184;
   RCBM31O.PRD_TYPEC(I) = DFHRED;
   RCBM31I.PRD_TYPEL(I) = -1;
   RCBM31I.MODELL(I)    = -1;
   RCBM31I.BRD_WARRL(I) = -1;
   RCBM31I.SLCL(I)      = -1;
   RCBM31I.EFF_DATEL(I) = -1;
   RCBM31I.END_DATEL(I) = -1;
   RCBM31I.SLC2L(I)     = -1;                               /*RB01298*/
   RCBM31I.RULEL(I)     = -1;                               /*RB01298*/
   CALL RCBC31M_SEND_MAP_CSR;
 END;

   IF INDEX(RCBM31I.PRD_TYPEI(I),' ') Â¬= 0 THEN
 DO;
   RCBM31O.MSGLNBO = 'O179 ' || ERR_O179;
   RCBM31O.PRD_TYPEC(I) = DFHRED;
   RCBM31I.PRD_TYPEL(I) = -1;
   CALL RCBC31M_SEND_MAP_CSR;
 END;

    IF INDEX(RCBM31I.MODELI(I),' ') Â¬= 0 THEN
 DO;
   RCBM31O.MSGLNBO = 'O180 ' || ERR_O180;
   RCBM31O.MODELC(I) = DFHRED;
   RCBM31I.MODELL(I) = -1;
   CALL RCBC31M_SEND_MAP_CSR;
 END;

 IF ((SUBSTR(RCBM31I.BRD_WARRI(I),1,1) Â¬= '')&
     (SUBSTR(RCBM31I.BRD_WARRI(I),2,1)  = '')&
     (SUBSTR(RCBM31I.BRD_WARRI(I),3,1) Â¬= '')) THEN
 DO;
   RCBM31O.MSGLNBO = 'O178 ' || ERR_O178;
   RCBM31O.BRD_WARRC(I) = DFHRED;
   RCBM31I.BRD_WARRL(I) = -1;
   CALL RCBC31M_SEND_MAP_CSR;
 END;

 IF VERIFY(RCBM31I.BRD_WARRI(I),NUMS) Â¬= 0      /*CHECK FIELD NUMERIC*/
 |(RCBM31I.BRD_WARRI(I) = 0) THEN
 DO;
   RCBM31O.MSGLNBO = 'O178 ' || ERR_O178;
   RCBM31O.BRD_WARRC(I) = DFHRED;
   RCBM31I.BRD_WARRL(I) = -1;
   CALL RCBC31M_SEND_MAP_CSR;
 END;

 IF RCBM31I.SLCI(I)  Â¬= '' THEN
 DO;
    IF INDEX(RCBM31I.SLCI(I),' ') Â¬= 0 THEN
    DO;
       RCBM31O.MSGLNBO = 'O185 ' || ERR_O185;
       RCBM31O.SLCC(I) = DFHRED;
       RCBM31I.SLCL(I) = -1;
       CALL RCBC31M_SEND_MAP_CSR;
    END;
 END;
 IF RCBM31I.EFF_DATEI(I) Â¬= ''
   & ( Â¬ RCBC31M_VALID_DATE(RCBM31I.EFF_DATEI(I))) THEN
  DO;
     RCBM31O.MSGLNBO = 'O002 ' || ERR_O002;
     RCBM31O.EFF_DATEC(I) = DFHRED;
     RCBM31I.EFF_DATEL(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
  END;

 IF RCBM31I.END_DATEI(I) Â¬= ''
   & ( Â¬ RCBC31M_VALID_DATE(RCBM31I.END_DATEI(I))) THEN
  DO;
     RCBM31O.MSGLNBO      = 'O002 ' || ERR_O002;
     RCBM31O.END_DATEC(I) = DFHRED;
     RCBM31I.END_DATEL(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
  END;

 IF  RCBM31I.END_DATEI(I) <=  RCBM31I.EFF_DATEI(I) THEN
  DO;
     RCBM31O.MSGLNBO      = 'O181 ' ||  ERR_O181;
     RCBM31O.END_DATEC(I) = DFHRED;
     RCBM31I.END_DATEL(I) = -1;
     RCBM31I.END_DATEL(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
  END;

  IF RCBM31I.END_DATEI(I) < WRK_DATE  THEN
  DO;
     RCBM31O.MSGLNBO      = 'O182 ' ||  ERR_O182;
     RCBM31O.END_DATEC(I) = DFHRED;
     RCBM31I.END_DATEL(I) = -1;
     RCBM31I.END_DATEL(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
  END;
                                                        /*SOC RB01298*/
  IF RCBM31I.RULEI(I) Â¬= 'FW' & RCBM31I.RULEI(I) Â¬= 'HB' THEN
  DO;
     RCBM31O.MSGLNBO      = 'O189 ' ||  ERR_O189;
     RCBM31O.RULEC(I) = DFHRED;
     RCBM31I.RULEL(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
  END;

  IF RCBM31I.RULEI(I)  = 'FW' & RCBM31I.SLC2I(I) Â¬= ' ' THEN
  DO;
    RCBM31O.MSGLNBO      = 'O191 ' ||  ERR_O191;
    RCBM31O.SLC2C(I) = DFHRED;
    RCBM31I.SLC2L(I) = -1;
    CALL RCBC31M_SEND_MAP_CSR;
  END;

  IF RCBM31I.RULEI(I)  = 'HB' & RCBM31I.SLC2I(I)  = ' ' THEN
  DO;
     RCBM31O.MSGLNBO      = 'O190 ' ||  ERR_O190;
     RCBM31O.SLC2C(I) = DFHRED;
     RCBM31I.SLC2L(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
  END;

  IF RCBM31I.RULEI(I)  = 'HB' & RCBM31I.SLC2I(I) Â¬= ''  THEN
  DO;
     IF INDEX(RCBM31I.SLC2I(I),' ') Â¬= 0 THEN
     DO;
        RCBM31O.MSGLNBO = 'O190 ' || ERR_O190   ;
        RCBM31O.SLC2C(I) = DFHRED;
        RCBM31I.SLC2L(I) = -1;
        CALL RCBC31M_SEND_MAP_CSR;
     END;                                               /*EOC RB01298*/

0END RCBC31M_CHECK_ADD;
1/********************************************************************/
 /*      ADDED RECORDS TO BE VALIDATED  - NOT TO OVERLAP             */
 /********************************************************************/
0RCBC31M_CHECK_PERIOD: PROC;

 WRK_PRODUCT_TYPE   = RCBM31I.PRD_TYPEI(I);
 WRK_MODEL_NUMBER   = RCBM31I.MODELI(I);
 WRK_EFFECTIVE_DATE = RCBM31I.EFF_DATEI(I);
 WRK_END_DATE       = RCBM31I.END_DATEI(I);

 INSERT_FLAG        = FALSE;
 UPDATE_FLAG        = FALSE;

 WRK_COUNT = '0';

   EXEC SQL
        SELECT COUNT(*)
        INTO :WRK_COUNT
        FROM RCBV0690_FLEX_WARR
        WHERE COUNTRY_NUMBER    = :WRK_COUNTRY_NUMBER
        AND  PRODUCT_TYPE       = :WRK_PRODUCT_TYPE
        AND  MODEL_NUMBER       = :WRK_MODEL_NUMBER
        AND  ( :WRK_EFFECTIVE_DATE     BETWEEN
                    EFFECTIVE_DATE     AND    END_DATE
            OR :WRK_END_DATE           BETWEEN
                    EFFECTIVE_DATE     AND    END_DATE

            OR    (:WRK_EFFECTIVE_DATE <= EFFECTIVE_DATE
            AND    :WRK_END_DATE       >= EFFECTIVE_DATE
                  )
              );

 SELECT(SQLCA.SQLCODE);
   WHEN(0);
   OTHERWISE
   DO;
     RCBM31O.MSGLNBO =
     'DB2 ERROR ' || SQLCA.SQLCODE || ' OCCURED
      while accessing RCBT0690';
     CALL RCBC31M_SEND_MAP_CSR;
   END;
 END;

   IF WRK_COUNT > 1 THEN                 /* MULTIPLE OVERLAPS FOUND  */
     DO;
     OVERLAP_FLAG         = TRUE;
     RCBM31O.MSGLNBO      = 'O183 ' || ERR_O183;
     RCBM31O.EFF_DATEC(I) = DFHRED;
     RCBM31O.END_DATEC(I) = DFHRED;
     RCBM31I.EFF_DATEL(I) = -1;
     RCBM31I.END_DATEL(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
     END;
   ELSE
     DO;
        IF WRK_COUNT = 1
         & RCBM31I.ACTIONI(I) = 'C' THEN
           UPDATE_FLAG = TRUE;/* ONE OVERLAP FOUND- UPDATE SAME RECORD*/
     END;

0END RCBC31M_CHECK_PERIOD;
1/********************************************************************/
 /*      ADDED RECORDS TO BE VALIDATED  - NOT TO OVERLAP             */
 /********************************************************************/
0RCBC31M_CHECK_PERIOD_INSERT: PROC;

 WRK_PRODUCT_TYPE   = RCBM31I.PRD_TYPEI(I);
 WRK_MODEL_NUMBER   = RCBM31I.MODELI(I);
 WRK_EFFECTIVE_DATE = RCBM31I.EFF_DATEI(I);
 WRK_END_DATE       = RCBM31I.END_DATEI(I);


 INSERT_FLAG        = FALSE;
 UPDATE_FLAG        = FALSE;

 WRK_COUNT = '0';

   EXEC SQL
        SELECT COUNT(*)
        INTO :WRK_COUNT
        FROM RCBV0690_FLEX_WARR
        WHERE COUNTRY_NUMBER    = :WRK_COUNTRY_NUMBER
        AND  PRODUCT_TYPE       = :WRK_PRODUCT_TYPE
        AND  MODEL_NUMBER       = :WRK_MODEL_NUMBER
        AND  ( :WRK_EFFECTIVE_DATE     BETWEEN
                    EFFECTIVE_DATE     AND    END_DATE
            OR :WRK_END_DATE           BETWEEN
                    EFFECTIVE_DATE     AND    END_DATE

            OR    (:WRK_EFFECTIVE_DATE <= EFFECTIVE_DATE
            AND    :WRK_END_DATE       >= EFFECTIVE_DATE
                  )
              );

 SELECT(SQLCA.SQLCODE);
   WHEN(0);
   OTHERWISE
   DO;
     RCBM31O.MSGLNBO =
     'DB2 ERROR ' || SQLCA.SQLCODE || ' OCCURED while accessing
      RCBT0690';
     CALL RCBC31M_SEND_MAP_CSR;
   END;
 END;

   IF WRK_COUNT > 0 THEN                 /* MULTIPLE OVERLAPS FOUND  */
     DO;
       OVERLAP_FLAG    = TRUE;
       RCBM31O.MSGLNBO = 'O183 ' || ERR_O183;
       RCBM31O.EFF_DATEC(I) = DFHRED;
       RCBM31O.END_DATEC(I) = DFHRED;
       RCBM31I.EFF_DATEL(I) = -1;
       RCBM31I.END_DATEL(I) = -1;
       CALL RCBC31M_SEND_MAP_CSR;
     END;
   ELSE
     DO;
        IF WRK_COUNT = 0
         & RCBM31I.ACTIONI(I) = 'A' THEN
          INSERT_FLAG = TRUE;/* NO OVERLAPS FOUND- INSERT NEW RECORD */
     END;

0END RCBC31M_CHECK_PERIOD_INSERT;
1/********************************************************************/
 /*      GET FLEXIBLE WARRANTY MACHINES                              */
 /********************************************************************/
0RCBC31M_GET_FW: PROC;

 DO M = 1 TO 14;
    FILL_FLAG(M) = FALSE;
 END;

 TS_Q = 'RC31' || EIBTRMID;

 EXEC CICS IGNORE CONDITION QIDERR;

 EXEC CICS DELETEQ TS QUEUE(TS_Q);

 EXEC CICS HANDLE CONDITION QIDERR;

 OK_FLAG = TRUE;
 TS_CNT = 0;
 J      = 0;
 L      = 1;

   IF STAND_FW_FLAG  = TRUE |
    STAND_T_FLAG     = TRUE |
    STAND_TM_FLAG    = TRUE   THEN
    WRK_COUNTRY_NUMBER  = '***';

 IF CNTRY_FLAG     = TRUE |
    CNTRY_T_FLAG   = TRUE |
    CNTRY_TM_FLAG  = TRUE   THEN
    WRK_COUNTRY_NUMBER    = RCBM31I.COUNTRYI;
                                                    /*SOC CEDS00000749*/
 IF (CNTRY_FLAG     = TRUE |
     CNTRY_T_FLAG   = TRUE |
     CNTRY_TM_FLAG  = TRUE)&
     WRK_COUNTRY_NUMBER = '***' THEN
   WRK_COUNTRY_NUMBER = HEADER.IOPUCTY;             /*EOC CEDS00000749*/

 IF STAND_FW_FLAG  = TRUE THEN
 DO;
   EXEC SQL  OPEN S_0690;
 END;
 IF STAND_T_FLAG   = TRUE THEN
   EXEC SQL  OPEN ST_0690;

 IF STAND_TM_FLAG  = TRUE THEN
   EXEC SQL  OPEN STM_0690;

 IF CNTRY_FLAG     = TRUE THEN
   EXEC SQL  OPEN C_0690;

 IF CNTRY_T_FLAG   = TRUE THEN
   EXEC SQL  OPEN CT_0690;

 IF CNTRY_TM_FLAG  = TRUE THEN
   EXEC SQL  OPEN CTM_0690;

 SELECT(SQLCA.SQLCODE);
   WHEN(0);
   OTHERWISE
   DO;
     RCBM31O.MSGLNBO = 'DB2 ERROR ' || SQLCA.SQLCODE || ' OCCURED
     while accessing RCBT0690';
     CALL RCBC31M_SEND_MAP_CSR;
   END;
 END;


 DO WHILE (OK_FLAG = TRUE);
    TS_REC         = '';

   IF STAND_FW_FLAG = TRUE THEN
     EXEC SQL  FETCH S_0690
               INTO :TS_REC.CTRY_NO,
                    :TS_REC.P_TYPE,
                    :TS_REC.MODEL,
                    :TS_REC.B_WARR,
                    :TS_REC.SLVLCD :NUL690E,   /* CEDS00000384 */
                    :TS_REC.EFF_DATE,
                    :TS_REC.END_DATE,
                    :TS_REC.LAST_CHANGE_DATE,
                    :TS_REC.SLVLCD2 :NUL690I,              /*RB01298*/
                    :TS_REC.RULE :NUL690J;                 /*RB01298*/

   IF STAND_T_FLAG = TRUE THEN
     EXEC SQL  FETCH ST_0690
               INTO :TS_REC.CTRY_NO,
                    :TS_REC.P_TYPE,
                    :TS_REC.MODEL,
                    :TS_REC.B_WARR,
                    :TS_REC.SLVLCD :NUL690E,   /* CEDS00000384 */
                    :TS_REC.EFF_DATE,
                    :TS_REC.END_DATE,
                    :TS_REC.LAST_CHANGE_DATE,
                    :TS_REC.SLVLCD2 :NUL690I,              /*RB01298*/
                    :TS_REC.RULE :NUL690J;                 /*RB01298*/

   IF STAND_TM_FLAG = TRUE THEN
     EXEC SQL  FETCH STM_0690
               INTO :TS_REC.CTRY_NO,
                    :TS_REC.P_TYPE,
                    :TS_REC.MODEL,
                    :TS_REC.B_WARR,
                    :TS_REC.SLVLCD :NUL690E,   /* CEDS00000384 */
                    :TS_REC.EFF_DATE,
                    :TS_REC.END_DATE,
                    :TS_REC.LAST_CHANGE_DATE,
                    :TS_REC.SLVLCD2 :NUL690I,              /*RB01298*/
                    :TS_REC.RULE :NUL690J;                 /*RB01298*/

   IF CNTRY_FLAG = TRUE THEN
     EXEC SQL  FETCH C_0690
               INTO :TS_REC.CTRY_NO,
                    :TS_REC.P_TYPE,
                    :TS_REC.MODEL,
                    :TS_REC.B_WARR,
                    :TS_REC.SLVLCD :NUL690E,  /* CEDS00000384 */
                    :TS_REC.EFF_DATE,
                    :TS_REC.END_DATE,
                    :TS_REC.LAST_CHANGE_DATE,
                    :TS_REC.SLVLCD2 :NUL690I,              /*RB01298*/
                    :TS_REC.RULE :NUL690J;                 /*RB01298*/

   IF CNTRY_T_FLAG = TRUE THEN
     EXEC SQL  FETCH CT_0690
               INTO :TS_REC.CTRY_NO,
                    :TS_REC.P_TYPE,
                    :TS_REC.MODEL,
                    :TS_REC.B_WARR,
                    :TS_REC.SLVLCD :NUL690E,   /* CEDS00000384 */
                    :TS_REC.EFF_DATE,
                    :TS_REC.END_DATE,
                    :TS_REC.LAST_CHANGE_DATE,
                    :TS_REC.SLVLCD2 :NUL690I,              /*RB01298*/
                    :TS_REC.RULE :NUL690J;                 /*RB01298*/

   IF CNTRY_TM_FLAG = TRUE THEN
     EXEC SQL  FETCH CTM_0690
               INTO :TS_REC.CTRY_NO,
                    :TS_REC.P_TYPE,
                    :TS_REC.MODEL,
                    :TS_REC.B_WARR,
                    :TS_REC.SLVLCD :NUL690E,   /* CEDS00000384 */
                    :TS_REC.EFF_DATE,
                    :TS_REC.END_DATE,
                    :TS_REC.LAST_CHANGE_DATE,
                    :TS_REC.SLVLCD2 :NUL690I,              /*RB01298*/
                    :TS_REC.RULE :NUL690J;                 /*RB01298*/

     IF (SQLCODE = 0) THEN
     DO;
       EXEC CICS WRITEQ TS QUEUE(TS_Q) FROM(TS_REC);
       TS_CNT = TS_CNT + 1;
     END;

     IF (SQLCODE Â¬= 0) THEN
     DO;
       OK_FLAG = FALSE;
     END;
 END;

 IF TS_CNT = 0 THEN
 DO;
   IF (RCBM31I.S_FW_SELI  Â¬= '') THEN
   DO;
   RCBM31I.S_FW_SELL = -1;
   RCBM31O.MSGLNBO = 'O171 ' || ERR_O171;
   END;

   IF (RCBM31I.C_FW_SELI  Â¬= '') THEN
   DO;
   RCBM31I.C_FW_SELL = -1;
   RCBM31O.MSGLNBO = 'O172 ' || ERR_O172;
   END;

   IF (RCBM31I.S_FW_SELI  Â¬= ''
    &  RCBM31I.TYPE_SELI  Â¬= '') THEN
   DO;
   RCBM31I.S_FW_SELL = -1;
   RCBM31I.TYPE_SELL = -1;
   RCBM31O.MSGLNBO   = 'O173 ' || ERR_O173;
   END;

   IF  RCBM31I.S_FW_SELI  Â¬= ''
    & (RCBM31I.TYPE_SELI  Â¬= ''
    &  RCBM31I.MODL_SELI  Â¬= '') THEN
   DO;
   RCBM31I.S_FW_SELL = -1;
   RCBM31I.TYPE_SELL = -1;
   RCBM31I.MODL_SELL = -1;
   RCBM31O.MSGLNBO   = 'O174 ' || ERR_O174;
   END;

   IF (RCBM31I.C_FW_SELI  Â¬= ''
    &  RCBM31I.TYPE_SELI  Â¬= '') THEN
   DO;
   RCBM31I.C_FW_SELL = -1;
   RCBM31I.TYPE_SELL = -1;
   RCBM31O.MSGLNBO   = 'O175 ' || ERR_O175;
   END;

   IF  RCBM31I.C_FW_SELI  Â¬= ''
    & (RCBM31I.TYPE_SELI  Â¬= ''
    &  RCBM31I.MODL_SELI  Â¬= '') THEN
   DO;
   RCBM31I.C_FW_SELL = -1;
   RCBM31I.TYPE_SELL = -1;
   RCBM31I.MODL_SELL = -1;
   RCBM31O.MSGLNBO   = 'O176 ' || ERR_O176;
   END;
   CALL RCBC31M_SEND_MAP;
 END;

0END RCBC31M_GET_FW;
1/********************************************************************/
 /* CHECK FOR RCBT0400 RECORD                                        */
 /********************************************************************/
0RCBC31M_CHECK_400: PROC;

 T400_FLAG             = FALSE;
 WRK_REC_COUNT         = 0;
 WRK_PRODUCT_TYPE      = RCBM31I.PRD_TYPEI(I);

 IF (RCBM31I.MODELI(I) = '***'|
     RCBM31I.MODELI(I) = ''   )
 THEN WRK_MODEL_NUMBER = '';
 ELSE
    WRK_MODEL_NUMBER   = RCBM31I.MODELI(I);

 IF STAND_FW_FLAG  = TRUE |
    STAND_T_FLAG   = TRUE |
    STAND_TM_FLAG  = TRUE   THEN
 DO;
 EXEC SQL
   SELECT COUNT(*)
   INTO :WRK_REC_COUNT
   FROM RCBV0400_PO_MOD1
   WHERE PRODUCT_TYPE   = :WRK_PRODUCT_TYPE
   AND   MODEL_NUMBER   = :WRK_MODEL_NUMBER;
 END;

 SELECT(SQLCA.SQLCODE);
   WHEN(0);
   OTHERWISE
   DO;
     RCBM31O.MSGLNBO = 'DB2 ERROR ' || SQLCA.SQLCODE || ' OCCURED
   while accessing RCBT0400';
     CALL RCBC31M_SEND_MAP_CSR;
   END;
 END;

 IF CNTRY_FLAG     = TRUE |
    CNTRY_T_FLAG   = TRUE |
    CNTRY_TM_FLAG  = TRUE   THEN
 DO;
 EXEC SQL
   SELECT COUNT(*)
   INTO :WRK_REC_COUNT
   FROM RCBV0400_PO_MOD1
   WHERE COUNTRY_NUMBER = :WRK_COUNTRY_NUMBER
   AND   PRODUCT_TYPE   = :WRK_PRODUCT_TYPE
   AND   MODEL_NUMBER   = :WRK_MODEL_NUMBER;
 END;
 SELECT(SQLCA.SQLCODE);
   WHEN(0);
   OTHERWISE
   DO;
     RCBM31O.MSGLNBO = 'DB2 ERROR ' || SQLCA.SQLCODE || ' OCCURED
     while accessing RCBT0400';
     CALL RCBC31M_SEND_MAP_CSR;
   END;
 END;

 IF WRK_REC_COUNT Â¬= 0 THEN
 DO;
   T400_FLAG = TRUE;
 END;
 ELSE
   DO;
   RCBM31O.MSGLNBO      = 'O187 ' || ERR_O187;
   RCBM31O.PRD_TYPEC(I) = DFHRED;
   RCBM31I.PRD_TYPEL(I) = -1;
   RCBM31O.MODELC(I)    = DFHRED;
   RCBM31I.MODELL(I)    = -1;
   CALL RCBC31M_SEND_MAP_CSR;
   END;

0END RCBC31M_CHECK_400;
1/********************************************************************/
 /* CHECK FOR SLC  FROM RCBT0470 & RCBT0475 TABLES                   */
 /********************************************************************/
0RCBC31M_CHECK_SLC: PROC;

 SLC_FLAG              = FALSE;
 WRK_REC_COUNT1        = 0;

 IF  RCBM31I.SLCI(I) = ''  THEN
     WRK_SLC         = '';
 ELSE
     WRK_SLC         = RCBM31I.SLCI(I);

 IF (STAND_FW_FLAG  = TRUE |         /* STANDARD FW SLC FROM 470 TABLE*/
     STAND_T_FLAG   = TRUE |
     STAND_TM_FLAG  = TRUE |
     CNTRY_FLAG     = TRUE |
     CNTRY_T_FLAG   = TRUE |
     CNTRY_TM_FLAG  = TRUE ) &
     WRK_SLC       Â¬='' THEN
 DO;
 EXEC SQL
   SELECT COUNT(*)
   INTO :WRK_REC_COUNT1
      FROM  RCBV0470_SERV_COND
      WHERE SERVICE_LVL_CODE  = :WRK_SLC;
 END;
 SELECT(SQLCODE);
  WHEN(0);
  OTHERWISE
      DO;
      RCBM31O.MSGLNBO = 'DB2 ERROR ' || SQLCA.SQLCODE || ' OCCURED
      while accessing RCBT0470';
      CALL RCBC31M_SEND_MAP_CSR;
      END;
  END;

 IF WRK_REC_COUNT1 Â¬= 0 | WRK_SLC  ='' THEN
 DO;
   SLC_FLAG = TRUE;
 END;
 ELSE
   DO;
   RCBM31O.MSGLNBO      = 'O188 ' || ERR_O188;
   RCBM31O.SLCC(I)      = DFHRED;
   RCBM31I.SLCL(I)      = -1;
   CALL RCBC31M_SEND_MAP_CSR;
   END;

0END RCBC31M_CHECK_SLC;
1/********************************************************************/
 /* CHECK FOR SLC2 FROM RCBT0470 & RCBT0475 TABLES     SOC RB01298   */
 /********************************************************************/
0RCBC31M_CHECK_SLC2: PROC;

 SLC2_FLAG             = FALSE;
 WRK_REC_COUNT1        = 0;

 IF  RCBM31I.SLC2I(I) = ''  THEN
     WRK_SLC2         = '';
 ELSE
     WRK_SLC2         = RCBM31I.SLC2I(I);

 IF (STAND_FW_FLAG  = TRUE |        /* STANDARD HB SLC2 FROM 470 TABLE*/
     STAND_T_FLAG   = TRUE |
     STAND_TM_FLAG  = TRUE |
     CNTRY_FLAG     = TRUE |
     CNTRY_T_FLAG   = TRUE |
     CNTRY_TM_FLAG  = TRUE ) &
     WRK_SLC2      Â¬='' THEN
 DO;
 EXEC SQL
   SELECT COUNT(*)
   INTO :WRK_REC_COUNT1
      FROM  RCBV0470_SERV_COND
      WHERE SERVICE_LVL_CODE  = :WRK_SLC2;
 END;
 SELECT(SQLCODE);
  WHEN(0);
  OTHERWISE
      DO;
      RCBM31O.MSGLNBO = 'DB2 ERROR ' || SQLCA.SQLCODE || ' OCCURED
      while accessing RCBT0470';
      CALL RCBC31M_SEND_MAP_CSR;
      END;
  END;

 IF WRK_REC_COUNT1 Â¬= 0 | WRK_SLC2 ='' THEN
 DO;
   SLC2_FLAG = TRUE;
 END;
 ELSE
   DO;
   RCBM31O.MSGLNBO      = 'O190 ' || ERR_O190;
   RCBM31O.SLC2C(I)      = DFHRED;
   RCBM31I.SLC2L(I)      = -1;
   CALL RCBC31M_SEND_MAP_CSR;
   END;

0END RCBC31M_CHECK_SLC2;                               /*EOC RB01298*/
1/********************************************************************/
 /*      UPDATE T690 RECORD                                          */
 /********************************************************************/
0RCBC31M_UPDATE_FW: PROC;

 CALL RCBC31M_CHECK_PERIOD;
 IF UPDATE_FLAG = TRUE
  & T400_FLAG   = TRUE
  & SLC_FLAG    = TRUE
 THEN DO;
    RCB690S             = '';
    UPD_TYPE            = 'Y';
    UPD_MODEL           = 'Y';
    UPD_BRAND_WARRANTY  = 'Y';
    UPD_SERVICE_LVL_CD  = 'Y';
    UPD_EFFECTIVE_DATE  = 'Y';
    UPD_END_DATE        = 'Y';
    UPD_SERVICE_LVL_CD_2 = 'Y';                            /*RB01298*/
    UPD_RULE            = 'Y';                             /*RB01298*/

    EXEC CICS READQ TS QUEUE(TS_Q)
                           INTO(TS_REC) ITEM(I);
    WRK_B_WARR                       = TS_REC.B_WARR;

    IF
     ((RCBM31I.BRD_WARRI(I)         Â¬= WRK_B_WARR)
     |(RCBM31I.SLCI(I)              Â¬= TS_REC.SLVLCD)
     |(RCBM31I.EFF_DATEI(I)         Â¬= TS_REC.EFF_DATE)
     |(RCBM31I.END_DATEI(I)         Â¬= TS_REC.END_DATE)
     |(RCBM31I.SLC2I(I)             Â¬= TS_REC.SLVLCD2)     /*RB01298*/
     |(RCBM31I.RULEI(I)             Â¬= TS_REC.RULE)) THEN  /*RB01298*/
     DO;
     END;
    ELSE
     DO;
       RCBM31O.MSGLNBO    = 'O053 ' || ERR_O053; /* NO UPDATES */
       CALL RCBC31M_SEND_MAP;
     END;

    RCB690S.PRODUCT_TYPE       = RCBM31I.PRD_TYPEI(I);

    IF RCBM31I.MODELI(I)       = ''  THEN
       RCB690S.MODEL_NUMBER    = '***';
    ELSE
       RCB690S.MODEL_NUMBER    = RCBM31I.MODELI(I);

    RCB690S.BRAND_WARRANTY_MNT = RCBM31I.BRD_WARRI(I);

    IF RCBM31I.SLCI(I)         = ''
    THEN
       UPD_SERVICE_LVL_CD      = 'N';
    ELSE
       RCB690S.SERVICE_LVL_CODE= RCBM31I.SLCI(I);

    RCB690S.EFFECTIVE_DATE     = RCBM31I.EFF_DATEI(I);
    RCB690S.END_DATE           = RCBM31I.END_DATEI(I);

    IF (STAND_FW_FLAG  = TRUE |
        STAND_T_FLAG   = TRUE |
        STAND_TM_FLAG  = TRUE )
    THEN
    DO;
        WRK_COUNTRY_NUMBER = '***';
    END;

    IF RCBM31I.SLC2I(I)         = ''                   /*SOC RB01298*/
    THEN
       UPD_SERVICE_LVL_CD_2      = 'N';
    ELSE
       RCB690S.SERVICE_LVL_CODE_2= RCBM31I.SLC2I(I);
    RCB690S.RULE = RCBM31I.RULEI(I);                   /*EOC RB01298*/

    EXEC SQL
       UPDATE RCBV0690_FLEX_WARR
       SET SERVICE_LVL_CODE   = :RCB690S.SERVICE_LVL_CODE,
           BRAND_WARRANTY_MNT = :RCB690S.BRAND_WARRANTY_MNT,
           EFFECTIVE_DATE     = :RCB690S.EFFECTIVE_DATE,
           END_DATE           = :RCB690S.END_DATE,
           LAST_CHANGE_DATE   = :WRK_DATE,
           SERVICE_LVL_CODE_2 = :RCB690S.SERVICE_LVL_CODE_2,/*RB01298*/
           RULE               = :RCB690S.RULE               /*RB01298*/
       WHERE COUNTRY_NUMBER   = :WRK_COUNTRY_NUMBER
         AND PRODUCT_TYPE     = :RCB690S.PRODUCT_TYPE
         AND MODEL_NUMBER     = :RCB690S.MODEL_NUMBER
         AND ( :RCB690S.EFFECTIVE_DATE  BETWEEN
                    EFFECTIVE_DATE     AND    END_DATE
            OR :RCB690S.END_DATE        BETWEEN
                    EFFECTIVE_DATE     AND    END_DATE );

    SELECT (SQLCA.SQLCODE);
       WHEN (0);
       WHEN (100)
       DO;
          CALL RCBC31M_PROTECT_MAP;
          RCBM31O.MSGLNBO = 'Record not found in RCBT0690 for update';
          RCBM31O.ACTIONC(I) = DFHRED;
          RCBM31I.ACTIONL(I) = -1;
          CALL RCBC31M_SEND_MAP_CSR;
       END;
       OTHERWISE
       DO;
          CALL RCBC31M_PROTECT_MAP;
          PIC_EXPLAIN = SQLCA.SQLCODE;
          RCBM31O.MSGLNBO = 'DB2 ERROR ' || PIC_EXPLAIN || ' OCCURED
          while updating RCBT0690';
          RCBM31O.ACTIONC(I) = DFHRED;
          RCBM31I.ACTIONL(I) = -1;
          CALL RCBC31M_SEND_MAP_CSR;
       END;
    END;
 END;
 ELSE DO;
    CALL RCBC31M_SEND_MAP_CSR;
 END;

   IF WRK_COUNTRY_NUMBER = '***' THEN
     DO;
      WRK_COUNTRY_NUMBER = HEADER.IOPUCTY;
     END;

 T690_UPD_FLAG = TRUE;

0END RCBC31M_UPDATE_FW;
1/********************************************************************/
 /*      CREATE T690 RECORD                                          */
 /********************************************************************/
0RCBC31M_DEFINE_FW: PROC;

   CALL RCBC31M_CHECK_PERIOD_INSERT;
 IF INSERT_FLAG = TRUE
  & T400_FLAG   = TRUE
  & SLC_FLAG    = TRUE  THEN
 DO;
    RCB690S                   = '';
    RCB690SI.INDNULL(*)       = 0;

 IF (CNTRY_FLAG      = TRUE    |
     CNTRY_T_FLAG    = TRUE    |
     CNTRY_TM_FLAG   = TRUE     ) THEN
    RCB690S.COUNTRY_NUMBER = RCBM31I.COUNTRYI;

 IF (STAND_FW_FLAG   = TRUE    |
     STAND_T_FLAG    = TRUE    |
     STAND_TM_FLAG   = TRUE     ) THEN
    RCB690S.COUNTRY_NUMBER = '***';

    RCB690S.PRODUCT_TYPE       = RCBM31I.PRD_TYPEI(I);

 IF RCBM31I.MODELI(I)          = ''  THEN
    RCB690S.MODEL_NUMBER       = '***';
  ELSE
    RCB690S.MODEL_NUMBER       = RCBM31I.MODELI(I);

    RCB690S.BRAND_WARRANTY_MNT = RCBM31I.BRD_WARRI(I);

 IF RCBM31I.SLCI(I)            = '' THEN
    DO;
    RCB690S.SERVICE_LVL_CODE   = '';
    END;
 ELSE
    RCB690S.SERVICE_LVL_CODE   = RCBM31I.SLCI(I);

    RCB690S.EFFECTIVE_DATE     = RCBM31I.EFF_DATEI(I);
    RCB690S.END_DATE           = RCBM31I.END_DATEI(I);
    RCB690S.LAST_CHANGE_DATE   = WRK_DATE;
 IF RCBM31I.SLC2I(I)        = '' THEN                  /*SOC RB01298*/
    DO;
    RCB690S.SERVICE_LVL_CODE_2  = '';
    END;
 ELSE
    RCB690S.SERVICE_LVL_CODE_2  = RCBM31I.SLC2I(I);
    RCB690S.RULE = RCBM31I.RULEI(I);                   /*EOC RB01298*/


    EXEC SQL
         INSERT INTO RCBV0690_FLEX_WARR
           (COUNTRY_NUMBER
           ,PRODUCT_TYPE
           ,MODEL_NUMBER
           ,BRAND_WARRANTY_MNT
           ,SERVICE_LVL_CODE
           ,EFFECTIVE_DATE
           ,END_DATE
           ,LAST_CHANGE_DATE
           ,SERVICE_LVL_CODE_2                            /*RB01298*/
           ,RULE)                                         /*RB01298*/
        VALUES (:RCB690S:RCB690SI.INDNULL);
    SELECT (SQLCA.SQLCODE);
    WHEN (0);
    WHEN (-803)
    DO;
       RCBM31O.MSGLNBO = 'O183 ' || ERR_O183;
       RCBM31O.PRD_TYPEC(I)    = DFHRED;
       RCBM31O.MODELC(I)       = DFHRED;
       RCBM31I.ACTIONL(I)      = -1;
       CALL RCBC31M_SEND_MAP_CSR;
    END;
    OTHERWISE
    DO;
     CALL RCBC31M_PROTECT_MAP;
     PIC_EXPLAIN = SQLCA.SQLCODE;
     RCBM31O.MSGLNBO = 'DB2 ERROR ' || PIC_EXPLAIN || ' OCCURED
     while inserting into RCBT0690';
     RCBM31O.ACTIONC(I) = DFHRED;
     RCBM31I.ACTIONL(I) = -1;
     CALL RCBC31M_SEND_MAP_CSR;
    END;
    END;
    END;
 ELSE
   DO;
     CALL RCBC31M_SEND_MAP_CSR;
   END;

   IF WRK_COUNTRY_NUMBER = '***' THEN
     DO;
      WRK_COUNTRY_NUMBER = HEADER.IOPUCTY;
     END;

 T690_UPD_FLAG = TRUE;

0END RCBC31M_DEFINE_FW;
1/********************************************************************/
 /*      DELETE T690 RECORD                                          */
 /********************************************************************/
0RCBC31M_DELETE_FW: PROC;

 RCB690S            = '';
 UPD_TYPE           = 'Y';
 UPD_MODEL          = 'Y';
 UPD_BRAND_WARRANTY = 'Y';
 UPD_SERVICE_LVL_CD = 'Y';
 UPD_EFFECTIVE_DATE = 'Y';
 UPD_END_DATE       = 'Y';

 IF TOP_DEL_FLAG = TRUE THEN
 DO;
   RCB690S.PRODUCT_TYPE      = RCBM31I.PRD_TYPEI(I);
   RCB690S.MODEL_NUMBER      = RCBM31I.MODELI(I);
   RCB690S.EFFECTIVE_DATE    = RCBM31I.EFF_DATEI(I);

 IF (CNTRY_FLAG      = TRUE |
     CNTRY_T_FLAG    = TRUE |
     CNTRY_TM_FLAG   = TRUE  ) THEN
  WRK_COUNTRY_NUMBER = RCBM31I.COUNTRYI;

 IF (STAND_FW_FLAG   = TRUE |
     STAND_T_FLAG    = TRUE |
     STAND_TM_FLAG   = TRUE  ) THEN
  WRK_COUNTRY_NUMBER = '***';
   EXEC SQL
        DELETE FROM RCBV0690_FLEX_WARR
        WHERE COUNTRY_NUMBER  = :WRK_COUNTRY_NUMBER
          AND PRODUCT_TYPE    = :RCB690S.PRODUCT_TYPE
          AND MODEL_NUMBER    = :RCB690S.MODEL_NUMBER
          AND EFFECTIVE_DATE  = :RCB690S.EFFECTIVE_DATE;

   SELECT (SQLCA.SQLCODE);
     WHEN (0);
     WHEN (100)
     DO;
       CALL RCBC31M_PROTECT_MAP;
       RCBM31O.MSGLNBO = 'O186 ' || ERR_O186;
       RCBM31O.ACTIONC(I) = DFHRED;
       RCBM31I.ACTIONL(I) = -1;
       CALL RCBC31M_SEND_MAP_CSR;
     END;
     OTHERWISE
     DO;
       CALL RCBC31M_PROTECT_MAP;
       PIC_EXPLAIN = SQLCA.SQLCODE;
       RCBM31O.MSGLNBO = 'DB2 ERROR ' || PIC_EXPLAIN || ' OCCURED
       while deleting from RCBT0690';
       RCBM31O.ACTIONC(I) = DFHRED;
       RCBM31I.ACTIONL(I) = -1;
       CALL RCBC31M_SEND_MAP_CSR;
     END;
   END;

   IF WRK_COUNTRY_NUMBER = '***' THEN
     DO;
      WRK_COUNTRY_NUMBER = HEADER.IOPUCTY;
     END;

   F5_OK_FLAG    = FALSE;
   T690_UPD_FLAG = TRUE;
   RETURN;
 END;

0END RCBC31M_DELETE_FW;
1/********************************************************************/
 /*      CREATE T560 RECORD                                          */
 /********************************************************************/
0RCBC31M_UPD_T560: PROC;

 EXEC SQL SET :WRK_TIME_IN = CURRENT TIMESTAMP;

 WRKMAP_DATA = ' ';
 WRKMAP.PRODUCT_TYPE       = RCBM31I.PRD_TYPEI(I);
 WRKMAP.MODEL_NUMBER       = RCBM31I.MODELI(I);
 WRKMAP.BRAND_WARRANTY_MNT = RCBM31I.BRD_WARRI(I);
 WRKMAP.SERVICE_LVL_CD     = RCBM31I.SLCI(I);
 WRKMAP.EFFECTIVE_DATE     = RCBM31I.EFF_DATEI(I);
 WRKMAP.END_DATE           = RCBM31I.END_DATEI(I);
 WRKMAP.LAST_CHANGE_DATE   = WRK_DATE;
 WRKMAP.SERVICE_LVL_CD_2    = RCBM31I.SLC2I(I);            /*RB01298*/
 WRKMAP.RULE               = RCBM31I.RULEI(I);             /*RB01298*/

 RCB560S                   = ' ';

 IF (STAND_FW_FLAG = TRUE |
     STAND_T_FLAG  = TRUE |
     STAND_TM_FLAG = TRUE  ) THEN
    WRK_COUNTRY_NUMBER = '***';

 IF (CNTRY_FLAG    = TRUE |
     CNTRY_T_FLAG  = TRUE |
     CNTRY_TM_FLAG = TRUE  ) THEN
    WRK_COUNTRY_NUMBER = RCBM31I.COUNTRYI;

 RCB560S.COUNTRY_NUMBER    = WRK_COUNTRY_NUMBER;
 RCB560S.TXN_CODE          = 'RCBTXN31';
 RCB560S.TIMESTAMP         = WRK_TIME_IN;
 RCB560S.USERID            = HEADER.USERID;
 RCB560S.ACTION            = TMP_ACTION(I);
 RCB560S.DATA              = WRKMAP_DATA;

 EXEC SQL
      INSERT INTO RCBV0560_XACTION
      (COUNTRY_NUMBER,
       TXN_CODE,
       TIMESTAMP,
       USERID,
       ACTION,
       DATA)
        VALUES (:RCB560S:RCB560SI.INDNULL);

 SELECT(SQLCA.SQLCODE);
   WHEN(0);
   OTHERWISE
   DO;
     CALL RCBC31M_PROTECT_MAP;
     RET_CODE = SQLCA.SQLCODE;
     SUB_CODE = SQLCA.SQLCABC;
     PIC_EXPLAIN = SQLCA.SQLCODE;
     RCBM31O.MSGLNBO = 'DB2 ERROR ' || PIC_EXPLAIN || ' OCCURED
     while updating RCBT0560';
     CALL RCBC31M_SEND_MAP_CSR;
   END;
 END;

0END RCBC31M_UPD_T560;
1/********************************************************************/
 /*      SEND HELP MAP                                               */
 /********************************************************************/
0RCBC31M_HELP_MAP: PROC;

 HEADER.NEXT = 'H1';

0EXEC CICS SEND
    MAP('FLEXWAR')
    MAPSET('RCBHELP')
    FREEKB
    ERASE;

0EXEC CICS RETURN
    TRANSID('RC31')
    COMMAREA(COMMAREA)
    LENGTH(CSTG(COMMAREA))
    RESP(RESPONSE)
    RESP2(CODE_EXPLAIN);

 SELECT(RESPONSE);                       /* CHECK RESPONSE           */
    WHEN(DFHRESP(NORMAL));
    WHEN(DFHRESP(LENGERR))               /* LENGTH ERROR             */

    DO;
      COMMAREA_LENGTH = EIBCALEN;
      EXEC CICS RETURN
         TRANSID('RC31')
         COMMAREA(COMMAREA)
         LENGTH(COMMAREA_LENGTH);
    END;

    OTHERWISE
    DO;
      RCBM31O.MSGLNBO = ERR_MESSAGE14;
      CALL RCBC31M_SEND_MAP_CSR;
    END;
 END;

0END RCBC31M_HELP_MAP;
1/********************************************************************/
 /*      SEND ERROR MAP                                              */
 /********************************************************************/
 RCBC31M_SEND_MAP_CSR: PROC;

   /*IF ADMIN_FLAG  = TRUE                           *//* SOC RB01338 */
   /* | UPD_OK_FLAG = TRUE THEN                                       */
   IF UPD_OK_FLAG = TRUE THEN
                                                       /* EOC RB01338 */
   DO;
     RCBM31O.PFLINEO = PFLINE1A;
     RCBM31O.SALINEO = SALINE;
   END;
   ELSE DO
     RCBM31O.PFLINEO = PFLINE1;
   END;

   IF (STAND_FW_FLAG   = TRUE
     |   CNTRY_FLAG    = TRUE) & OK_FLAG = TRUE
     & VERIFY(RCBM31I.ACTIONI(I), 'ACD') = 0 THEN
   DO I = 1 TO 14;
     RCBM31O.PRD_TYPEA(I)         = DFHBMPRF;
     RCBM31O.MODELA(I)            = DFHBMPRF;
   END;

 EXEC CICS SEND
    MAP('RCBM31')
    MAPSET('RCBM31')
    CURSOR
    ERASE
    FREEKB;

 EXEC CICS RETURN
    TRANSID('RC31')
    COMMAREA(COMMAREA)
    LENGTH(CSTG(COMMAREA));

 END RCBC31M_SEND_MAP_CSR;
1/*******************************************************************/
 /*DO NOT CHANGE THIS PART, IT IS MEANT FOR ABR                     */
 /*******************************************************************/
0 %INCLUDE DAIFPLH ;                     /* COMPILE DATE/TIME STAMP */
  $DAIMOD (RCBC31M);                     /* MODULE TO BE COMPILED   */
0/*******************************************************************/
 /* END OF ABR BLOCK '                                              */
 /*******************************************************************/
0 END RCBC31M;