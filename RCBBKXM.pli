 /* RCBBKXM - MERGE RCBBKZ0(RCBBKA0+SLC) WITH RCBBKB0(WSU/MSU)       */ 00016039
 /*       *** APPLICABLE FOR CHIS800 AND BELOW VERSIONS ***          */ 00020000
 /********************************************************************/ 00030000
 /* 5695-153 (C) COPYRIGHT IBM EMEA WORLD TRADE CORPORATION 1991     */ 00040000
 /* LICENSED MATERIAL - PROGRAM PROPERTY OF IBM                      */ 00050000
 /* REFER TO COPYRIGHT INSTRUCTIONS: FORM G120-2083                  */ 00060000
 /********************************************************************/ 00070000
 /*                                                                  */ 00080000
 /* MODULE NAME      : RCBBKXM                                       */ 00090000
 /*                                                                  */ 00100000
 /* PROGRAM NAME     : RCBBKXP                                       */ 00110000
 /*                                                                  */ 00120000
 /* LANGUAGE         : PLISQL                                        */ 00130000
 /*                                                                  */ 00140000
 /* TYPE             : BATCH                                         */ 00150000
 /*                                                                  */ 00160000
 /* DESCRIPTION      : MERGE RCBBKZ0 (SLC ENRICHED RCBBKA0) WITH     */ 00170000
 /*                    RCBBKB0 (WSU/MSU) AND CALL USER EXIT RCBBK6U  */ 00180000
 /*                    TO ALLOW GE0 TO UPDATE WSU/MSU UPGRADED       */ 00190000
 /*                    CONTRACT RECORD                               */ 00200000
 /*                                                                  */ 00210000
 /* INPUT            : RCBBKZ0 - SLC ENRICHED RCBBKA0 FILE           */ 00220000
 /*                    RCBBKB0 - WSU/MSU DATA EXTRACTED FROM CHIS    */ 00230000
 /*                                                                  */ 00240000
 /*                                                                  */ 00250000
 /* OUTPUT           : RCBBKX0 - SLC & WSU/MSU ENRICHED RCBBKA0 FILE */ 00260000
 /*                    RCB0M10 MESSAGES ISSUED                       */ 00270000
 /*                                                                  */ 00280000
 /* EXTERNAL MODULES : RCB0E1M   COMMON ERROR ROUTINE                */ 00290000
 /*                    RCB0M1M   COMMON MESSAGE ROUTINE              */ 00300000
 /*                    RCB0T1M   RETRIEVE SYSTEM DATE                */ 00310000
 /*                    RCB004M   CHECK/CONVERT DATE                  */ 00320000
 /*                    RCB018M   COMPUTE HASH TOTAL                  */ 00330000
 /*                    RCB019M   RETRIEVE COUNTRY NUMBERS            */ 00340000
 /*                    RCB020M   RETRIEVE RUN DATE                   */ 00350000
 /*                    RCBI50M   REFERENCE PARAMETER                 */ 00360000
 /*                    RCBF50M   INSERT PARAMETER                    */ 00370000
 /*                    RCBG50M   UPDATE PARAMETER                    */ 00380000
 /*                    RCBBK6U   USER EXIT FOR UPGRADED CONTRACT     */ 00390000
 /*                                                                  */ 00400000
 /* MESSAGES         : I050 / 0002 / 0003 / 0004 / 0005 / 0007       */ 00410000
 /*                    0012 / 0013 / 0014 / 0018 / 0175 / 0180       */ 00420000
 /*                    0181 / 0184 / 0198 / 0199 / 0201 / 0237       */ 00430000
 /*                    0238 / 0239 / 0245 / 0246 / 0247 / 0248       */ 00440000
 /*                    0249 / 0250 / 0251 / 0252 / 0257 / 0258       */ 00450000
 /*                    0259 / 9999                                   */ 00460000
 /*                                                                  */ 00470000
 /* DEPENDENCIES     : HAS TO BE NORMAL COMPLETED BEFORE RCBBK7M     */ 00480000
 /*                                                                  */ 00490000
 /* FREQUENCY        : USER DEPENDENT (ON REQUEST)                   */ 00500000
 /*                                                                  */ 00510000
 /* MAINTENANCE LOG :                                                */ 00520000
 /* ---------------                                                  */ 00530000
 /*                                                                  */ 00540000
 /* DATE       | WORK-ITEMNO. | DESCRIPTION                          */ 00550000
 /* ---------------------------------------------------------------- */ 00560000
 /* 2009-06-26 | RB01301      | CEDS ALIGNMENT TO CHIS810 - BAU      */ 00570000
 /*            |              | SERVICE EXTENSIONS                   */ 00580000
 /********************************************************************/ 00590000
1RCBBKXM: PROC                                                          00600000
          OPTIONS (MAIN)                                                00610000
          REORDER;                                                      00620000
0DEFAULT RANGE (*) STATIC;                                              00630000
1/********************************************************************/ 00640000
 /* FILE DECLARATIONS (NON GSAM)                                     */ 00650000
 /********************************************************************/ 00660000
0DCL RCBBKZ0  FILE RECORD INPUT;                                        00670000
0DCL RCBBKB0  FILE RECORD INPUT;                                        00680000
0DCL RCBBKX0  FILE RECORD OUTPUT;                                       00690000
1/********************************************************************/ 00700000
 /* EXTERNAL ENTRIES                                                 */ 00710000
 /********************************************************************/ 00720000
0DCL PLIXOPT   EXTERNAL                                                 00730000
               CHAR (30) VARYING INIT ('ISA(20K),NOSTAE');              00740000
 DCL RCB0E1M   ENTRY  EXTERNAL;          /* COMMON ERROR ROUTINE     */ 00750000
 DCL RCB004M   ENTRY  EXTERNAL;          /* CHECK/CONVERT DATE       */ 00760000
 DCL RCB0M1M   ENTRY  EXTERNAL;          /* COMMON MESSAGE ROUTINE   */ 00770000
 DCL RCB0T1M   ENTRY  EXTERNAL;          /* SYSTEM DATE              */ 00780000
 DCL RCB018M   ENTRY  EXTERNAL;          /* COMPUTE HASH TOTAL       */ 00790000
 DCL RCB019M   ENTRY  EXTERNAL;          /* RETRIEVE COUNTRY NUMBERS */ 00800000
 DCL RCB020M   ENTRY  EXTERNAL;          /* RETRIEVE RUN DATE        */ 00810000
 DCL RCBI50M   ENTRY  EXTERNAL;          /* REFERENCE PARAMETER      */ 00820000
 DCL RCBF50M   ENTRY  EXTERNAL;          /* INSERT PARAMETER         */ 00830000
 DCL RCBG50M   ENTRY  EXTERNAL;          /* UPDATE PARAMETER         */ 00840000
 DCL RCBBK6U   ENTRY  EXTERNAL;          /* USER EXIT TO UPDATE SLC  */ 00850000
                                         /* AND COVERAGE HOURS       */ 00860000
0/********************************************************************/ 00870000
 /* EXTERNAL PARAMETER INTERFACES                                    */ 00880000
 /********************************************************************/ 00890000
0DCL PTR_INT_AREA        PTR;                                           00900000
 DCL PTR_RETURN_AREA     PTR;                                           00910000
 DCL PTR_COUNTRY_AREA    PTR;                                           00920000
 DCL PTR_RUN_DATE_AREA   PTR;                                           00930000
 DCL PTR_DATE_AREA       PTR;                  /* RCB004M DATE CHECK */ 00940000
                                                                        00950000
0DCL 1 PARM_INT_AREA,                          /* INTERFACE AREA     */ 00960000
       %INCLUDE (RCBZ01S);;                                             00970000
0DCL 1 RETURN_AREA,                            /* RETURN AREA        */ 00980000
       %INCLUDE (RCBZ02S);;                                             00990000
0DCL 1 DATE_AREA,                              /* DATE AREA          */ 01000000
       %INCLUDE (RCBZ03S);;                                             01010000
0DCL 1 COUNTRY_AREA,                           /* COUNTRY AREA       */ 01020000
       %INCLUDE (RCBZ26S);;                                             01030000
0DCL 1 RUN_DATE_AREA,                          /* RUN DATE AREA      */ 01040000
       %INCLUDE (RCBZ28S);;                                             01050000
                                                                        01060000
0/********************************************************************/ 01070000
 /* POINTERS                                                         */ 01080000
 /********************************************************************/ 01090000
0DCL PTR_RCBBKZ0          PTR;                                          01100000
0DCL PTR_RCBBKB0          PTR;                                          01110000
0DCL PTR_RCBBKX0          PTR;                                          01120000
0DCL PTR_IMPOSED_MSU      PTR;                                          01130000
0DCL PTR_RCBV500          PTR;         /* PTR PARAMETER ROW          */ 01140000
0DCL PTR_RCBV500I         PTR;         /* PTR NULL-IND. PARAMETER    */ 01150000
1/********************************************************************/ 01160000
 /* DB2 TABLE STRUCTURES                                             */ 01170000
 /********************************************************************/ 01180000
                                                                        01190000
 DCL 1 TB_RCBV500,                     /* PARAMETER ROW              */ 01200000
       %INCLUDE (RCB500S);;                                             01210000
 DCL 1 TB_RCBV500_I,                   /* NULL-IND. PARAMETER        */ 01220000
       %INCLUDE (RCB500SI);;                                            01230000
                                                                        01240000
 DCL 1 TB_RCBV220,                                                      01250000
      %INCLUDE (RCB220S);;                                              01260000
 DCL 1 TB_RCBV220_I,                                                    01270000
      %INCLUDE (RCB220SI);;                                             01280000
                                                                        01290000
 DCL 1 TB_RCBV051,                                                      01300000
      %INCLUDE (RCB051S);;                                              01310000
 DCL 1 TB_RCBV051_I,                                                    01320000
      %INCLUDE (RCB051SI);;                                             01330000
1/********************************************************************/ 01340000
 /*  PROGRAM CONTROL PARAMETERS                                      */ 01350000
 /********************************************************************/ 01360000
0DCL 1 TB_RCB035        BASED(PTR_RCBV500),        /* FILE SEQUENCE  */ 01370000
       %INCLUDE (RCBP35S);;                                             01380000
0DCL 1 RCB035,                                                          01390000
       %INCLUDE (RCBP35S);;                                             01400000
 /********************************************************************/ 01410000
 /*  RECORD STRUCTURES FOR INPUT FILES                               */ 01420000
 /********************************************************************/ 01430000
                                                          /* RCBBKZ0 */ 01440000
0DCL 1 RCBBKZ0_REC             CHAR (240);                              01450000
0DCL 1 RCBBKZ0_REC_ARRAY(25)   CHAR (240);                              01460000
                                                                        01470000
 DCL 1 RCBBKZ0_C000            BASED (PTR_RCBBKZ0),                     01480000
       %INCLUDE (RCBBKAS1);;                                            01490000
                                                                        01500000
 DCL 1 RCBBKZ0_C001            BASED (PTR_RCBBKZ0),                     01510000
       %INCLUDE (RCBBKAS2);;                                            01520000
                                                                        01530000
 DCL 1 RCBBKZ0_C002            BASED (PTR_RCBBKZ0),                     01540000
       %INCLUDE (RCBBKAS3);;                                            01550000
                                                                        01560000
 DCL 1 RCBBKZ0_C003            BASED (PTR_RCBBKZ0),                     01570000
       %INCLUDE (RCBBKAS4);;                                            01580000
                                                                        01590000
 DCL 1 RCBBKZ0_C998            BASED (PTR_RCBBKZ0),                     01600000
       %INCLUDE (RCBBKAS5);;                                            01610000
                                                                        01620000
 DCL 1 RCBBKZ0_C999            BASED (PTR_RCBBKZ0),                     01630000
       %INCLUDE (RCBBKAS6);;                                            01640000
                                                                        01650000
 DCL RCBBKZ0_C002_COPY    LIKE RCBBKZ0_C002;                            01660000
 DCL RCBBKZ0_C002_COPY1   LIKE RCBBKZ0_C002;                            01670000
                                                          /* RCBBKB0 */ 01680000
0DCL 1 RCBBKB0_REC             CHAR (271);                              01690000
0DCL 1 RCBBKB0_REC1            CHAR (240) BASED (PTR_RCBBKB0);          01700000
0DCL 1 RCBBKB0_REC_ARRAY(25)   CHAR (271);                              01710000
                                                                        01720000
 DCL 1 RCBBKB0_C000            BASED (PTR_RCBBKB0),                     01730000
       %INCLUDE (RCBBKBSH);;                                            01740000
                                                                        01750000
 DCL 1 RCBBKB0_C002            BASED (PTR_RCBBKB0),                     01760000
       %INCLUDE (RCBBKBS1);;                                            01770000
                                                                        01780000
 DCL 1 RCBBKB0_C999            BASED (PTR_RCBBKB0),                     01790000
       %INCLUDE (RCBBKBST);;                                            01800000
                                                                        01810000
 DCL 1 RCBBKB0_C002_COPY,        /* USED TO PASS RECORD TO USER EXIT */ 01820000
       %INCLUDE (RCBBKBS1);;                                            01830000
                                                                        01840000
 DCL 1 RCBBKB0_EXTENSION,           /* USED TO PASS KB0 ADDITIONAL   */ 01850000
       3 UPGRADE_TYPE     CHAR(01), /* INFORMATION TO RCBBK6U EXIT   */ 01860000
       3 IOBJNIK          CHAR(15),                                     01870000
       3 IUSCNIK          CHAR(15);                                     01880000
0/********************************************************************/ 01890000
 /*  RECORD STRUCTURES FOR OUTPUT FILES                              */ 01900000
 /********************************************************************/ 01910000
                                                          /* RCBBKX0 */ 01920000
0DCL 1 RCBBKX0_REC             CHAR (240);                              01930000
0DCL 1 RCBBKX0_REC_TEMP        CHAR (240);                              01940000
                                                                        01950000
 DCL 1 RCBBKX0_C001            BASED (PTR_RCBBKX0),                     01960000
       %INCLUDE (RCBBKAS2);;                                            01970000
                                                                        01980000
 DCL 1 RCBBKX0_C002            BASED (PTR_RCBBKX0),                     01990000
       %INCLUDE (RCBBKAS3);;                                            02000000
                                                                        02010000
 DCL 1 RCBBKX0_C998            BASED (PTR_RCBBKX0),                     02020000
       %INCLUDE (RCBBKAS5);;                                            02030000
                                                                        02040000
 DCL 1 RCBBKX0_C999            BASED (PTR_RCBBKX0),                     02050000
       %INCLUDE (RCBBKAS6);;                                            02060000
                                                                        02070000
0/********************************************************************/ 02080000
 /*  STRUCTURES                                                      */ 02090000
 /********************************************************************/ 02100000
0DCL 1 OVERLAP_AREA,                                                    02110000
       3 START_DATE_1       CHAR (10),                                  02120000
       3 END_DATE_1         CHAR (10),                                  02130000
       3 START_DATE_2       CHAR (10),                                  02140000
       3 END_DATE_2         CHAR (10),                                  02150000
       3 START_DATE_BEFORE  CHAR (10),                                  02160000
       3 END_DATE_BEFORE    CHAR (10),                                  02170000
       3 BEFORE_DATE_FROM   CHAR (01),                                  02180000
       3 START_DATE_OVERLAP CHAR (10),                                  02190000
       3 END_DATE_OVERLAP   CHAR (10),                                  02200000
       3 TYPE_OF_OVERLAP    CHAR (01),                                  02210000
       3 START_DATE_AFTER   CHAR (10),                                  02220000
       3 END_DATE_AFTER     CHAR (10),                                  02230000
       3 AFTER_DATE_FROM    CHAR (01);                                  02240000
                                                                        02250000
0DCL 1 VALIDATE_C002,                                                   02260000
       2 KEY,                                                           02270000
         3 CTRYNO          CHAR (03),                                   02280000
         3 TYPE            CHAR (04),                                   02290000
         3 SERIAL          CHAR (09),                                   02300000
       2 EFF_DATE        CHAR (10),                                     02310000
       2 STOP_DATE       CHAR (10),                                     02320000
       2 VALIDATE_C002,                                                 02330000
            5 CUSTOMER     CHAR (08),                                   02340000
            5 SERV_START   CHAR (10),                                   02350000
            5 SERV_END     CHAR (10);                                   02360000
                                                                        02370000
0DCL 1 T220_ARRAY (25),                                                 02380000
       3 EFFECTIVE_DATE      CHAR (10),                                 02390000
       3 END_DATE            CHAR (10);                                 02400000
                                                                        02410000
0DCL 1 T220_ARRAY_SAVED (25),                                           02420000
       3 EFFECTIVE_DATE      CHAR (10),                                 02430000
       3 END_DATE            CHAR (10);                                 02440000
                                                                        02450000
0DCL 1 T220_WARR_COPY,                                                  02460000
       3 EFFECTIVE_DATE      CHAR (10),                                 02470000
       3 END_DATE            CHAR (10);                                 02480000
                                                                        02490000
0DCL 1 IMPOSED_MSU_REC1 (50)   CHAR (271);                              02500000
                                                                        02510000
0DCL 1 IMPOSED_MSU_REC (50)    BASED (PTR_IMPOSED_MSU),                 02520000
       %INCLUDE (RCBBKBS1);;                                            02530000
                                                                        02540000
0DCL 1 G_WRKMSG,                                                        02550000
       3 TXTFIELD_1     CHAR (25),                                      02560000
       3 TXTFIELD_2     CHAR (25),                                      02570000
       3 TXTFIELD_3     CHAR (25),                                      02580000
       3 TXTFIELD_4     CHAR (25),                                      02590000
       3 TXTFIELD_5     CHAR (25),                                      02600000
       3 TXTFIELD_6     CHAR (25),                                      02610000
       3 NUMFIELD_1     FIXED BIN(31),                                  02620000
       3 NUMFIELD_2     FIXED BIN(31),                                  02630000
       3 NUMFIELD_3     FIXED BIN(31),                                  02640000
       3 NUMFIELD_4     FIXED BIN(31);                                  02650000
0/********************************************************************/ 02660000
 /*  COUNTS                                                          */ 02670000
 /********************************************************************/ 02680000
0DCL 1 COUNT,                                                           02690000
       3 CNT_CTRY,                                                      02700000
         5 RCBBKB0           FIXED BIN (31),                            02710000
         5 RCBBKX0           FIXED BIN (31),                            02720000
         5 RCBBKZ0           FIXED BIN (31),                            02730000
         5 RCBBKB0_REJ       FIXED BIN (31),                            02740000
         5 RCBBKZ0_REJ       FIXED BIN (31),                            02750000
         5 RCBBKB0_SKP       FIXED BIN (31),                            02760000
         5 RCBBKZ0_SKP       FIXED BIN (31),                            02770000
         5 RCBBKB0_NXT       FIXED BIN (31),                            02780000
         5 RCBBKZ0_REP       FIXED BIN (31),                            02790000
         5 RCBBKB0_REP       FIXED BIN (31),                            02800000
         5 RCBBKZ0_REP_REJ   FIXED BIN (31),                            02810000
         5 RCBBKB0_REP_REJ   FIXED BIN (31),                            02820000
         5 RCBBKZ0_REP_SKP   FIXED BIN (31),                            02830000
         5 RCBBKB0_REP_SKP   FIXED BIN (31),                            02840000
         5 RCBBKZ0_HASH      FIXED DEC (15,0),                          02850000
         5 RCBBKX0_HASH      FIXED DEC (15,0),                          02860000
       3 CNT_TOT,                                                       02870000
         5 RCBBKB0           FIXED BIN (31),                            02880000
         5 RCBBKX0           FIXED BIN (31),                            02890000
         5 RCBBKZ0           FIXED BIN (31),                            02900000
         5 RCBBKB0_REJ       FIXED BIN (31),                            02910000
         5 RCBBKZ0_REJ       FIXED BIN (31),                            02920000
         5 RCBBKB0_SKP       FIXED BIN (31),                            02930000
         5 RCBBKZ0_SKP       FIXED BIN (31),                            02940000
         5 RCBBKZ0_HASH      FIXED DEC (15,0),                          02950000
         5 RCBBKX0_HASH      FIXED DEC (15,0);                          02960000
                                                                        02970000
 DCL WRK_CNT_RCBBKX0       PIC '(10)9';                                 02980000
 DCL KZ0_ARRAY_COUNT       FIXED BIN (31) INIT('0');                    02990000
 DCL KB0_ARRAY_COUNT       FIXED BIN (31) INIT('0');                    03000000
 DCL T220_ARRAY_COUNT      FIXED BIN (31) INIT('0');                    03010000
 DCL MSU_ARRAY_COUNT       FIXED BIN (31) INIT('0');                    03020000
                                                                        03030000
 DCL I                     FIXED BIN (31) INIT('0');                    03040000
 DCL J                     FIXED BIN (31) INIT('0');                    03050000
 DCL K                     FIXED BIN (31) INIT('0');                    03060000
 DCL L                     FIXED BIN (31) INIT('0');                    03070000
                                                                        03080000
 DCL CNT_PIC9              PIC '(9)9';                                  03090000
 DCL CNT_PIC15             PIC '(15)9';                                 03100000
0/********************************************************************/ 03110000
 /*  BIT SWITCHES                                                    */ 03120000
 /********************************************************************/ 03130000
0DCL TRUE                    BIT (1)       INIT('1'B);                  03140000
 DCL FALSE                   BIT (1)       INIT('0'B);                  03150000
 DCL SWITCH_EXIT             BIT (1)       INIT('1'B);                  03160000
 DCL SWITCH_INVALID          BIT (1)       INIT('0'B);                  03170000
 DCL SWITCH_INVALID_UPGD     BIT (1)       INIT('0'B);                  03180000
 DCL SWITCH_RCBBKZ0_HEADER   BIT (1)       INIT('0'B);                  03190000
 DCL SWITCH_RCBBKB0_HEADER   BIT (1)       INIT('0'B);                  03200000
 DCL SWITCH_WRITE_TRAILER    BIT (1)       INIT('1'B);                  03210000
 DCL SWITCH_PROCESS_WSU      BIT (1)       INIT('0'B);                  03220000
 DCL SWITCH_ADAPT_MSU        BIT (1)       INIT('0'B);                  03230000
 DCL SWITCH_CHECK_PI_WARR    BIT (1)       INIT('0'B);                  03240000
 DCL SWITCH_READ_PI_WARR     BIT (1)       INIT('1'B);                  03250000
 DCL SWITCH_MSG_0246         BIT (1)       INIT('1'B);                  03260000
 DCL SWITCH_USER_EXIT_6      BIT (1)       INIT('1'B);                  03270000
                                                                        03280000
 DCL 1 ERROR_SWITCH(4)         BIT (1);                                 03290000
0/********************************************************************/ 03300000
 /*  PROGRAM LOOP CONTROLLERS                                        */ 03310000
 /********************************************************************/ 03320000
 DCL 1 SK_CTRY,                                                         03330000
       3 EOF               CHAR (01),                                   03340000
       3 CTRYNO            CHAR (03);                                   03350000
 DCL SK_CTRY1              CHAR (04)  DEFINED (SK_CTRY);                03360000
                                                                        03370000
0DCL 1 SK_KZ0,                                                          03380000
       3 EOF               CHAR (01),                                   03390000
       3 CTRYNO            CHAR (03),                                   03400000
       3 TYPE              CHAR (04),                                   03410000
       3 SERIAL            CHAR (09);                                   03420000
                                                                        03430000
 DCL SK_KZ01               CHAR (04)  DEFINED (SK_KZ0);                 03440000
 DCL SK_KZ03               CHAR (17)  DEFINED (SK_KZ0);                 03450000
 DCL SK_KZ0_HW             CHAR (13)  DEFINED (SK_KZ0) POS(5);          03460000
                                                                        03470000
0DCL 1 SK_KB0,                                                          03480000
       3 EOF               CHAR (01),                                   03490000
       3 CTRYNO            CHAR (03),                                   03500000
       3 TYPE              CHAR (04),                                   03510000
       3 SERIAL            CHAR (09);                                   03520000
                                                                        03530000
 DCL SK_KB01               CHAR (04)  DEFINED (SK_KB0);                 03540000
 DCL SK_KB03               CHAR (17)  DEFINED (SK_KB0);                 03550000
 DCL SK_KB0_TEMP1          CHAR (16)  DEFINED (SK_KB0) POS(2);          03560000
 DCL SK_KB0_HW             CHAR (13)  DEFINED (SK_KB0) POS(5);          03570000
                                                                        03580000
 DCL 1 SK_KZ0_OLD,                                                      03590000
       3 EOF               CHAR (01),                                   03600000
       3 CTRYNO            CHAR (03),                                   03610000
       3 TYPE              CHAR (04),                                   03620000
       3 SERIAL            CHAR (09);                                   03630000
                                                                        03640000
 DCL SK_KZ01_OLD           CHAR (04)  DEFINED (SK_KZ0_OLD);             03650000
 DCL SK_KZ03_OLD           CHAR (17)  DEFINED (SK_KZ0_OLD);             03660000
                                                                        03670000
 DCL 1 SK_KB0_OLD,                                                      03680000
       3 EOF               CHAR (01),                                   03690000
       3 CTRYNO            CHAR (03),                                   03700000
       3 TYPE              CHAR (04),                                   03710000
       3 SERIAL            CHAR (09);                                   03720000
                                                                        03730000
 DCL SK_KB01_OLD           CHAR (04)  DEFINED (SK_KB0_OLD);             03740000
 DCL SK_KB03_OLD           CHAR (17)  DEFINED (SK_KB0_OLD);             03750000
0/********************************************************************/ 03760000
 /*  ALL OTHER USED TEMPORARY FIELDS                                 */ 03770000
 /********************************************************************/ 03780000
 DCL WRK_SYSTEM_TYPE      CHAR (01)   INIT ('B');                       03790000
 DCL WRK_LEVEL            FIXED BIN (15);                               03800000
0DCL WRK_MOD_NAME         CHAR (08)   INIT ('RCBBKXM ');                03810000
 DCL WRK_PGM_NAME         CHAR (08)   INIT ('RCBBKXP ');                03820000
 DCL WRK_RCBBKB0          CHAR (07)   INIT ('RCBBKB0');                 03830000
 DCL WRK_RCBBKX0          CHAR (07)   INIT ('RCBBKX0');                 03840000
 DCL WRK_RCBBKZ0          CHAR (07)   INIT ('RCBBKZ0');                 03850000
 DCL WRK_UPGD_TYP         CHAR (01)   INIT('');                         03860000
 DCL WRK_DATETIME         CHAR (20)   INIT('');                         03870000
 DCL WRK_RUN_DATE         CHAR (10)   INIT('');                         03880000
 DCL WRK_PGR_TYPE         CHAR (03)   INIT('');                         03890000
 DCL SMALL_CTRY           CHAR (03)   INIT ('');                        03900000
 DCL CTRY_EXIST_CODE      FIXED BIN(15) INIT(0);                        03910000
 DCL WRK_CTRY_IDX         FIXED BIN (31);         /* INDEX COUNTRIES */ 03920000
 DCL WRK_CTRYNO           CHAR (03)   INIT ('');                        03930000
 DCL WRK_KB0_CTRYNO       CHAR (03)   INIT ('');                        03940000
 DCL WRK_KB0_CTRYNO_NXT   CHAR (03)   INIT ('');                        03950000
 DCL WRK_FILE_SEQ         PIC '99999';                                  03960000
 DCL WRK_QDBSCDR_C        CHAR (15);                                    03970000
 DCL WRK_QDBSCDR_P        PIC '(15)9'  DEFINED (WRK_QDBSCDR_C);         03980000
 DCL WRK_QCINRBA_C        CHAR (10);                                    03990000
 DCL WRK_QCINRBA_P        PIC '(10)9'  DEFINED (WRK_QCINRBA_C);         04000000
 DCL WRK_HASH_FIELD       CHAR (04);                                    04010000
 DCL WRK_INDNULL          FIXED BIN(15);                                04020000
 DCL ASSIGN_SERV_PERIOD   CHAR (03)   INIT ('');                        04030000
 DCL WSU_END_DATE_OLD     CHAR (10)   INIT ('');                        04040000
 DCL WSU_EFF_DATE_NXT     CHAR (10)   INIT ('');                        04050000
 DCL T220_EFF_DATE_NXT    CHAR (10)   INIT ('');                        04060000
 DCL EOF_COUNTRY           BIT(1) INIT('0'B);/* END-OF-COUNTRY SWITCH*/ 04070000
 DCL EOF_RCBBKZ0           BIT(1) INIT('0'B);/* END-OF-FILE SWITCH   */ 04080000
 DCL EOF_RCBBKB0           BIT(1) INIT('0'B);/* END-OF-FILE SWITCH   */ 04090000
 DCL EOC_T051_WARR         BIT(1) INIT('0'B);/* END-OF-FILE SWITCH   */ 04100000
 DCL EOC_T220_WARR         BIT(1) INIT('0'B);/* END-OF-FILE SWITCH   */ 04110000
 DCL ALPHA                    CHAR(36)                                  04120000
                        INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890');   04130000
1/********************************************************************/ 04140000
 /*  BUILTIN FUNCTIONS                                               */ 04150000
 /********************************************************************/ 04160000
0DCL (ADDR,                                                             04170000
      DATE,                                                             04180000
      HIGH,                                                             04190000
      LOW,                                                              04200000
      NULL,                                                             04210000
      PLIRETC,                                                          04220000
      PLISRTC,                                                          04230000
      STRING,                                                           04240000
      SUBSTR,                                                           04250000
      TIME)      BUILTIN;                                               04260000
1/********************************************************************/ 04270000
 /* DB2/SQL SQLCA                                                    */ 04280000
 /********************************************************************/ 04290000
 EXEC SQL                                                               04300000
   INCLUDE SQLCA                                                        04310000
   ;                                                                    04320000
1/********************************************************************/ 04330000
 /* CURSORS                                                          */ 04340000
 /********************************************************************/ 04350000
                                                                        04360000
  EXEC SQL                                                              04370000
    DECLARE CURSOR_T220_BAU_WARR  CURSOR FOR                            04380000
    SELECT                                                              04390000
          EFFECTIVE_DATE                                                04400000
         ,END_DATE                                                      04410000
    FROM RCBV0220_SUPPL_CTR                                             04420000
    WHERE COUNTRY_NUMBER    = :TB_RCBV220.COUNTRY_NUMBER                04430000
      AND PRODUCT_TYPE      = :TB_RCBV220.PRODUCT_TYPE                  04440000
      AND ORIGIN            = :TB_RCBV220.ORIGIN                        04450000
      AND SEQUENCE_NUMBER   = :TB_RCBV220.SEQUENCE_NUMBER               04460000
      AND TYPE_OF_WARRANTY ¬= ''                                        04470000
      AND TYPE_OF_WARRANTY IS NOT NULL                                  04480000
    ORDER BY 1,2                                                        04490000
    FOR FETCH ONLY;                                                     04500000
1/********************************************************************/ 04510000
 /* ON ENDFILE                                                       */ 04520000
 /********************************************************************/ 04530000
0ON ENDFILE (RCBBKZ0)                                                   04540000
   BEGIN;                                                               04550000
     SK_KZ0.EOF = '1';                                                  04560000
     EOF_RCBBKZ0 = TRUE;                                                04570000
   END;                                                                 04580000
0ON ENDFILE (RCBBKB0)                                                   04590000
   BEGIN;                                                               04600000
     SK_KB0.EOF = '1';                                                  04610000
     EOF_RCBBKB0 = TRUE;                                                04620000
   END;                                                                 04630000
1/********************************************************************/ 04640000
 /* ON ERROR CONDITIONS                                              */ 04650000
 /********************************************************************/ 04660000
0%INCLUDE (RCB0E0M);                                                    04670000
   END;                                                                 04680000
1/********************************************************************/ 04690000
 /*                 S T A R T   P R O C E S S I N G                  */ 04700000
 /********************************************************************/ 04710000
 PUT SKIP LIST('INIT_PROGRAM :');                                       04711013
 CALL INIT_PROGRAM;                  /* INITIAL ACTIONS FOR THE PROG */ 04720000
                                     /* NOT EOF OR NOT END OF COUNTRY*/ 04730000
 DO WHILE (¬EOF_COUNTRY | ¬EOF_RCBBKZ0 | ¬EOF_RCBBKB0 );                04740000
                               /* FIND CTRY EXIST CODE AND SMALL CTRY*/ 04750000
   CALL CALCULATE_CTRY_EXIST_CODE;                                      04760000
                                                                        04770000
   WRK_CTRYNO = SMALL_CTRY;                                             04780000
                                     /* IF CTRY REQUESTED AND RECORD */ 04790000
                                     /* PRESENT IN KB0 THEN CALL UPGD*/ 04800000
   IF ( CTRY_EXIST_CODE = 110 ) | ( CTRY_EXIST_CODE = 111 )             04810000
   THEN                                                                 04820000
     DO;                                                                04830000
       CALL INIT_PROCESS_CTRY;       /* INITIALISE CTRY VARIABLES    */ 04840000
       CALL PROCESS_UPGRADES;        /* PROCES CHIS UPGRADES FOR CTRY*/ 04850000
       CALL END_PROCESS_CTRY;        /* END PROCESS COUNTRY          */ 04860000
       CALL READ_RCB000_CTRY;        /* READ NEXT COUNTRY            */ 04870000
     END;                                                               04880000
   ELSE                              /* HANDLE ALL OTHER SCENARIOS   */ 04890000
     DO;                             /* IF CTRY NOT REQUESTED OR  NO */ 04900000
       CALL PROCESS_NON_UPGRADES;    /* UPGRADES PRESENT FOR THE CTRY*/ 04910000
     END;                                                               04920000
 END;                                                                   04930000
 CALL END_FILES;                     /* ISSUE COUNT AND END FILES    */ 04940000
 CALL END_PROG;                      /* SUCCESSFULY END THE PROGRAM  */ 04950000
1/********************************************************************/ 04960000
 /*                                                                  */ 04970000
 /* MODULE NAME      : INIT_PROGRAM                                  */ 04980000
 /*                                                                  */ 04990000
 /* DESCRIPTION      : INITIAL ACTIONS FOR THE PROGRAM               */ 05000000
 /*                                                                  */ 05010000
 /********************************************************************/ 05020000
 INIT_PROGRAM : PROC;                                                   05030000
                                                                        05040000
 PTR_RCBBKZ0         =  ADDR (RCBBKZ0_REC);                             05050000
 PTR_RCBBKB0         =  ADDR (RCBBKB0_REC);                             05060000
 PTR_RCBBKX0         =  ADDR (RCBBKX0_REC);                             05070000
 PTR_IMPOSED_MSU     =  ADDR (IMPOSED_MSU_REC1);                        05080000
                                                                        05090000
 PTR_INT_AREA        =  ADDR (PARM_INT_AREA);                           05100000
 PTR_RETURN_AREA     =  ADDR (RETURN_AREA);                             05110000
 PTR_COUNTRY_AREA    =  ADDR (COUNTRY_AREA);                            05120000
 PTR_RUN_DATE_AREA   =  ADDR (RUN_DATE_AREA);                           05130000
 PTR_DATE_AREA       =  ADDR(DATE_AREA);                                05140000
                                                                        05150000
 PTR_RCBV500         =  ADDR (TB_RCBV500);                              05160000
 PTR_RCBV500I        =  ADDR (TB_RCBV500_I);                            05170000
                                                                        05180000
 PARM_INT_AREA.MSG_AREA        = '';                                    05190000
 PARM_INT_AREA.ERR_AREA        = '';                                    05200000
 PARM_INT_AREA.ID_MOD_LEVEL    = 1;                                     05210000
 PARM_INT_AREA.ID_MOD_PATH (1) = WRK_MOD_NAME;                          05220000
 PARM_INT_AREA.MSG_REQUEST     = 'O';                                   05230000
 PARM_INT_AREA.MSG_TARGET      = 'F';                                   05240000
 PARM_INT_AREA.ID_SOURCE_APPL  = 'RCB';                                 05250000
 PARM_INT_AREA.ID_SOURCE_PROG  = WRK_PGM_NAME;                          05260000
 PARM_INT_AREA.SYSTEM_TYPE     = WRK_SYSTEM_TYPE;                       05270000
 PARM_INT_AREA.PTR_PCB_IO      = NULL;                                  05280000
 PARM_INT_AREA.PTR_PCB_ALT     = NULL;                                  05290000
                                                                        05300000
 CALL RCB0M1M (PTR_INT_AREA);                                           05310000
                                                                        05320000
 CALL RCB0T1M (PTR_INT_AREA);             /* RETRIEVE SYSTEM DATE    */ 05330000
 CALL RCB019M (PTR_COUNTRY_AREA,          /* RETRIEVE ALL COUNTRIES  */ 05350000
               PTR_INT_AREA);                                           05360000
                                                                        05370000
 IF COUNTRY_AREA.COUNT_CTRY = 0 THEN      /* IF NO COUNTRY REQUESTED */ 05380000
   DO;                                                                  05390000
     CALL ISSUE_MSG('0005');                                            05400000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#001');                        05410000
   END;                                                                 05420000
                                                                        05430000
 COUNT              = 0;                                                05440000
 WRK_CTRY_IDX       = 0;                                                05450000
 WRK_DATETIME       = PARM_INT_AREA.SYSTEM_DATE || '.' || TIME();       05460000
                                         /* INITIALISE KEY VARIABLES */ 05470000
 SK_CTRY            = '';                                               05480000
 SK_CTRY.EOF        = '0';                                              05490000
                                                                        05500000
 SK_KZ0             = '';                                               05510000
 SK_KZ0.EOF         = '0';                                              05520000
 SK_KZ0_OLD         = '';                                               05530000
 SK_KZ0_OLD.EOF     = '0';                                              05540000
                                                                        05550000
 SK_KB0             = '';                                               05560000
 SK_KB0.EOF         = '0';                                              05570000
 SK_KB0_OLD         = '';                                               05580000
 SK_KB0_OLD.EOF     = '0';                                              05590000
                                                                        05600000
 OPEN FILE (RCBBKZ0);                                                   05610000
 OPEN FILE (RCBBKB0);                                                   05620000
 OPEN FILE (RCBBKX0);                                                   05630000
                                                                        05640000
 CALL READ_RCBBKZ0_REC;                  /* READ HEADER FROM RCBBKZ0 */ 05650000
                                                                        05660000
 IF EOF_RCBBKZ0 THEN                     /* IF RCBBKZ0 FILE IS EMPTY */ 05670000
   DO;                                                                  05680000
     G_WRKMSG.TXTFIELD_1 = 'RCBBKZ0';                                   05690000
     CALL ISSUE_MSG('0013');                                            05700000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#002');                        05710000
   END;                                                                 05720000
                                                                        05730000
 IF RCBBKZ0_C000.CDBSFRT ¬= 'C000' THEN  /* IF NO PROPER HEADER TYPE */ 05740000
   DO;                                                                  05750000
     G_WRKMSG.TXTFIELD_1 = '';                                          05760000
     G_WRKMSG.TXTFIELD_2 = 'RCBBKZ0';                                   05770000
     G_WRKMSG.TXTFIELD_3 = RCBBKZ0_C000.CDBSFRT;                        05780000
     CALL ISSUE_MSG('0018');                                            05790000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#003');                        05800000
   END;                                                                 05810000
                                                                        05820000
 IF (COUNTRY_AREA.PROC_ID ¬= 'UC01' | /* NO PROPER PROC_ID OR HEADER */ 05830000
     RCBBKZ0_C000.TDBSFIL ¬= 'CHIS CONTRACT DATA') THEN                 05840000
   DO;                                                                  05850000
     G_WRKMSG.TXTFIELD_1 =  WRK_RCBBKZ0;                                05860000
     G_WRKMSG.TXTFIELD_2 =  RCBBKZ0_C000.TDBSFIL;                       05870000
     CALL ISSUE_MSG('0014');                                            05880000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#004');                        05890000
   END;                                                                 05900000
                                                                        05910000
 CALL READ_RCBBKB0_REC;                  /* READ HEADER FROM RCBBKB0 */ 05920000
                                                                        05930000
 IF EOF_RCBBKB0 THEN                     /* IF RCBBKB0 FILE IS EMPTY */ 05940000
   DO;                                                                  05950000
     G_WRKMSG.TXTFIELD_1 = 'RCBBKB0';                                   05960000
     CALL ISSUE_MSG('0013');                                            05970000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#005');                        05980000
   END;                                                                 05990000
                                         /* IF NO PROPER HEADER TYPE */ 06000000
 IF RCBBKB0_C000.RECORD_TYPE     ¬= 'C000' THEN                         06010000
   DO;                                                                  06020000
     G_WRKMSG.TXTFIELD_1 = '';                                          06030000
     G_WRKMSG.TXTFIELD_2 = 'RCBBKB0';                                   06040000
     G_WRKMSG.TXTFIELD_3 = RCBBKB0_C000.RECORD_TYPE;                    06050000
     CALL ISSUE_MSG('0018');                                            06060000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#006');                        06070000
   END;                                                                 06080000
                                                                        06090000
 IF (RCBBKB0_C000.CREATION_DATE ¬= '') &                                06100000
    (¬ VALIDATE_DATE(RCBBKB0_C000.CREATION_DATE))                       06110000
 THEN                                                                   06120000
 DO;                                                                    06130000
    G_WRKMSG.TXTFIELD_1 = 'RCBBKBF0 FILE HEADER DATE';                  06140000
    G_WRKMSG.TXTFIELD_2 = RCBBKB0_C000.CREATION_DATE;                   06150000
    CALL ISSUE_MSG('0012');                                             06160000
    CALL RCBBKXM_ERROR (NULL, 'OTHER', '#007');                         06170000
 END;                                                                   06180000
                                                                        06190000
 IF RCBBKB0_C000.FILE_NAME ¬= 'CHIS UPGRADE DATA'/* NO PROPER HEADER */ 06200000
 THEN                                                                   06210000
   DO;                                                                  06220000
     G_WRKMSG.TXTFIELD_1 =  WRK_RCBBKB0;                                06230000
     G_WRKMSG.TXTFIELD_2 =  RCBBKB0_C000.FILE_NAME;                     06240000
     CALL ISSUE_MSG('0014');                                            06250000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#008');                        06260000
   END;                                                                 06270000
                                                                        06280000
 PUT SKIP LIST('RETRIEVE PREVIOUS FILE SEQUENCE NUMBER');               06281018
               /* RETRIEVE PREVIOUS FILE SEQUENCE NUMBER FROM RCB035 */ 06290000
                                                                        06300000
 TB_RCBV500                  = '';                                      06310000
 TB_RCBV500_I                = '';                                      06320000
 TB_RCB035.NUMBER            = 'RCB035';                                06330000
                                                                        06340000
 TB_RCB035.PROC_ID           = COUNTRY_AREA.PROC_ID;                    06350000
 TB_RCB035.SEQ_NR            = '02';                                    06360000
 TB_RCB035.FILLER_G1         = COUNTRY_AREA.CTRYNO(1);                  06370000
 /*                                                                     06370132
 PUT SKIP LIST('***RCB035****');                                        06371030
 PUT SKIP LIST('NUMBER=',TB_RCB035.NUMBER);                             06372030
 PUT SKIP LIST('PROC_ID=',TB_RCB035.PROC_ID);                           06373030
 PUT SKIP LIST('SEQ_NR=',TB_RCB035.SEQ_NR );                            06374030
 PUT SKIP LIST('TB_RCBV500.PARAM_NUMBER=',TB_RCBV500.PARAMETER_NUMBER); 06376030
 PUT SKIP LIST('TB_RCBV500.PARAM_KEY=',TB_RCBV500.PARAMETER_KEY);       06377030
 PUT SKIP LIST('TB_RCBV500.PARA_DESCR=',TB_RCBV500.DESCRIPTION);        06378030
 PUT SKIP LIST('TB_RCBV500.PARAM_VALUE=',TB_RCBV500.PARAMETER_VALUE);   06379030
                                                                        06380000
 PUT SKIP LIST('BEFORE RCBI50M'); */                                    06381033
 CALL RCBI50M ('R',                                                     06390000
               PTR_RCBV500,                                             06400000
               PTR_RCBV500I,                                            06410000
               PTR_RETURN_AREA,                                         06420000
               PTR_INT_AREA);                                           06430000
 /*                                                                     06430133
 PUT SKIP LIST('AFTER RCBI50M');                                        06431030
 PUT SKIP LIST('RCB035');                                               06432030
 PUT SKIP LIST('NUMBER=',TB_RCB035.NUMBER);                             06433030
 PUT SKIP LIST('PROC_ID=',TB_RCB035.PROC_ID);                           06434030
 PUT SKIP LIST('SEQ_NR=',TB_RCB035.SEQ_NR );                            06435030
 PUT SKIP LIST('TB_RCBV500.PARAM_NUMBER=',TB_RCBV500.PARAMETER_NUMBER); 06437030
 PUT SKIP LIST('TB_RCBV500.PARAM_KEY=',TB_RCBV500.PARAMETER_KEY);       06438030
 PUT SKIP LIST('TB_RCBV500.PARA_DESCR=',TB_RCBV500.DESCRIPTION);        06439030
 PUT SKIP LIST('TB_RCBV500.PARAM_VALUE=',TB_RCBV500.PARAMETER_VALUE);   06439130
 */                                                                     06440032
 IF RETURN_AREA.RETURN_CODE = 4                                         06450000
 THEN                                  /* RETRIEVE THE OLD SEQUENCE  */ 06460000
   DO;                                 /* NUMBER FOR COUNTRY = BLANK */ 06470000
 PUT SKIP LIST('IF RETURN CODE =4 ');                                   06471030
     TB_RCB035.FILLER_G1 = '';         /* IF NOT FOUND ERROR IS      */ 06480000
     CALL RCBI50M ('R',                /* HANDLED IN NEXT STATEMENT  */ 06490000
                   PTR_RCBV500,                                         06500000
                   PTR_RCBV500I,                                        06510000
                   PTR_RETURN_AREA,                                     06520000
                   PTR_INT_AREA);                                       06530000
 /*                                                                     06530132
 PUT SKIP LIST('AFTER RCBI50M');                                        06531030
 PUT SKIP LIST('RCB035');                                               06532030
 PUT SKIP LIST('NUMBER=',TB_RCB035.NUMBER);                             06533030
 PUT SKIP LIST('PROC_ID=',TB_RCB035.PROC_ID);                           06534030
 PUT SKIP LIST('SEQ_NR=',TB_RCB035.SEQ_NR );                            06535030
 */                                                                     06536032
     IF RETURN_AREA.RETURN_CODE = 0    /* INSERT THE SEQUENCE NUMBER */ 06540000
     THEN                              /* FOR FIRST RUN COUNTRY      */ 06550000
       DO;                                                              06560000
         TB_RCB035.FILLER_G1 = COUNTRY_AREA.CTRYNO(1);                  06570000
         /*                                                             06570132
 PUT SKIP LIST('IF RC=0');                                              06570230
 PUT SKIP LIST('RCB035');                                               06570330
 PUT SKIP LIST('NUMBER=',TB_RCB035.NUMBER);                             06570430
 PUT SKIP LIST('PROC_ID=',TB_RCB035.PROC_ID);                           06570530
 PUT SKIP LIST('SEQ_NR=',TB_RCB035.SEQ_NR );                            06570630
 PUT SKIP LIST('COUNTRY_AREA.CTRYNO(1)=',COUNTRY_AREA.CTRYNO(1));       06570730
 PUT SKIP LIST('TB_RCBV500.PARAM_NUMBER=',TB_RCBV500.PARAMETER_NUMBER); 06571028
 PUT SKIP LIST('TB_RCBV500.PARAM_KEY=',TB_RCBV500.PARAMETER_KEY);       06572028
 PUT SKIP LIST('TB_RCBV500.PARA_DESCR=',TB_RCBV500.DESCRIPTION);        06573028
 PUT SKIP LIST('TB_RCBV500.PARAM_VALUE=',TB_RCBV500.PARAMETER_VALUE);   06574028
 */                                                                     06575032
         CALL RCBF50M (PTR_RCBV500,                                     06580000
                       PTR_RCBV500I,                                    06590000
                       PTR_RETURN_AREA,                                 06600000
                       PTR_INT_AREA);                                   06610000
       END;                                                             06620000
   END;                                                                 06630000
                                                                        06640000
 SELECT (RETURN_AREA.RETURN_CODE);                                      06650000
   WHEN (0)                                                             06660000
     DO;                                                                06670000
 /*                                                                     06671032
 PUT SKIP LIST('BEFORE MOVE OF RCB035');                                06672024
 PUT SKIP LIST('RCB035.FILE_SEQ_NUM_SC=',TB_RCB035.FILE_SEQ_NUM_SC);    06673030
 PUT SKIP LIST('RCB035.FILE_SEQ_NUM_SC=',RCB035.FILE_SEQ_NUM_SC);       06674030
 */                                                                     06675032
       RCB035 = TB_RCB035 , BY NAME;                                    06680000
       /*                                                               06680132
 PUT SKIP LIST('AFTER MOVE OF RCB035');                                 06680230
 PUT SKIP LIST('RCB035.FILE_SEQ_NUM_SC=',TB_RCB035.FILE_SEQ_NUM_SC);    06681030
 PUT SKIP LIST('RCB035.FILE_SEQ_NUM_SC=',RCB035.FILE_SEQ_NUM_SC);       06681130
 PUT SKIP LIST('RCBBKB0_C000.FILE_SEQ_NBR=',RCBBKB0_C000.FILE_SEQ_NBR); 06682024
 */                                                                     06683032
       IF RCB035.FILE_SEQ_NUM_SC + 1 > RCBBKB0_C000.FILE_SEQ_NBR        06690000
       THEN                                                             06700000
         DO;                           /* IF INVALID SEQUENCE NUMBER */ 06710000
           G_WRKMSG.TXTFIELD_1       = '';                              06720000
           G_WRKMSG.TXTFIELD_2       = 'RCBBKB0';                       06730000
           WRK_FILE_SEQ              = RCBBKB0_C000.FILE_SEQ_NBR;       06740000
           G_WRKMSG.TXTFIELD_3       = WRK_FILE_SEQ;                    06750000
           G_WRKMSG.TXTFIELD_4       = 'RCB035';                        06760000
           G_WRKMSG.TXTFIELD_5       = TB_RCBV500.PARAMETER_KEY;        06770000
           WRK_FILE_SEQ              = RCB035.FILE_SEQ_NUM_SC + 1;      06780000
           G_WRKMSG.TXTFIELD_6       = WRK_FILE_SEQ;                    06790000
                                                                        06800000
           CALL ISSUE_MSG('0180');                                      06810000
           CALL RCBBKXM_ERROR (NULL, 'OTHER', '#009');                  06820000
         END;                                                           06830000
       ELSE WRK_FILE_SEQ = RCBBKB0_C000.FILE_SEQ_NBR;                   06840000
     END;                                                               06850000
   WHEN (4)                                                             06860000
     DO;                               /* IF NO SEQUENCE NUMBER FOUND*/ 06870000
       G_WRKMSG.TXTFIELD_1  = '';                                       06880000
       G_WRKMSG.TXTFIELD_2  = 'RCB035';                                 06890000
       G_WRKMSG.TXTFIELD_3  = TB_RCBV500.PARAMETER_KEY;                 06900000
                                                                        06910000
       CALL ISSUE_MSG('I050');                                          06920000
       CALL RCBBKXM_ERROR (ADDR (RETURN_AREA.RETURN_SQL),'DB2','#010'); 06930000
     END;                                                               06940000
   OTHERWISE                                                            06950000
     DO;                                                                06960000
       CALL RCBBKXM_ERROR (ADDR (RETURN_AREA.RETURN_SQL),'DB2','#011'); 06970000
     END;                                                               06980000
 END; /* END OF SELECT */                                               06990000
                                                                        07000000
 RCBBKX0_REC = RCBBKZ0_REC;           /* WRITE HEADER TO RCBBKX0 FILE*/ 07010000
 WRITE FILE (RCBBKX0) FROM (RCBBKX0_REC);                               07020000
 COUNT.CNT_TOT.RCBBKX0 = COUNT.CNT_TOT.RCBBKX0 + 1 ;                    07030000
                                                                        07040000
 CALL READ_RCB000_CTRY;               /* READ FIRST COUNTRY NUMBER   */ 07050000
 CALL READ_RCBBKZ0_REC;               /* READ FIRST C001 RECORD      */ 07060000
 CALL READ_RCBBKB0_REC;               /* READ FIRST C002 RECORD      */ 07070000
                                      /* INCREASE KB0 COUNT BY 1     */ 07080000
 COUNT.CNT_CTRY.RCBBKB0 = COUNT.CNT_CTRY.RCBBKB0_NXT;                   07090000
 COUNT.CNT_CTRY.RCBBKB0_NXT = 0;      /* RESET NEXT COUNTRY COUNT    */ 07100000
                                      /* INITIALISE FIRST KB0 CTRYNO */ 07110000
 WRK_KB0_CTRYNO = WRK_KB0_CTRYNO_NXT;                                   07120000
 WRK_KB0_CTRYNO_NXT = HIGH(3);        /* AS OF NOW NEXT UNKNOWN CTRY */ 07130000
                                                                        07140000
 END INIT_PROGRAM;                                                      07150000
1/********************************************************************/ 07160000
 /*                                                                  */ 07170000
 /* MODULE NAME      : INIT_PROCESS_CTRY                             */ 07180000
 /*                                                                  */ 07190000
 /* DESCRIPTION      : INITIAL ACTION FOR A COUNTRY IF TO BE         */ 07200000
 /*                    PROCESSED.                                    */ 07210000
 /*                                                                  */ 07220000
 /* SWITCH_RCBBKZ0_HEADER - USED TO INDICATE HEADER IS WRITTEN TO O/P*/ 07230000
 /*                         FROM RCBBKZ0 FILE                        */ 07240000
 /* SWITCH_RCBBKB0_HEADER - USED TO INDICATE HEADER IS WRITTEN TO O/P*/ 07250000
 /*                         FROM RCBBKB0, THIS FLAG WILL BE SET ONLY */ 07260000
 /*                         WHEN THERE IS NO RECORDS FOR THE COUNTRY */ 07270000
 /*                         IN KZ0 AND WSU RECORDS ARE PRESENT IN KB0*/ 07280000
 /* SWITCH_WRITE_TRAILER  - THIS FLAG WILL BE SET TO WRITE TRAILER TO*/ 07290000
 /*                         O/P FILE ONLY WHEN HEADER IS WRITTEN TO  */ 07300000
 /*                         O/P FILE, DEPENDING ON ABOVE TWO SWITCHES*/ 07310000
 /********************************************************************/ 07320000
 INIT_PROCESS_CTRY: PROC;                                               07330000
                                                                        07340000
 SWITCH_RCBBKZ0_HEADER = FALSE;                                         07350000
                            /* IF PROCESSING CTRY IN KZ0 AND NOT EOF */ 07360000
 IF ((WRK_CTRYNO = RCBBKZ0_C001.IOPUCTY) & ¬EOF_RCBBKZ0) THEN           07370000
  DO;                                                                   07380000
    IF RCBBKZ0_C001.CDBSFRT ¬= 'C001' THEN      /* WRONG RECORD TYPE */ 07390000
      DO;                                                               07400000
        G_WRKMSG.TXTFIELD_1 = RCBBKZ0_C001.IOPUCTY;                     07410000
        G_WRKMSG.TXTFIELD_2 = 'RCBBKB0';                                07420000
        G_WRKMSG.TXTFIELD_3 = RCBBKZ0_C001.CDBSFRT;                     07430000
        CALL ISSUE_MSG('0018');                                         07440000
        CALL RCBBKXM_ERROR (NULL, 'OTHER', '#012');                     07450000
      END;                                                              07460000
    ELSE                                                                07470000
      DO;                                                               07480000
        RCBBKX0_REC = RCBBKZ0_REC;                                      07490000
        WRITE FILE(RCBBKX0) FROM(RCBBKX0_REC);                          07500000
        COUNT.CNT_CTRY.RCBBKX0 = COUNT.CNT_CTRY.RCBBKX0 + 1 ;           07510000
        SWITCH_RCBBKZ0_HEADER = TRUE;                                   07520000
        SWITCH_WRITE_TRAILER  = TRUE;                                   07530000
        CALL READ_RCBBKZ0_REC;                 /* READ C002 RECORD   */ 07540000
      END;                                                              07550000
  END;                                                                  07560000
                                               /* RETRIEVE RUN DATE  */ 07570000
 RUN_DATE_AREA.PROC_ID   =  COUNTRY_AREA.PROC_ID;                       07580000
 RUN_DATE_AREA.CTRYNO    =  WRK_CTRYNO;                                 07590000
 RUN_DATE_AREA.PGR_TYPE  =  WRK_PGR_TYPE;                               07600000
                                                                        07610000
 CALL RCB020M (PTR_RUN_DATE_AREA,                                       07620000
               PTR_INT_AREA);                                           07630000
                                                                        07640000
 IF RUN_DATE_AREA.RUN_DATE = ''          /* NO RUN DATE RCB001 FOUND */ 07650000
 THEN                                                                   07660000
   DO;                                                                  07670000
     WRK_RUN_DATE = PARM_INT_AREA.SYSTEM_DATE;                          07680000
   END;                                                                 07690000
 ELSE                                                                   07700000
   DO;                                                                  07710000
     WRK_RUN_DATE = RUN_DATE_AREA.RUN_DATE;                             07720000
   END;                                                                 07730000
                                                                        07740000
 CALL ISSUE_MSG('0002');              /* REPORT RUN DATE FOR COUNTRY */ 07750000
                                                                        07760000
 END INIT_PROCESS_CTRY;                                                 07770000
1/********************************************************************/ 07780000
 /*                                                                  */ 07790000
 /* MODULE NAME      : CALCULATE_CTRY_EXIST_CODE                     */ 07800000
 /*                                                                  */ 07810000
 /* DESCRIPTION      : GENERATE CTRY EXIST CODE FROM THE THREE I/P'S */ 07820000
 /*                    1. COUNTRY REQUSTED FOR PROCESSING - RCB000   */ 07830000
 /*                    2. COUNTRY FROM THE UPGRADE RECORD - RCBKB0   */ 07840000
 /*                    3. COUNTRY FROM THE KA0 CONTRACT   - RCBKZ0   */ 07850000
 /* CTRY_EXIST_CODE STRUCTURE IN 3 DIGIT BINARY FORMAT               */ 07860000
 /*              | DIGIT-1  | DIGIT-2  | DIGIT-3   |                 */ 07870000
 /*              | REQ CTRY | KB0 CTRY | KZ0 CTRY  |                 */ 07880000
 /* FOR THE RESPECTIVE COUNTRY                                       */ 07890000
 /*              1 INDICATES PRESENCE OF RECORDS FROM RESPECTIVE I/P */ 07900000
 /*              0 INDICATES NO RECORDS PRESENT FROM RESPECTIVE I/P  */ 07910000
 /********************************************************************/ 07920000
 CALCULATE_CTRY_EXIST_CODE : PROC;                                      07930000
                                                                        07940000
 CTRY_EXIST_CODE   = 0;                                                 07950000
                               /* KEY ---> EOF FLAG + COUNTRY NUMBER */ 07960000
                  /* FIND THE SMALLEST COUNTRY AMONG THE INPUT FILES */ 07970000
 SELECT;                                                                07980000
   WHEN((SK_CTRY1 <= SK_KZ01)&(SK_CTRY1 <= SK_KB01))                    07990000
     DO;                                                                08000000
         SMALL_CTRY = SK_CTRY.CTRYNO;                                   08010000
     END;                                                               08020000
   WHEN((SK_KB01 <= SK_CTRY1)&(SK_KB01 <= SK_KZ01))                     08030000
     DO;                                                                08040000
         SMALL_CTRY = SK_KB0.CTRYNO;                                    08050000
     END;                                                               08060000
   WHEN((SK_KZ01 <= SK_CTRY1)&(SK_KZ01 <= SK_KB01 ))                    08070000
     DO;                                                                08080000
         SMALL_CTRY = SK_KZ0.CTRYNO;                                    08090000
     END;                                                               08100000
   OTHERWISE                                                            08110000
     DO;                                                                08120000
         CALL RCBBKXM_ERROR (NULL(), 'OTHER', '#013');                  08130000
     END;                                                               08140000
 END;                                                                   08150000
                     /* CALCULATE THE UNIQUE COUNTRY IDENTIFIER CODE */ 08160000
                              /* | DIGIT-1  | DIGIT-2  | DIGIT-3   | */ 08170000
                              /* | REQ CTRY | KB0 CTRY | KZ0 CTRY  | */ 08180000
                                                                        08190000
 IF ( SMALL_CTRY = SK_CTRY.CTRYNO ) & ( ¬EOF_COUNTRY ) THEN             08200000
      CTRY_EXIST_CODE = CTRY_EXIST_CODE + 100  ;     /* SET DIGIT-1  */ 08210000
                                                                        08220000
 IF ( SMALL_CTRY = SK_KB0.CTRYNO )  & ( ¬EOF_RCBBKB0 ) THEN             08230000
      CTRY_EXIST_CODE = CTRY_EXIST_CODE +  10  ;     /* SET DIGIT-2  */ 08240000
                                                                        08250000
 IF ( SMALL_CTRY = SK_KZ0.CTRYNO )  & ( ¬EOF_RCBBKZ0 ) THEN             08260000
      CTRY_EXIST_CODE = CTRY_EXIST_CODE +   1  ;     /* SET DIGIT-3  */ 08270000
                                                                        08280000
 END CALCULATE_CTRY_EXIST_CODE;                                         08290000
1/********************************************************************/ 08300000
 /*                                                                  */ 08310000
 /* MODULE NAME      : READ_RCB000_CTRY                              */ 08320000
 /*                                                                  */ 08330000
 /* DESCRIPTION      : READ (NEXT) ENTRY FROM THE COUNTRY ARRAY      */ 08340000
 /*                    WHICH IS READ FROM PARAMETER RCB000           */ 08350000
 /********************************************************************/ 08360000
 READ_RCB000_CTRY: PROC;                                                08370000
                                                                        08380000
 WRK_CTRY_IDX = WRK_CTRY_IDX + 1;                                       08390000
                                                                        08400000
 IF WRK_CTRY_IDX <= COUNTRY_AREA.COUNT_CTRY                             08410000
 THEN                                                                   08420000
   DO;                                                                  08430000
     WRK_PGR_TYPE    = CTRY_ARRAY.PGR_TYPE (WRK_CTRY_IDX);              08440000
     SK_CTRY.CTRYNO = CTRY_ARRAY.CTRYNO (WRK_CTRY_IDX);                 08450000
   END;                                                                 08460000
 ELSE                                                                   08470000
   DO;                                                                  08480000
     WRK_PGR_TYPE  = '';                                                08490000
     SK_CTRY.EOF  = '1';                                                08500000
     EOF_COUNTRY  = TRUE;                                               08510000
   END;                                                                 08520000
                                                                        08530000
 END READ_RCB000_CTRY;                                                  08540000
1/********************************************************************/ 08550000
 /*                                                                  */ 08560000
 /* MODULE NAME      : READ_RCBBKZ0_REC                              */ 08570000
 /*                                                                  */ 08580000
 /* DESCRIPTION      : READ A CONTRACT RECORD FROM RCBBKZ0           */ 08590000
 /*                  : ( SLC ENRICHED RCBBKA0 CHIS FILE )            */ 08600000
 /*                                                                  */ 08610000
 /********************************************************************/ 08620000
 READ_RCBBKZ0_REC : PROC;                                               08630000
                                                                        08640000
   READ FILE (RCBBKZ0) INTO (RCBBKZ0_REC);                              08650000
                                                                        08660000
   IF ¬EOF_RCBBKZ0                                    /* NOT YET EOF */ 08670000
   THEN                                                                 08680000
     DO;                                                                08690000
       SELECT (RCBBKZ0_C000.CDBSFRT);           /* CHECK RECORD TYPE */ 08700000
         WHEN ('C000')                                                  08710000
           DO;                                                          08720000
             COUNT.CNT_TOT.RCBBKZ0 = COUNT.CNT_TOT.RCBBKZ0 + 1;         08730000
           END;                                                         08740000
         WHEN ('C001')                                                  08750000
           DO;                                                          08760000
             SK_KZ0.CTRYNO  = RCBBKZ0_C001.IOPUCTY;                     08770000
             SK_KZ0.TYPE    = '';                                       08780000
             SK_KZ0.SERIAL  = '';                                       08790000
             COUNT.CNT_CTRY.RCBBKZ0 = COUNT.CNT_CTRY.RCBBKZ0 + 1;       08800000
           END;                                                         08810000
         WHEN ('C002')                                                  08820000
           DO;                                                          08830000
             SK_KZ0.CTRYNO  = RCBBKZ0_C002.IOPUCTY;                     08840000
             SK_KZ0.TYPE    = RCBBKZ0_C002.CSLMTYP;                     08850000
             SK_KZ0.SERIAL  = RCBBKZ0_C002.IHSIMID;                     08860000
                                                                        08870000
             WRK_HASH_FIELD = SUBSTR (RCBBKZ0_C002.IHSIMID,5,4);        08880000
             CALL RCB018M (WRK_HASH_FIELD,                              08890000
                           COUNT.CNT_CTRY.RCBBKZ0_HASH,                 08900000
                           PTR_INT_AREA);                               08910000
                                                                        08920000
             COUNT.CNT_CTRY.RCBBKZ0 = COUNT.CNT_CTRY.RCBBKZ0 + 1;       08930000
           END;                                                         08940000
         WHEN ('C003')                                                  08950000
           DO;                                                          08960000
             SK_KZ0.CTRYNO  = RCBBKZ0_C003.IOPUCTY;                     08970000
             SK_KZ0.TYPE    = RCBBKZ0_C003.CSLMTYP;                     08980000
             SK_KZ0.SERIAL  = RCBBKZ0_C003.IHSIMID;                     08990000
                                                                        09000000
             WRK_HASH_FIELD = SUBSTR (RCBBKZ0_C002.IHSIMID,5,4);        09010000
             CALL RCB018M (WRK_HASH_FIELD,                              09020000
                           COUNT.CNT_CTRY.RCBBKZ0_HASH,                 09030000
                           PTR_INT_AREA);                               09040000
                                                                        09050000
             COUNT.CNT_CTRY.RCBBKZ0 = COUNT.CNT_CTRY.RCBBKZ0 + 1;       09060000
           END;                                                         09070000
         WHEN ('C998')                                                  09080000
           DO;                                                          09090000
             SK_KZ0.CTRYNO  = HIGH (3);            /* FORCE CTRY END */ 09100000
             COUNT.CNT_CTRY.RCBBKZ0 = COUNT.CNT_CTRY.RCBBKZ0 + 1;       09110000
           END;                                                         09120000
         WHEN ('C999')                                                  09130000
           DO;                                                          09140000
             SK_KZ0.CTRYNO  = HIGH (3);                                 09150000
             SK_KZ0.EOF     = '1';                      /* FORCE EOF */ 09160000
             EOF_RCBBKZ0    = TRUE;                     /* FORCE EOF */ 09170000
             COUNT.CNT_TOT.RCBBKZ0 = COUNT.CNT_TOT.RCBBKZ0 + 1;         09180000
           END;                                                         09190000
         OTHERWISE                                                      09200000
           DO;                                                          09210000
             G_WRKMSG.TXTFIELD_1 = RCBBKZ0_C001.IOPUCTY;                09220000
             G_WRKMSG.TXTFIELD_2 = 'RCBBKZ0';                           09230000
             G_WRKMSG.TXTFIELD_3 = RCBBKZ0_C000.CDBSFRT;                09240000
             CALL ISSUE_MSG('0018');                                    09250000
             CALL RCBBKXM_ERROR (NULL, 'OTHER', '#014');                09260000
           END;                                                         09270000
       END; /* END OF SELECT */                                         09280000
     END;                                                               09290000
                                                                        09300000
 END READ_RCBBKZ0_REC;                                                  09310000
1/********************************************************************/ 09320000
 /*                                                                  */ 09330000
 /* MODULE NAME      : WRITE_RCBBKZ0_C003_RT                         */ 09340000
 /*                                                                  */ 09350000
 /* DESCRIPTION      : IF C003 RECORD THEN WRITE TO O/P DIRECTLY     */ 09360000
 /********************************************************************/ 09370000
 WRITE_RCBBKZ0_C003_RT : PROC;                                          09380000
                                                                        09390000
 DO WHILE (RCBBKZ0_C000.CDBSFRT = 'C003');                              09400000
     RCBBKX0_REC = RCBBKZ0_REC;                                         09410000
     CALL WRITE_RCBBKX0_REC;                                            09420000
     CALL READ_RCBBKZ0_REC;                                             09430000
 END;                                                                   09440000
                                                                        09450000
 END WRITE_RCBBKZ0_C003_RT;                                             09460000
1/********************************************************************/ 09470000
 /*                                                                  */ 09480000
 /* MODULE NAME      : READ_RCBBKZ0_ARRAY                            */ 09490000
 /*                                                                  */ 09500000
 /* DESCRIPTION      : READ A CONTRACT RECORD FROM RCBBKZ0 ARRAY.    */ 09510000
 /*                    ITS SIMILAR TO READING FROM FILE & ASSIGN THE */ 09520000
 /*                    VARIABLES SAME AS ITS DONE IN READING FROM FIL*/ 09530000
 /********************************************************************/ 09540000
 READ_RCBBKZ0_ARRAY : PROC (WRK_INDEX);                                 09550000
                                                                        09560000
 DCL WRK_INDEX         FIXED BIN(31);                                   09570000
                                                                        09580000
 IF (WRK_INDEX > (KZ0_ARRAY_COUNT + 1)) THEN                            09590000
   DO;                                                                  09600000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#015');                        09610000
   END;                                                                 09620000
                                                                        09630000
 RCBBKZ0_REC = RCBBKZ0_REC_ARRAY(WRK_INDEX);                            09640000
                                                                        09650000
 SELECT (RCBBKZ0_C000.CDBSFRT);                 /* CHECK RECORD TYPE */ 09660000
   WHEN ('C001')                                                        09670000
     DO;                                                                09680000
       SK_KZ0.CTRYNO  = RCBBKZ0_C001.IOPUCTY;                           09690000
       SK_KZ0.TYPE    = '';                                             09700000
       SK_KZ0.SERIAL  = '';                                             09710000
     END;                                                               09720000
   WHEN ('C002')                                                        09730000
     DO;                                                                09740000
       SK_KZ0.CTRYNO  = RCBBKZ0_C002.IOPUCTY;                           09750000
       SK_KZ0.TYPE    = RCBBKZ0_C002.CSLMTYP;                           09760000
       SK_KZ0.SERIAL  = RCBBKZ0_C002.IHSIMID;                           09770000
     END;                                                               09780000
   WHEN ('C003')                                                        09790000
     DO;                                                                09800000
       SK_KZ0.CTRYNO  = RCBBKZ0_C003.IOPUCTY;                           09810000
       SK_KZ0.TYPE    = RCBBKZ0_C003.CSLMTYP;                           09820000
       SK_KZ0.SERIAL  = RCBBKZ0_C003.IHSIMID;                           09830000
     END;                                                               09840000
   WHEN ('C998')                                                        09850000
     DO;                                                                09860000
       SK_KZ0.CTRYNO  = HIGH (3);                  /* FORCE CTRY END */ 09870000
     END;                                                               09880000
   WHEN ('C999')                                                        09890000
     DO;                                                                09900000
       SK_KZ0.CTRYNO  = HIGH (3);                                       09910000
       SK_KZ0.EOF     = '1';                            /* FORCE EOF */ 09920000
       EOF_RCBBKZ0    = TRUE;                           /* FORCE EOF */ 09930000
     END;                                                               09940000
   OTHERWISE                                                            09950000
     DO;                                                                09960000
       G_WRKMSG.TXTFIELD_1 = RCBBKZ0_C001.IOPUCTY;                      09970000
       G_WRKMSG.TXTFIELD_2 = 'RCBBKZ0 ARRAY';                           09980000
       G_WRKMSG.TXTFIELD_3 = RCBBKZ0_C000.CDBSFRT;                      09990000
       CALL ISSUE_MSG('0018');                                          10000000
       CALL RCBBKXM_ERROR (NULL, 'OTHER', '#016');                      10010000
     END;                                                               10020000
 END; /* END OF SELECT */                                               10030000
 END READ_RCBBKZ0_ARRAY;                                                10040000
1/********************************************************************/ 10050000
 /*                                                                  */ 10060000
 /* MODULE NAME      : READ_RCBBKB0_REC                              */ 10070000
 /*                                                                  */ 10080000
 /* DESCRIPTION      : READ A UPGRADE RECORD FROM THE RCBBKB0 FILE   */ 10090000
 /*                    GENERATED BY WSU/MSU EXTRACT PROGRAM RCBBKBM  */ 10100000
 /*                                                                  */ 10110000
 /********************************************************************/ 10120000
 READ_RCBBKB0_REC : PROC;                                               10130000
   READ FILE (RCBBKB0) INTO (RCBBKB0_REC);                              10140000
                                                                        10150000
   IF ¬EOF_RCBBKB0                                    /* NOT YET EOF */ 10160000
   THEN                                                                 10170000
     DO;                                                                10180000
       STRING(VALIDATE_C002) = '';                                      10190000
       SELECT (RCBBKB0_C000.RECORD_TYPE);       /* CHECK RECORD TYPE */ 10200000
         WHEN ('C000')                                                  10210000
           DO;                                                          10220000
             COUNT.CNT_TOT.RCBBKB0 = COUNT.CNT_TOT.RCBBKB0 + 1;         10230000
           END;                                                         10240000
         WHEN ('C002')                                                  10250000
           DO;                                                          10260000
             SK_KB0.CTRYNO  = RCBBKB0_C002.IOPUCTY;                     10270000
             SK_KB0.TYPE    = RCBBKB0_C002.CSLMTYP;                     10280000
             SK_KB0.SERIAL  = RCBBKB0_C002.IHSIMID;                     10290000
                                                                        10300000
             WRK_UPGD_TYP  =  RCBBKB0_C002.UPGRADE_TYPE;                10310000
                                /* TAKE RECORD COUNT FOR WRK COUNTRY */ 10320000
             IF WRK_CTRYNO = RCBBKB0_C002.IOPUCTY THEN                  10330000
              DO;                                                       10340000
               COUNT.CNT_CTRY.RCBBKB0     = COUNT.CNT_CTRY.RCBBKB0+1;   10350000
               WRK_KB0_CTRYNO = RCBBKB0_C002.IOPUCTY;                   10360000
              END;                                                      10370000
             ELSE                                                       10380000
              DO;               /* IF NEXT COUNTRY RECORD STARTS     */ 10390000
               COUNT.CNT_CTRY.RCBBKB0_NXT =                             10400000
                                     COUNT.CNT_CTRY.RCBBKB0_NXT+1;      10410000
               WRK_KB0_CTRYNO_NXT = RCBBKB0_C002.IOPUCTY;               10420000
              END;                                                      10430000
                                                                        10440000
             VALIDATE_C002.CTRYNO           = RCBBKB0_C002.IOPUCTY;     10450000
             VALIDATE_C002.TYPE             = RCBBKB0_C002.CSLMTYP;     10460000
             VALIDATE_C002.SERIAL           = RCBBKB0_C002.IHSIMID;     10470000
             VALIDATE_C002.EFF_DATE         = RCBBKB0_C002.DDBSEFF;     10480000
             VALIDATE_C002.STOP_DATE        = RCBBKB0_C002.DDBSIAC;     10490000
             VALIDATE_C002.CUSTOMER         = RCBBKB0_C002.ICUSHWU;     10500000
             VALIDATE_C002.SERV_START       = RCBBKB0_C002.DAGRASS;     10510000
             VALIDATE_C002.SERV_END         = RCBBKB0_C002.DAGREXP;     10520000
                                                                        10530000
             CALL VALIDATE_C002_REC;                                    10540000
             SWITCH_INVALID_UPGD =  FALSE;                              10550000
                                   /* IF INVALID UPGD TYPE REQUESTED */ 10560000
             IF ((WRK_UPGD_TYP ¬= 'W') & (WRK_UPGD_TYP ¬= 'M')) THEN    10570000
               DO;                                                      10580000
                 SWITCH_INVALID_UPGD =  TRUE;                           10590000
               END;                                                     10600000
                                                                        10610000
           END;                                                         10620000
         WHEN ('C999')                                                  10630000
           DO;                                                          10640000
             SK_KB0.CTRYNO  = HIGH (3);                 /* FORCE EOC */ 10650000
             SK_KB0.EOF     = '1';                      /* FORCE EOF */ 10660000
             EOF_RCBBKB0    = TRUE;                     /* FORCE EOF */ 10670000
             COUNT.CNT_TOT.RCBBKB0 = COUNT.CNT_TOT.RCBBKB0 + 1;         10680000
           END;                                                         10690000
         OTHERWISE                                                      10700000
           DO;                                                          10710000
             G_WRKMSG.TXTFIELD_1 = RCBBKB0_C002.IOPUCTY;                10720000
             G_WRKMSG.TXTFIELD_2 = 'RCBBKB0';                           10730000
             G_WRKMSG.TXTFIELD_3 = RCBBKB0_C000.RECORD_TYPE;            10740000
             CALL ISSUE_MSG('0018');                                    10750000
             CALL RCBBKXM_ERROR (NULL, 'OTHER', '#017');                10760000
           END;                                                         10770000
       END; /* END OF SELECT */                                         10780000
     END;                                                               10790000
                                                                        10800000
 END READ_RCBBKB0_REC;                                                  10810000
1/********************************************************************/ 10820000
 /*                                                                  */ 10830000
 /* MODULE NAME      : CHECK_RCBBKB0_REC                             */ 10840000
 /*                                                                  */ 10850000
 /* DESCRIPTION      : REJECT IF INVALID RECORD                      */ 10860000
 /*                    REJECT IF INVALID UPGRADE TYPE                */ 10870000
 /*  ABOVE CHECKS ARE DONE ONLY IF THE RECORD CTRY = PROCESSING CTRY */ 10880000
 /********************************************************************/ 10890000
 CHECK_RCBBKB0_REC : PROC;                                              10900000
                                                                        10910000
 DO WHILE (   (¬EOF_RCBBKB0 )                                           10920000
            & (SWITCH_INVALID | SWITCH_INVALID_UPGD)                    10930000
            & (WRK_CTRYNO = RCBBKB0_C002.IOPUCTY)     );                10940000
    IF SWITCH_INVALID_UPGD THEN                                         10950000
       CALL ISSUE_MSG('0258');                                          10960000
    COUNT.CNT_CTRY.RCBBKB0_REJ = COUNT.CNT_CTRY.RCBBKB0_REJ + 1;        10970000
    CALL READ_RCBBKB0_REC;                                              10980000
 END;                                                                   10990000
                                                                        11000000
 END CHECK_RCBBKB0_REC;                                                 11010000
1/********************************************************************/ 11020000
 /*                                                                  */ 11030000
 /* MODULE NAME      : READ_RCBBKB0_ARRAY                            */ 11040000
 /*                                                                  */ 11050000
 /* DESCRIPTION      : READ A UPGRADE RECORD FROM RCBBKB0 ARRAY.     */ 11060000
 /*                    ITS SIMILAR TO READING FROM FILE & ASSIGN THE */ 11070000
 /*                    VARIABLES SAME AS ITS DONE IN READING FROM FIL*/ 11080000
 /*                                                                  */ 11090000
 /********************************************************************/ 11100000
 READ_RCBBKB0_ARRAY : PROC (WRK_INDEX);                                 11110000
                                                                        11120000
   DCL WRK_INDEX         FIXED BIN(31);                                 11130000
                                                                        11140000
   IF (WRK_INDEX > (KB0_ARRAY_COUNT + 1)) THEN                          11150000
     DO;                                                                11160000
       CALL RCBBKXM_ERROR (NULL, 'OTHER', '#018');                      11170000
     END;                                                               11180000
                                                                        11190000
   RCBBKB0_REC = RCBBKB0_REC_ARRAY(WRK_INDEX);                          11200000
                                                                        11210000
   SELECT (RCBBKB0_C000.RECORD_TYPE);           /* CHECK RECORD TYPE */ 11220000
     WHEN ('C002')                                                      11230000
       DO;                                                              11240000
         SK_KB0.CTRYNO  = RCBBKB0_C002.IOPUCTY;                         11250000
         SK_KB0.TYPE    = RCBBKB0_C002.CSLMTYP;                         11260000
         SK_KB0.SERIAL  = RCBBKB0_C002.IHSIMID;                         11270000
                                                                        11280000
         WRK_UPGD_TYP  =  RCBBKB0_C002.UPGRADE_TYPE;                    11290000
       END;                                                             11300000
     WHEN ('C999')                                                      11310000
       DO;                                                              11320000
         SK_KB0.CTRYNO  = HIGH (3);                     /* FORCE EOC */ 11330000
         SK_KB0.EOF     = '1';                          /* FORCE EOF */ 11340000
         EOF_RCBBKB0    = TRUE;                         /* FORCE EOF */ 11350000
       END;                                                             11360000
     OTHERWISE                                                          11370000
       DO;                                                              11380000
         G_WRKMSG.TXTFIELD_1 = RCBBKB0_C002.IOPUCTY;                    11390000
         G_WRKMSG.TXTFIELD_2 = 'RCBBKB0 ARRAY';                         11400000
         G_WRKMSG.TXTFIELD_3 = RCBBKB0_C000.RECORD_TYPE;                11410000
         CALL ISSUE_MSG('0018');                                        11420000
         CALL RCBBKXM_ERROR (NULL, 'OTHER', '#019');                    11430000
       END;                                                             11440000
   END; /* END OF SELECT */                                             11450000
                                                                        11460000
 END READ_RCBBKB0_ARRAY;                                                11470000
1/********************************************************************/ 11480000
 /*                                                                  */ 11490000
 /* MODULE NAME      : READ_RCBBKB0_ARRAY_NEXT                       */ 11500000
 /*                                                                  */ 11510000
 /* DESCRIPTION      : READ NEXT VALID REC AND REQUESTED UPGRADE TYPE*/ 11520000
 /*                    RECORD FROM KB0 ARRAY IN CASE MORE THEN 1     */ 11530000
 /*                    RECORD PRESENT FOR THE SAME TOS               */ 11540000
 /*                                                                  */ 11550000
 /* EX :PRESENT TOS EFF AND END DATE    |------------| MSU           */ 11560000
 /* 1) IGNORE IF FULL OVERLAP  OR         |------| MSU               */ 11570000
 /*    OTHER THEN REQUESTED UPGRADE TYPE               |-----| WSU  */  11580000
 /*    AND CHECK NEXT RECORD                                         */ 11590000
 /* 2) TRUNCATE IF PARTIAL OVERLAP                 |-----------|MSU  */ 11600000
 /*                       O/P OF PROC                 |--------|MSU  */ 11610000
 /* 3) IF NO OVERLAP THEN SEND AS IT IS            MSU  |---------|  */ 11620000
 /*                       O/P OF PROC              MSU  |---------|  */ 11630000
 /********************************************************************/ 11640000
 READ_RCBBKB0_ARRAY_NEXT : PROC (WRK_TYPE, WRK_INDEX1)                  11650000
                           RETURNS(FIXED BIN(31));                      11660000
                                                                        11670000
 DCL WRK_INDEX1        FIXED BIN(31);                                   11680000
 DCL WRK_TYPE          CHAR(01);                                        11690000
 DCL WRK_END           CHAR(10);                                        11700000
 DCL WRK_SWITCH        BIT (1);                                         11710000
                                                                        11720000
 WRK_END     = '';                                                      11730000
 WRK_SWITCH  = FALSE;                                                   11740000
                                                                        11750000
 IF ( (WRK_INDEX1 > (KB0_ARRAY_COUNT+1)) |                              11760000
      (WRK_INDEX1 <= 0             )  ) THEN                            11770000
   DO;                                                                  11780000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#020');                        11790000
   END;                                                                 11800000
                                                                        11810000
 IF WRK_INDEX1 = 1 THEN                                                 11820000
   DO;        /* READ FIRST REQUESTED UPGRADE TYPE RECORD FOR THE TOS*/ 11830000
     CALL READ_RCBBKB0_ARRAY(WRK_INDEX1);                               11840000
     DO WHILE ((WRK_UPGD_TYP ¬= WRK_TYPE) & (J <= KB0_ARRAY_COUNT ));   11850000
       WRK_INDEX1 = WRK_INDEX1 +1;                                      11860000
       CALL READ_RCBBKB0_ARRAY(WRK_INDEX1);                             11870000
     END;                                                               11880000
   END;                                                                 11890000
 ELSE                                                                   11900000
   DO;                         /* IF MORE THEN ONE RECORD PRESENT    */ 11910000
     WRK_END = RCBBKB0_C002.DDBSIAC;                                    11920000
     DO WHILE ( (WRK_INDEX1 <= KB0_ARRAY_COUNT )                        11930000
              & ( ¬WRK_SWITCH                  ));                      11940000
      CALL READ_RCBBKB0_ARRAY(WRK_INDEX1);                              11950000
                               /* SKIP IF UPGRADE TYPE NOT REQUESTED */ 11960000
      IF WRK_UPGD_TYP = WRK_TYPE THEN                                   11970000
       DO;                     /* SKIP IF FULL OVERLAP               */ 11980000
        IF RCBBKB0_C002.DDBSIAC > WRK_END THEN                          11990000
         DO;                   /* TRUNCATE OF PARTIAL OVERLAP        */ 12000000
            IF RCBBKB0_C002.DDBSEFF <= WRK_END THEN                     12010000
             DO;                                                        12020000
              RCBBKB0_C002.DDBSEFF = CALC_DATE(WRK_END,'D',1);          12030000
             END;                                                       12040000
            WRK_SWITCH = TRUE;                                          12050000
         END;                                                           12060000
        ELSE                                                            12070000
         DO;                   /* INCREMENT INDEX IF FULL OVERLAP    */ 12080000
          WRK_INDEX1 = WRK_INDEX1 + 1;                                  12090000
         END;                                                           12100000
       END;                                                             12110000
      ELSE                                                              12120000
       DO;                     /* INCREMENT INDEX IF NOT REQ UPGD TYP*/ 12130000
        WRK_INDEX1 = WRK_INDEX1 + 1;                                    12140000
       END;                                                             12150000
     END; /* END DO-WHILE */                                            12160000
   END;   /* END ELSE     */                                            12170000
                             /* READ NEXT IF ALL RECORDS OF TOS READ */ 12180000
 IF WRK_INDEX1 = (KB0_ARRAY_COUNT+1) THEN                               12190000
   CALL READ_RCBBKB0_ARRAY(WRK_INDEX1);                                 12200000
                                                                        12210000
 RETURN(WRK_INDEX1);                                                    12220000
                                                                        12230000
 END READ_RCBBKB0_ARRAY_NEXT;                                           12240000
1/********************************************************************/ 12250000
 /*                                                                  */ 12260000
 /* MODULE NAME      : READ_BAU_WARR                                 */ 12270000
 /*                                                                  */ 12280000
 /* DESCRIPTION      : READ BAU WARRANTY FROM T220 FOR THE TOS       */ 12290000
 /*                                                                  */ 12300000
 /********************************************************************/ 12310000
 READ_BAU_WARR : PROC;                                                  12320000
       /* SWITCH TO CHECK WHETHER PI WARR IS READ OR NOT FOR THE TOS*/  12330000
       /* THIS WILL BE SET TO FALSE AFTER READING PI WARR           */  12340000
 SWITCH_READ_PI_WARR = TRUE;                                            12350000
 EOC_T051_WARR = FALSE;                                                 12360000
 TB_RCBV051 = '';                                                       12370000
                                                                        12380000
 K = 0;                                                                 12390000
 T220_ARRAY_COUNT = 0;                                                  12400000
                                                                        12410000
 EOC_T220_WARR = FALSE;                                                 12420000
                                                                        12430000
 T220_EFF_DATE_NXT   = '';                                              12440000
                                                                        12450000
 T220_ARRAY(*)       = '';                                              12460000
 T220_ARRAY_SAVED(*) = '';                                              12470000
 TB_RCBV220 = '';                                                       12480000
                            /* ASSIGN VALUES FOR CURSOR_T220_BAU_WARR*/ 12490000
 TB_RCBV220.COUNTRY_NUMBER   = SK_KB0.CTRYNO;                           12500000
 TB_RCBV220.PRODUCT_TYPE     = SK_KB0.TYPE;                             12510000
 TB_RCBV220.ORIGIN           = SUBSTR(SK_KB0.SERIAL,1,2);               12520000
 TB_RCBV220.SEQUENCE_NUMBER  = SUBSTR(SK_KB0.SERIAL,3,7);               12530000
                                                                        12540000
                                 /* READ T220 WARRANTY RECORDS       */ 12550000
                                 /* OPEN CURSOR CURSOR_T220_BAU_WARR */ 12560000
 EXEC SQL                                                               12570000
   OPEN CURSOR_T220_BAU_WARR;                                           12580000
                                                                        12590000
 SELECT (SQLCODE);                                                      12600000
   WHEN (0);                                                            12610000
   OTHERWISE                                                            12620000
     DO;                                                                12630000
        CALL RCBBKXM_ERROR (ADDR (SQLCA),'DB2','#021');                 12640000
     END;                                                               12650000
 END;                                                                   12660000
                                                                        12670000
 DO WHILE (¬EOC_T220_WARR);      /* FETCH T220 WARR RECORDS TILL EOC */ 12680000
   TB_RCBV220 = '';                                                     12690000
                                                                        12700000
   EXEC SQL                                                             12710000
     FETCH CURSOR_T220_BAU_WARR                                         12720000
     INTO :TB_RCBV220.EFFECTIVE_DATE      :WRK_INDNULL                  12730000
         ,:TB_RCBV220.END_DATE            :WRK_INDNULL;                 12740000
                                                                        12750000
   SELECT (SQLCODE);                                                    12760000
    WHEN (0)                                                            12770000
      DO;                                                               12780000
        IF TB_RCBV220.EFFECTIVE_DATE = T220_EFF_DATE_NXT THEN           12790000
          DO;                    /* IF STARTS JUST NEXT DAY TO OLD   */ 12800000
            T220_ARRAY.END_DATE(K) = TB_RCBV220.END_DATE;               12810000
          END;                                                          12820000
        ELSE                     /* IF NOT CONTNUOUS WARR PERIOD     */ 12830000
          DO;                                                           12840000
            K = K + 1;                                                  12850000
            T220_ARRAY.END_DATE(K) = TB_RCBV220.END_DATE;               12860000
            T220_ARRAY.EFFECTIVE_DATE(K) = TB_RCBV220.EFFECTIVE_DATE;   12870000
          END;                                                          12880000
        T220_EFF_DATE_NXT = CALC_DATE(TB_RCBV220.END_DATE,'D',1);       12890000
      END;                                                              12900000
    WHEN (100)                                                          12910000
      DO;                        /* IF CURSOR REACHES END            */ 12920000
        T220_ARRAY_COUNT = K;                                           12930000
        T220_ARRAY_SAVED = T220_ARRAY;                                  12940000
        EOC_T220_WARR = TRUE;                                           12950000
      END;                                                              12960000
    OTHERWISE                                                           12970000
      DO;                                                               12980000
        CALL RCBBKXM_ERROR (ADDR (SQLCA),'DB2','#022');                 12990000
      END;                                                              13000000
   END; /* END OF SELECT */                                             13010000
 END; /* END DO-WHILE */                                                13020000
                                                                        13030000
                                 /* CLOSE CURSOR CURSOR_T220_BAU_WARR*/ 13040000
 EXEC SQL                                                               13050000
   CLOSE CURSOR_T220_BAU_WARR;                                          13060000
                                                                        13070000
 SELECT (SQLCODE);                                                      13080000
   WHEN (0);                                                            13090000
   OTHERWISE                                                            13100000
     DO;                                                                13110000
        CALL RCBBKXM_ERROR (ADDR (SQLCA),'DB2','#023');                 13120000
     END;                                                               13130000
 END;                                                                   13140000
                                                                        13150000
 END READ_BAU_WARR;                                                     13160000
1/********************************************************************/ 13170000
 /*                                                                  */ 13180000
 /* MODULE NAME      : READ_PI_WARR                                  */ 13190000
 /*                                                                  */ 13200000
 /* DESCRIPTION      : READ PI WARRANTY FROM T051 TABLE FOR THE TOS  */ 13210000
 /*                                                                  */ 13220000
 /********************************************************************/ 13230000
 READ_PI_WARR : PROC;                                                   13240000
            /* INDICATES THAT PI WARR READ FOR THE TOS, USED TO AVOID*/ 13250000
            /* REPEATED READ OF WARR REC FOR THE SAME TOS            */ 13260000
 SWITCH_READ_PI_WARR = FALSE;                                           13270000
                                                                        13280000
 EOC_T051_WARR = FALSE;                                                 13290000
                                                                        13300000
 TB_RCBV051 = '';                                                       13310000
                            /* ASSIGN VALUES FOR T051 SQL QUERY      */ 13320000
 TB_RCBV051.COUNTRY_NUMBER   = SK_KB0.CTRYNO;                           13330000
 TB_RCBV051.PRODUCT_TYPE     = SK_KB0.TYPE;                             13340000
 TB_RCBV051.ORIGIN           = SUBSTR(SK_KB0.SERIAL,1,2);               13350000
 TB_RCBV051.SEQUENCE_NUMBER  = SUBSTR(SK_KB0.SERIAL,3,7);               13360000
                                                                        13370000
                                 /* READ T051 WARRANTY RECORD        */ 13380000
   EXEC  SQL                                                            13390000
 SELECT  INSTALL_DATE                                                   13400000
        ,WARRANTY_EXP_DATE                                              13410000
   INTO  :TB_RCBV051.INSTALL_DATE            :WRK_INDNULL               13420000
        ,:TB_RCBV051.WARRANTY_EXP_DATE       :WRK_INDNULL               13430000
   FROM  RCBV0051_PI_HW_PR                                              13440000
  WHERE  COUNTRY_NUMBER    = :TB_RCBV051.COUNTRY_NUMBER                 13450000
    AND  PRODUCT_TYPE      = :TB_RCBV051.PRODUCT_TYPE                   13460000
    AND  ORIGIN            = :TB_RCBV051.ORIGIN                         13470000
    AND  SEQUENCE_NUMBER   = :TB_RCBV051.SEQUENCE_NUMBER                13480000
    AND  TYPE_OF_WARRANTY ¬= ''                                         13490000
    AND  TYPE_OF_WARRANTY IS NOT NULL                                   13500000
  ORDER  BY 1,2;                                                        13510000
                                                                        13520000
 SELECT (SQLCODE);                                                      13530000
  WHEN (0);                                                             13540000
  WHEN (100)                                                            13550000
    DO;                                                                 13560000
      EOC_T051_WARR = TRUE;                                             13570000
    END;                                                                13580000
  OTHERWISE                                                             13590000
    DO;                                                                 13600000
      CALL RCBBKXM_ERROR (ADDR (SQLCA),'DB2','#024');                   13610000
    END;                                                                13620000
 END;                                                                   13630000
                                                                        13640000
 END READ_PI_WARR;                                                      13650000
1/********************************************************************/ 13660000
 /*                                                                  */ 13670000
 /* MODULE NAME      : WRITE_RCBBKX0_REC                             */ 13680000
 /*                                                                  */ 13690000
 /* DESCRIPTION      : WRITE KX0 C002 AND C003 RECORDS TO O/P        */ 13700000
 /*                                                                  */ 13710000
 /********************************************************************/ 13720000
 WRITE_RCBBKX0_REC : PROC;                                              13730000
       /* IF NO RECORD IN KZ0 FOR THE COUNTRY AND WSU RECORDS PRESENT */13740000
       /* IN THE UPGRADE FILE FOR THAT COUNTRY THEN HEADER IS WRITTEN */13750000
       /* INTO THE KX0 O/P FILE                                       */13760000
 SWITCH_RCBBKB0_HEADER = FALSE;                                         13770000
                                                                        13780000
 IF (¬SWITCH_RCBBKZ0_HEADER & ¬SWITCH_RCBBKB0_HEADER) THEN              13790000
   DO;                                                                  13800000
     RCBBKX0_REC_TEMP = RCBBKX0_REC;                                    13810000
     RCBBKX0_REC = '';                                                  13820000
     RCBBKX0_C001.CDBSFRT = 'C001';                                     13830000
     RCBBKX0_C001.IOPUCTY = WRK_CTRYNO;                                 13840000
     WRITE FILE(RCBBKX0) FROM(RCBBKX0_REC);                             13850000
     COUNT.CNT_CTRY.RCBBKX0 = COUNT.CNT_CTRY.RCBBKX0 + 1 ;              13860000
     RCBBKX0_REC = RCBBKX0_REC_TEMP;                                    13870000
     SWITCH_RCBBKB0_HEADER = TRUE;                                      13880000
     SWITCH_WRITE_TRAILER  = TRUE;                                      13890000
   END;                                                                 13900000
        /* ASSIGN SERVICE PERIOD FOR KX0 WHEN ITS A WSU UPGRADED REC */ 13910000
 IF ASSIGN_SERV_PERIOD = 'WSU' THEN                                     13920000
  DO;                                                                   13930000
   IF ((RCBBKX0_C002.DAGRASS  > T220_WARR_COPY.EFFECTIVE_DATE)&         13940000
       T220_WARR_COPY.EFFECTIVE_DATE ¬= ''                    ) THEN    13950000
      RCBBKX0_C002.DAGRASS  = T220_WARR_COPY.EFFECTIVE_DATE;            13960000
   ELSE                                                                 13970000
   IF ((RCBBKX0_C002.DAGRASS  > TB_RCBV051.INSTALL_DATE)&               13980000
       TB_RCBV051.INSTALL_DATE  ¬= ''                   ) THEN          13990000
      RCBBKX0_C002.DAGRASS  = TB_RCBV051.INSTALL_DATE;                  14000000
                                                                        14010000
   IF ((RCBBKX0_C002.DAGREXP  < T220_WARR_COPY.END_DATE)&               14020000
       T220_WARR_COPY.END_DATE ¬= ''                    ) THEN          14030000
      RCBBKX0_C002.DAGREXP  = T220_WARR_COPY.END_DATE;                  14040000
   ELSE                                                                 14050000
   IF ((RCBBKX0_C002.DAGREXP  < TB_RCBV051.WARRANTY_EXP_DATE)&          14060000
       TB_RCBV051.WARRANTY_EXP_DATE ¬= ''                    ) THEN     14070000
      RCBBKX0_C002.DAGREXP  = TB_RCBV051.WARRANTY_EXP_DATE;             14080000
  END;                                                                  14090000
 ELSE   /* ASSIGN SERVICE PERIOD FOR KX0 WHEN ITS A MSU UPGRADED REC */ 14100000
 IF ASSIGN_SERV_PERIOD = 'MSU' THEN                                     14110000
  DO;                                                                   14120000
   IF RCBBKX0_C002.DAGRASS  > RCBBKZ0_C002_COPY.DAGRASS THEN            14130000
      RCBBKX0_C002.DAGRASS  = RCBBKZ0_C002_COPY.DAGRASS;                14140000
                                                                        14150000
   IF RCBBKX0_C002.DAGREXP  < RCBBKZ0_C002_COPY.DDBSIAC THEN            14160000
      RCBBKX0_C002.DAGREXP  = RCBBKZ0_C002_COPY.DDBSIAC;                14170000
  END;                                                                  14180000
                                                                        14190000
 IF RCBBKB0_EXTENSION.UPGRADE_TYPE = 'W' |                              14200000
    RCBBKB0_EXTENSION.UPGRADE_TYPE = 'M'   THEN                         14210000
 DO;                                                                    14220000
                             /* KZ0-MODEL OVERRULES KB0-MODEL        */ 14230000
  IF RCBBKZ0_C002.CSLMMOD ¬= '' THEN                                    14240000
    RCBBKX0_C002.CSLMMOD = RCBBKZ0_C002.CSLMMOD;                        14250000
                             /* CALL USER EXIT RCBBK6U TO ALLOW GEO  */ 14260000
                             /* TO CUSTOMIZE THE UPGRADED KX0 RECORD */ 14270000
  CALL RCBBK6U_USER_EXIT;                                               14280000
 END;                                                                   14290000
                                                                        14300000
 RCBBKB0_EXTENSION = '';                                                14310000
 ASSIGN_SERV_PERIOD = '';                                               14320000
                                                                        14330000
 WRITE FILE(RCBBKX0) FROM(RCBBKX0_REC);                                 14340000
                                                                        14350000
 COUNT.CNT_CTRY.RCBBKX0 = COUNT.CNT_CTRY.RCBBKX0 + 1;                   14360000
                                                                        14370000
 WRK_HASH_FIELD = SUBSTR (RCBBKX0_C002.IHSIMID,5,4);                    14380000
 CALL RCB018M (WRK_HASH_FIELD,                                          14390000
               COUNT.CNT_CTRY.RCBBKX0_HASH,                             14400000
               PTR_INT_AREA);                                           14410000
                                                                        14420000
 RCBBKX0_REC = '';                                                      14430000
                                                                        14440000
 END WRITE_RCBBKX0_REC;                                                 14450000
1/********************************************************************/ 14460000
 /*                                                                  */ 14470000
 /* MODULE NAME      : RCBBK6U_USER_EXIT                             */ 14480000
 /*                                                                  */ 14490000
 /* DESCRIPTION      : CALL USER EXIT TO ALLOW GE0 TO UPDATE THE     */ 14500000
 /*                    CONTENTS OF THE UPGRADED CONTRACT RECORD      */ 14510000
 /*                                                                  */ 14520000
 /* BRIEF NOTE ABOUT THE INPUT/OUTPUT RECORD VARIABLES :             */ 14530000
 /*                                                                  */ 14540000
 /* RCBBKX0_C002       >-CONTAINS THE WSU/MSU UPGRADED RECORD        */ 14550000
 /*                     -INPUT/OUTPUT TO USER EXIT                   */ 14560000
 /*                                                                  */ 14570000
 /* RCBBKB0_EXTENSION ->-CONTAINS THE EXTRA FILEDS SUPPLIED IN KB0   */ 14580000
 /*                      FILE, AS KX0 FILE STRUCTURE DOES'NT CONTAIN */ 14590000
 /*                      THOSE INFORMATION                           */ 14600000
 /*                     -INPUT TO USER EXIT                          */ 14610000
 /*                                                                  */ 14620000
 /* RCBBKZ0_C002_COPY ->-CONTAINS COPY OF KZ0 RECORD                 */ 14630000
 /*                     -BLANK IF WSU DOES NOT HAVE CORRESPONDING    */ 14640000
 /*                      CONTRACT IN KZ0                             */ 14650000
 /*                     -ALWAYS THERE WILL BE A CORRESPONDING KZ0 REC*/ 14660000
 /*                      FOR MSU UPGRADES                            */ 14670000
 /*                     -INPUTTO USER EXIT                           */ 14680000
 /********************************************************************/ 14690000
 RCBBK6U_USER_EXIT  : PROC;                                             14700000
                                                                        14710000
 IF SWITCH_USER_EXIT_6 THEN                                             14720000
  DO;                                                                   14730000
   RCBBKZ0_C002_COPY1 = RCBBKZ0_C002_COPY;                              14740000
                                                                        14750000
   CALL RCBBK6U (ADDR (SWITCH_USER_EXIT_6),                             14760000
                 ADDR (RCBBKX0_C002),     /*WSU/MSU UPGRADED RECORD  */ 14770000
                 ADDR (RCBBKB0_EXTENSION),/*UPGD_TYPE,IOBJNIK,IUSCNIK*/ 14780000
                 ADDR (RCBBKZ0_C002_COPY1),/*COPY OF RCBBKZ0 RECORD  */ 14790000
                 PTR_INT_AREA);                                         14800000
  END;                                                                  14810000
                                                                        14820000
 END RCBBK6U_USER_EXIT;                                                 14830000
1/********************************************************************/ 14840000
 /*                                                                  */ 14850000
 /* MODULE NAME      : VALIDATE_C002_REC                             */ 14860000
 /*                                                                  */ 14870000
 /* DESCRIPTION      : VALIDATE THE FIELDS IN C002 AND C003 RECORDS  */ 14880000
 /*                                                                  */ 14890000
 /********************************************************************/ 14900000
 VALIDATE_C002_REC: PROC;                                               14910000
                                                                        14920000
 SWITCH_INVALID     = FALSE;                                            14930000
 ERROR_SWITCH(*)    = FALSE;                                            14940000
                                            /* VALIDATE PRODUCT TYPE */ 14950000
 IF (VERIFY(VALIDATE_C002.TYPE,ALPHA)¬=0)                               14960000
 THEN                                                                   14970000
 DO;                                                                    14980000
    SWITCH_INVALID                = TRUE;                               14990000
    CALL ISSUE_MSG('0201');                                             15000000
 END;                                                                   15010000
                                           /* VALIDATE SERIAL NUMBER */ 15020000
 IF (VERIFY(VALIDATE_C002.SERIAL,ALPHA)¬=0)                             15030000
 THEN                                                                   15040000
 DO;                                                                    15050000
    SWITCH_INVALID                = TRUE;                               15060000
    CALL ISSUE_MSG('0199');                                             15070000
 END;                                                                   15080000
                                                /* VALIDATE EFF_DATE */ 15090000
 IF (VALIDATE_C002.EFF_DATE ¬= '') &                                    15100000
    (¬ VALIDATE_DATE(VALIDATE_C002.EFF_DATE))                           15110000
 THEN                                                                   15120000
 DO;                                                                    15130000
    SWITCH_INVALID                = TRUE;                               15140000
    ERROR_SWITCH(1)               = TRUE;                               15150000
                                                                        15160000
    G_WRKMSG.TXTFIELD_1 = 'RECORD START DATE';                          15170000
    G_WRKMSG.TXTFIELD_2 = VALIDATE_C002.EFF_DATE;                       15180000
    G_WRKMSG.TXTFIELD_3 = 'HW';                                         15190000
    G_WRKMSG.TXTFIELD_4 = VALIDATE_C002.TYPE                            15200000
                        ||VALIDATE_C002.SERIAL;                         15210000
    CALL ISSUE_MSG('0012');                                             15220000
 END;                                                                   15230000
                                                /* VALIDATE END_DATE */ 15240000
 IF (VALIDATE_C002.STOP_DATE ¬= '') &                                   15250000
    (¬ VALIDATE_DATE(VALIDATE_C002.STOP_DATE))                          15260000
 THEN                                                                   15270000
 DO;                                                                    15280000
    SWITCH_INVALID                = TRUE;                               15290000
    ERROR_SWITCH(2)               = TRUE;                               15300000
                                                                        15310000
    G_WRKMSG.TXTFIELD_1 = 'RECORD END DATE';                            15320000
    G_WRKMSG.TXTFIELD_2 = VALIDATE_C002.STOP_DATE;                      15330000
    G_WRKMSG.TXTFIELD_3 = 'HW';                                         15340000
    G_WRKMSG.TXTFIELD_4 = VALIDATE_C002.TYPE                            15350000
                        ||VALIDATE_C002.SERIAL;                         15360000
    CALL ISSUE_MSG('0012');                                             15370000
 END;                                                                   15380000
                                                                        15390000
 IF (ERROR_SWITCH(1) = FALSE & ERROR_SWITCH(2) = FALSE) &               15400000
    (VALIDATE_C002.STOP_DATE < VALIDATE_C002.EFF_DATE)                  15410000
 THEN                                                                   15420000
 DO;                                                                    15430000
   CALL ISSUE_MSG('0237');                                              15440000
   VALIDATE_C002.STOP_DATE       = VALIDATE_C002.EFF_DATE;              15450000
   RCBBKB0_C002.DDBSIAC = VALIDATE_C002.STOP_DATE;                      15460000
 END;                                                                   15470000
                                               /* VALIDATE CUSTOMER */  15480000
 IF (VERIFY(VALIDATE_C002.CUSTOMER,ALPHA)¬=0)                           15490000
 THEN                                                                   15500000
 DO;                                                                    15510000
   SWITCH_INVALID                = TRUE;                                15520000
   CALL ISSUE_MSG('0198');                                              15530000
 END;                                                                   15540000
                                     /* VALIDATE SERVICE START DATE */  15550000
 IF (VALIDATE_C002.SERV_START ¬= '') &                                  15560000
      ( ¬ VALIDATE_DATE(VALIDATE_C002.SERV_START))                      15570000
 THEN                                                                   15580000
 DO;                                                                    15590000
   SWITCH_INVALID                = TRUE;                                15600000
   ERROR_SWITCH(3)               = TRUE;                                15610000
   G_WRKMSG.TXTFIELD_1 = 'SERVICE START DATE';                          15620000
   G_WRKMSG.TXTFIELD_2 = VALIDATE_C002.SERV_START;                      15630000
   G_WRKMSG.TXTFIELD_3 = 'HW';                                          15640000
   G_WRKMSG.TXTFIELD_4 = VALIDATE_C002.TYPE                             15650000
                       ||VALIDATE_C002.SERIAL;                          15660000
   CALL ISSUE_MSG('0012');                                              15670000
 END;                                                                   15680000
                                       /* VALIDATE SERVICE END DATE */  15690000
 IF (VALIDATE_C002.SERV_END ¬= '') &                                    15700000
     ( ¬ VALIDATE_DATE(VALIDATE_C002.SERV_END))                         15710000
 THEN                                                                   15720000
 DO;                                                                    15730000
   SWITCH_INVALID                = TRUE;                                15740000
   ERROR_SWITCH(4)               = TRUE;                                15750000
   G_WRKMSG.TXTFIELD_1 = 'SERVICE END DATE';                            15760000
   G_WRKMSG.TXTFIELD_2 = VALIDATE_C002.SERV_END;                        15770000
   G_WRKMSG.TXTFIELD_3 = 'HW';                                          15780000
   G_WRKMSG.TXTFIELD_4 = VALIDATE_C002.TYPE                             15790000
                       ||VALIDATE_C002.SERIAL;                          15800000
   CALL ISSUE_MSG('0012');                                              15810000
 END;                                                                   15820000
                                                                        15830000
      /* IF SERVICE END DATE IS PRIOR TO SERVICE START DATE,THEN SET*/  15840000
      /* SERVICE END DATE TO SERVICE START DATE AND GENERATE WARNING*/  15850000
 IF (ERROR_SWITCH(3) = FALSE & ERROR_SWITCH(4) = FALSE) &               15860000
    (VALIDATE_C002.SERV_END < VALIDATE_C002.SERV_START)                 15870000
 THEN                                                                   15880000
 DO;                                                                    15890000
   CALL ISSUE_MSG('0238');                                              15900000
   VALIDATE_C002.SERV_END        = VALIDATE_C002.SERV_START;            15910000
   RCBBKB0_C002.DAGREXP = VALIDATE_C002.SERV_END;                       15920000
 END;                                                                   15930000
                                                                        15940000
       /* CHECK IF RECORD EFFECTIVE PERIOD IS WITHIN SERVICE PERIOD */  15950000
 IF (ERROR_SWITCH(1) = FALSE & ERROR_SWITCH(2) = FALSE &                15960000
     ERROR_SWITCH(3) = FALSE & ERROR_SWITCH(4) = FALSE ) &              15970000
 ((VALIDATE_C002.EFF_DATE < VALIDATE_C002.SERV_START) |                 15980000
 (VALIDATE_C002.EFF_DATE > VALIDATE_C002.SERV_END)) &                   15990000
 ((VALIDATE_C002.STOP_DATE > VALIDATE_C002.SERV_END) |                  16000000
  (VALIDATE_C002.STOP_DATE < VALIDATE_C002.SERV_START))                 16010000
 THEN                                                                   16020000
 DO;                                                                    16030000
   CALL ISSUE_MSG('0239');                                              16040000
 END;                                                                   16050000
                                                                        16060000
 END VALIDATE_C002_REC;                                                 16070000
1/********************************************************************/ 16080000
 /*                                                                  */ 16090000
 /* MODULE NAME      : VALIDATE_DATE                                 */ 16100000
 /*                                                                  */ 16110000
 /* DESCRIPTION      : VALIDATE DATE PROCESSING                      */ 16120000
 /********************************************************************/ 16130000
0VALIDATE_DATE: PROC (DATE_IN) RETURNS(BIT(1));                         16140000
                                                                        16150000
 DCL L_RET            BIT(1) INIT('1'B);                                16160000
 DCL DATE_IN          CHAR(10);                                         16170000
                                                                        16180000
 L_RET                   = '1'B;                                        16190000
                                                                        16200000
 DATE_AREA               = '';                                          16210000
 DATE_AREA.WD_IN_FORMAT  = 'ISO';                                       16220000
 DATE_AREA.WD_OUT_FORMAT = 'ISO';                                       16230000
 DATE_AREA.WD_FUNCTION   = 'V';                                         16240000
 DATE_AREA.WD_IN_DATE    = DATE_IN;                                     16250000
 CALL RCB004M (PTR_DATE_AREA);                                          16260000
                                         /* TEST RESULT FROM RCB004M */ 16270000
 IF (DATE_AREA.WD_STATUS ¬= ' ') THEN                                   16280000
 DO;                                                                    16290000
   L_RET = FALSE;                                                       16300000
 END;                                                                   16310000
                                                                        16320000
 RETURN(L_RET);                                                         16330000
                                                                        16340000
0END VALIDATE_DATE;                                                     16350000
1/********************************************************************/ 16360000
 /*                                                                  */ 16370000
 /* MODULE NAME      : PROCESS_NON_UPGRADES                          */ 16380000
 /*                                                                  */ 16390000
 /* DESCRIPTION      : HANDLE                                        */ 16400000
 /*                    IF NO RECORDS PRESENT FOR THE REQUESTED CTRY  */ 16410000
 /*                    IF COUNTRY NOT REQUESTED FOR PROCESSING       */ 16420000
 /*                    IF NO UPGRADES PRESENT FOR THE COUNTRY        */ 16430000
 /********************************************************************/ 16440000
 PROCESS_NON_UPGRADES : PROC;                                           16450000
                                                                        16460000
   SELECT(CTRY_EXIST_CODE);                                             16470000
     WHEN (001)                /* | ******** | ******** | KZ0 CTRY | */ 16480000
       DO;                     /* IF CTRY NOT REQ, & NO KBO FOR CTRY */ 16490000
         CALL ISSUE_MSG('0181');/* SKIP ALL RECORDS FOR THAT COUNTRY */ 16500000
         SK_KZ01_OLD = SK_KZ01;                                         16510000
         DO WHILE (SK_KZ01_OLD = SK_KZ01);     /* WHILE SAME COUNTRY */ 16520000
           CALL READ_RCBBKZ0_REC;              /* SKIP KZ0 RECORDS   */ 16530000
         END;                                                           16540000
         COUNT.CNT_CTRY.RCBBKZ0_SKP = COUNT.CNT_CTRY.RCBBKZ0;           16550000
         SWITCH_RCBBKZ0_HEADER = TRUE;  /*FORCE HEADER SWITCH TO TRUE*/ 16560000
         SWITCH_WRITE_TRAILER  = FALSE; /*SKIP TRAILER RECORD        */ 16570000
         CALL END_PROCESS_CTRY;                                         16580000
       END;                                                             16590000
     WHEN (010)                /* | ******** | KB0 CTRY | ******** | */ 16600000
       DO;                     /* IF CTRY NOT REQ, & NO KAO FOR CTRY */ 16610000
         CALL ISSUE_MSG('0181');                                        16620000
         SK_KB01_OLD = SK_KB01;                                         16630000
                               /* SKIP ALL RECORDS FOR THAT COUNTRY  */ 16640000
         DO WHILE (SK_KB01_OLD = SK_KB01);     /* WHILE SAME COUNTRY */ 16650000
           CALL READ_RCBBKB0_REC;              /* SKIP KB0 RECORDS   */ 16660000
         END;                                                           16670000
         COUNT.CNT_CTRY.RCBBKB0_SKP = COUNT.CNT_CTRY.RCBBKB0;           16680000
         SWITCH_RCBBKZ0_HEADER = FALSE;        /* NO HEADER REQUIRED */ 16690000
         SWITCH_RCBBKB0_HEADER = FALSE;        /* NO HEADER REQUIRED */ 16700000
         SWITCH_WRITE_TRAILER  = FALSE;        /* DONT WRITE TRAILER */ 16710000
         CALL END_PROCESS_CTRY;                                         16720000
       END;                                                             16730000
     WHEN (011)                /* | ******** | KB0 CTRY | KZ0 CTRY | */ 16740000
       DO;       /* IF CTRY NOT REQ, & BOTH KA0 AND KB0 RECS PRESENT */ 16750000
         CALL ISSUE_MSG('0181');/* SKIP ALL RECORDS FOR THAT COUNTRY */ 16760000
         SK_KZ01_OLD = SK_KZ01;                                         16770000
         DO WHILE (SK_KZ01_OLD = SK_KZ01);     /* WHILE SAME COUNTRY */ 16780000
           CALL READ_RCBBKZ0_REC;              /* SKIP KZ0 RECORDS   */ 16790000
         END;                                                           16800000
                                                                        16810000
         SK_KB01_OLD = SK_KB01;                                         16820000
         DO WHILE (SK_KB01_OLD = SK_KB01);     /* WHILE SAME COUNTRY */ 16830000
           CALL READ_RCBBKB0_REC;              /* SKIP KB0 RECORDS   */ 16840000
         END;                                                           16850000
                                                                        16860000
         COUNT.CNT_CTRY.RCBBKZ0_SKP = COUNT.CNT_CTRY.RCBBKZ0;           16870000
         COUNT.CNT_CTRY.RCBBKB0_SKP = COUNT.CNT_CTRY.RCBBKB0;           16880000
         SWITCH_RCBBKZ0_HEADER = TRUE;  /*FORCE HEADER SWITCH TO TRUE*/ 16890000
         SWITCH_WRITE_TRAILER  = FALSE; /*SKIP TRAILER RECORD        */ 16900000
         CALL END_PROCESS_CTRY;                                         16910000
       END;                                                             16920000
     WHEN (100)                /* | REQ CTRY | ******** | ******** | */ 16930000
       DO;                     /* IF CTRY REQ, & NO KAO AND KB0 RECS */ 16940000
         CALL ISSUE_MSG('0184');         /* COUNTRY NOT IN I/P FILES */ 16950000
         CALL READ_RCB000_CTRY;          /* READ NEXT COUNTRY        */ 16960000
       END;                                                             16970000
     WHEN (101)                /* | REQ CTRY | ******** | KZ0 CTRY | */ 16980000
       DO;                     /* IF NO UPGRADES PRESENT FOR THE CTRY*/ 16990000
                               /* WRITE ALL CONTRACT RECORDS TO      */ 17000000
                               /* OUTPUT FILE RCBBKX0 AS IT IS       */ 17010000
         CALL INIT_PROCESS_CTRY;/* INITIAL ACTIONS FOR THE CTRY      */ 17020000
         SK_KZ01_OLD = SK_KZ01;                                         17030000
         DO WHILE (SK_KZ01_OLD = SK_KZ01);     /* WHILE SAME COUNTRY */ 17040000
           RCBBKX0_REC = RCBBKZ0_REC;          /* WRITE TO KX0 O/P   */ 17050000
           CALL WRITE_RCBBKX0_REC;                                      17060000
           CALL READ_RCBBKZ0_REC;                                       17070000
         END;                                                           17080000
         CALL END_PROCESS_CTRY;                                         17090000
         CALL READ_RCB000_CTRY;           /* READ NEXT CTRY          */ 17100000
       END;                                                             17110000
     OTHERWISE                                                          17120000
       DO;                                                              17130000
         CALL RCBBKXM_ERROR (NULL(), 'OTHER', '#025');                  17140000
       END;                                                             17150000
   END; /* END OF SELECT */                                             17160000
 END PROCESS_NON_UPGRADES;                                              17170000
1/********************************************************************/ 17180000
 /*                                                                  */ 17190000
 /* MODULE NAME      : PROCESS_UPGRADES                              */ 17200000
 /*                                                                  */ 17210000
 /* DESCRIPTION      : PROCESS ALL UPGRADE RECORDS FOR THE COUNTRY   */ 17220000
 /*                                                                  */ 17230000
 /********************************************************************/ 17240000
 PROCESS_UPGRADES : PROC;                                               17250000
                                                                        17260000
 DO WHILE (CTRY_EXIST_CODE ¬= 100);  /* DO UNTIL ALL RECORDS COMPLETE*/ 17270000
                               /* FOR THE COUNTRY FROM KZ0 AND KB0   */ 17280000
  CALL CHECK_RCBBKB0_REC;                                               17290000
  CALL WRITE_RCBBKZ0_C003_RT;  /* WRITE TO O/P IF ITS A C003 REC TYP */ 17300000
                 /* WRITE TO KX0 FROM KZ0 IF NO UPGRADE FOR THAT TOS */ 17310000
  DO WHILE((SK_KZ03 < SK_KB03) & (SK_KZ0.CTRYNO = WRK_CTRYNO));         17320000
    RCBBKX0_REC = RCBBKZ0_REC;                                          17330000
    CALL WRITE_RCBBKX0_REC;                                             17340000
    CALL READ_RCBBKZ0_REC;                                              17350000
  END;                                                                  17360000
                 /* IF NO CONTRACT PRESENT FOR THE WSU UPGRADE THEN  */ 17370000
                 /* UPGRADE THE T220 WARRANTY RECORD AND WRITE TO KX0*/ 17380000
                 /* IF NO CONTRACT PRESENT FOR THE MSU UPGRADE THEN  */ 17390000
                 /* REJECT AND ISSUE MSG TO THE USER REPORT          */ 17400000
  CALL WRITE_RCBBKZ0_C003_RT;  /* WRITE TO O/P IF ITS A C003 REC TYP */ 17410000
  SK_KB03_OLD = '';                                                     17420000
                                                                        17430000
  DO WHILE (( SK_KZ03 > SK_KB03 ) & (SK_KB0.CTRYNO = WRK_CTRYNO));      17440000
    IF WRK_UPGD_TYP = 'M' THEN                                          17450000
      DO;                                                               17460000
       CALL ISSUE_MSG('0251');              /* REJECT MSU IF NO KZ0  */ 17470000
      END;                                                              17480000
    IF WRK_UPGD_TYP = 'W' THEN              /* PROCESS WSU IF NO KZ0 */ 17490000
      DO;                                                               17500000
        IF (SK_KB03_OLD ¬= SK_KB03) THEN /* IF FIRST REC FOR THE TOS */ 17510000
         DO;                                                            17520000
          CALL READ_BAU_WARR;          /* READ T220 WARRANTY TO ARRAY*/ 17530000
          RCBBKZ0_C002_COPY = '';                                       17540000
          CALL PROCESS_WSU;                                             17550000
          WSU_END_DATE_OLD = RCBBKB0_C002.DDBSIAC;                      17560000
          WSU_EFF_DATE_NXT = CALC_DATE(WSU_END_DATE_OLD,'D',1);         17570000
          SK_KB03_OLD = SK_KB03;                                        17580000
         END;                                                           17590000
        ELSE                                                            17600000
         DO;                          /* IF MORE RECORDS FOR THE TOS */ 17610000
          IF RCBBKB0_C002.DDBSIAC > WSU_END_DATE_OLD THEN               17620000
           DO;                        /* TRUNCATE IF PROCESSED PERIOD*/ 17630000
            IF RCBBKB0_C002.DDBSEFF <= WSU_END_DATE_OLD THEN            17640000
             DO;                                                        17650000
               RCBBKB0_C002.DDBSEFF = WSU_EFF_DATE_NXT;                 17660000
             END;                                                       17670000
            RCBBKZ0_C002_COPY = '';                                     17680000
            CALL PROCESS_WSU;         /* PROCESS THE WSU RECORD      */ 17690000
            WSU_END_DATE_OLD = RCBBKB0_C002.DDBSIAC;                    17700000
            WSU_EFF_DATE_NXT = CALC_DATE(WSU_END_DATE_OLD,'D',1);       17710000
           END;                                                         17720000
         END;                                                           17730000
      END; /* END OF IF UPGD TYPE = 'W' */                              17740000
    CALL READ_RCBBKB0_REC;                                              17750000
    CALL CHECK_RCBBKB0_REC;                                             17760000
  END; /* END OF DO-WHILE */                                            17770000
                                                                        17780000
              /* PROCESS IF THE TOS PRESENT IN BOTH KZ0 AND KB0 FILE */ 17790000
  IF( SK_KZ03 = SK_KB03 ) THEN                                          17800000
   DO;                                                                  17810000
    CALL READ_BAU_WARR;                /* READ T220 WARRANTY TO ARRAY*/ 17820000
                                       /* READ KZ0 C002 TOS TO ARRAY */ 17830000
    SK_KZ03_OLD = SK_KZ03;                                              17840000
    I=1;                                                                17850000
    RCBBKZ0_REC_ARRAY = '';                                             17860000
    RCBBKZ0_REC_ARRAY(I) = RCBBKZ0_REC;                                 17870000
                                                                        17880000
    DO WHILE (SK_KZ03_OLD = SK_KZ03);                                   17890000
       SK_KZ03_OLD = SK_KZ03;                                           17900000
       KZ0_ARRAY_COUNT = I;                                             17910000
       I = I+1;                                                         17920000
       CALL READ_RCBBKZ0_REC;                                           17930000
       CALL WRITE_RCBBKZ0_C003_RT;                                      17940000
       RCBBKZ0_REC_ARRAY(I)   = RCBBKZ0_REC;                            17950000
    END;                                                                17960000
                                       /* READ KBO C002 TOS TO ARRAY */ 17970000
    SK_KB03_OLD = SK_KB03;                                              17980000
    J=1;                                                                17990000
    RCBBKB0_REC_ARRAY = '';                                             18000000
    RCBBKB0_REC_ARRAY(J)   = RCBBKB0_REC;                               18010000
                                                                        18020000
    DO WHILE (SK_KB03_OLD = SK_KB03);                                   18030000
       SK_KB03_OLD = SK_KB03;                                           18040000
       KB0_ARRAY_COUNT = J;                                             18050000
       J = J+1;                                                         18060000
       CALL READ_RCBBKB0_REC;                                           18070000
       CALL CHECK_RCBBKB0_REC;                                          18080000
       RCBBKB0_REC_ARRAY(J)   = RCBBKB0_REC;                            18090000
    END;                                                                18100000
                                  /* PROCESS WSU RECORDS FOR THE TOS */ 18110000
    I = 1;                                                              18120000
    J = 1;                                                              18130000
    WSU_END_DATE_OLD = '';                                              18140000
                                                                        18150000
    CALL READ_RCBBKB0_ARRAY(J);                                         18160000
                                                                        18170000
    DO WHILE (J <= KB0_ARRAY_COUNT);        /* DO WHILE SAME KB0 TOS */ 18180000
     IF WRK_UPGD_TYP = 'W' THEN                                         18190000
      DO;                                                               18200000
       SWITCH_PROCESS_WSU = TRUE;                                       18210000
       I = 1;                          /* REJECT IF OVERLAP WITH KZ0 */ 18220000
       CALL READ_RCBBKZ0_ARRAY(I);     /* READ FIRST RCBBKZ0 RECORD  */ 18230000
                                                                        18240000
       DO WHILE (I <= KZ0_ARRAY_COUNT & SWITCH_PROCESS_WSU);            18250000
        IF ¬(RCBBKB0_C002.DDBSEFF > RCBBKZ0_C002.DDBSIAC |              18260000
             RCBBKZ0_C002.DDBSEFF > RCBBKB0_C002.DDBSIAC ) THEN         18270000
         DO;                                                            18280000
          CALL ISSUE_MSG('0245');      /* REJECT SAYING OVERLAP      */ 18290000
          SWITCH_PROCESS_WSU = FALSE;                                   18300000
         END;                                                           18310000
        RCBBKZ0_C002_COPY = RCBBKZ0_C002, BY NAME;                      18320000
        I = I +1;                                                       18330000
        CALL READ_RCBBKZ0_ARRAY(I);                                     18340000
       END;                                                             18350000
                                                                        18360000
       IF SWITCH_PROCESS_WSU THEN                                       18370000
        DO;                        /* IF 1ST WSU RECORD FOR THE TOS  */ 18380000
         IF (WSU_END_DATE_OLD = '') THEN                                18390000
           DO;                                                          18400000
            CALL PROCESS_WSU;                                           18410000
            WSU_END_DATE_OLD = RCBBKB0_C002.DDBSIAC;                    18420000
            WSU_EFF_DATE_NXT = CALC_DATE(WSU_END_DATE_OLD,'D',1);       18430000
           END;                                                         18440000
         ELSE                      /* IF MORE THEN 1 WSU REC FOR TOS */ 18450000
           DO;                                                          18460000
            IF RCBBKB0_C002.DDBSIAC > WSU_END_DATE_OLD THEN             18470000
             DO;                                                        18480000
              IF RCBBKB0_C002.DDBSEFF <= WSU_END_DATE_OLD THEN          18490000
               DO;                                                      18500000
                     RCBBKB0_C002.DDBSEFF = WSU_EFF_DATE_NXT;           18510000
               END;                                                     18520000
              CALL PROCESS_WSU;                                         18530000
              WSU_END_DATE_OLD = RCBBKB0_C002.DDBSIAC;                  18540000
              WSU_EFF_DATE_NXT = CALC_DATE(WSU_END_DATE_OLD,'D',1);     18550000
             END;                                                       18560000
           END;                                                         18570000
        END; /* END OF VALID WSU PROCESSING */                          18580000
      END; /* END OF IF WSU UPGDRADE TYPE */                            18590000
     J = J+1;                                                           18600000
     CALL READ_RCBBKB0_ARRAY(J);     /* READ NEXT RECORD FOR THE TOS */ 18610000
    END; /* END OF DO WHILE FOR WSU */                                  18620000
                                                                        18630000
                                        /* PROCESS MSU UPGRADES ONLY */ 18640000
    CALL PROCESS_MSU;                                                   18650000
                                                                        18660000
                            /* RETRIVE PRE READ KZ0 AND KB0 REC BACK */ 18670000
    I = KZ0_ARRAY_COUNT + 1;                                            18680000
    J = KB0_ARRAY_COUNT + 1;                                            18690000
                                                                        18700000
    CALL READ_RCBBKZ0_ARRAY(I);                                         18710000
    CALL READ_RCBBKB0_ARRAY(J);                                         18720000
   END; /* END OF DO-WHILE, SAME KZ0 AND KB0 TOS */                     18730000
                               /* IF BOTH THE FILE CTRY RECORDS OVER */ 18740000
  IF ( (SK_KZ0.CTRYNO ¬= WRK_CTRYNO)                                    18750000
      &(SK_KB0.CTRYNO ¬= WRK_CTRYNO)) THEN                              18760000
    CALL CALCULATE_CTRY_EXIST_CODE;   /* GET NEW COUNTRY EXIST CODE  */ 18770000
 END;                                                                   18780000
                                                                        18790000
 END PROCESS_UPGRADES;                                                  18800000
1/********************************************************************/ 18810000
 /*                                                                  */ 18820000
 /* MODULE NAME      : PROCESS_WSU                                   */ 18830000
 /*                                                                  */ 18840000
 /* DESCRIPTION      : PROCESS WSU UPGRADES FOR THE SELECTED & VALID */ 18850000
 /*                  : PERIOD SENT FROM THE PROCESS UPGRADES PROC    */ 18860000
 /*                                                                  */ 18870000
 /********************************************************************/ 18880000
 PROCESS_WSU : PROC;                                                    18890000
                      /* UPDATE SLC BY CALLING THE USER EXIT RCBBK6U */ 18900000
 T220_ARRAY(*) = '';                                                    18910000
 T220_ARRAY(*) = T220_ARRAY_SAVED(*);                                   18920000
                                                                        18930000
 SWITCH_CHECK_PI_WARR = TRUE;/* INDICATES TO CHECK FOR PI WARR OR NOT*/ 18940000
 SWITCH_EXIT = FALSE;    /* EXIT IF WHOLE WSU PROCESSED OR REJECTED  */ 18950000
 SWITCH_MSG_0246 = FALSE;/* RESTRICT TO ISSUE MSG ONCE PER WSU PERIOD*/ 18960000
 K = 1;                                                                 18970000
                                                                        18980000
 IF K <= T220_ARRAY_COUNT THEN                                          18990000
   T220_WARR_COPY = T220_ARRAY(K) , BY NAME;                            19000000
                                                                        19010000
                            /* DO WHILE UNTIL END OF T220 WARR ARRAY */ 19020000
 DO WHILE ( K <= T220_ARRAY_COUNT & ¬SWITCH_EXIT);                      19030000
  ASSIGN_SERV_PERIOD = 'WSU';                                           19040000
  OVERLAP_AREA = '';                                                    19050000
  START_DATE_1 = RCBBKB0_C002.DDBSEFF;                                  19060000
  END_DATE_1   = RCBBKB0_C002.DDBSIAC;                                  19070000
  START_DATE_2 = T220_ARRAY.EFFECTIVE_DATE(K);                          19080000
  END_DATE_2   = T220_ARRAY.END_DATE(K);                                19090000
  CALL FIND_DATE_OVERLAP;                                               19100000
                                                                        19110000
  IF TYPE_OF_OVERLAP = '0' THEN   /* IF NO T220 WARR AND WSU OVERLAP */ 19120000
    DO;                                                                 19130000
     IF BEFORE_DATE_FROM = '1' THEN         /* IF WSU PERIOD EARLIER */ 19140000
      DO;                                                               19150000
       SWITCH_EXIT = TRUE;                                              19160000
      END;                                                              19170000
     IF BEFORE_DATE_FROM = '2' THEN         /* IF T220 WARR EARLIER  */ 19180000
      DO;                                                               19190000
      K = K + 1;                            /* READ NEXT WARR REC    */ 19200000
      T220_WARR_COPY = T220_ARRAY(K) , BY NAME;                         19210000
      END;                                                              19220000
    END;                                                                19230000
                                                                        19240000
  IF TYPE_OF_OVERLAP = '1' THEN          /* T220 AND WSU FULL OVERLAP*/ 19250000
    DO;                                                                 19260000
      RCBBKX0_REC = RCBBKB0_REC1;                                       19270000
      RCBBKB0_EXTENSION = RCBBKB0_C002 , BY NAME;                       19280000
      CALL WRITE_RCBBKX0_REC;                                           19290000
      SWITCH_CHECK_PI_WARR = FALSE;                                     19300000
      SWITCH_EXIT = TRUE;                /* EXIT WHOLE WSU PROCESSED */ 19310000
    END;                                                                19320000
                                                                        19330000
  IF TYPE_OF_OVERLAP = '2' THEN          /* PARTIAL OVERLAP          */ 19340000
   DO;                                                                  19350000
    SELECT;                                                             19360000
     WHEN(BEFORE_DATE_FROM = '1')        /* IF WSU STARTS EARLIER    */ 19370000
      DO;                             /* REJECT NON OVERLAPING PERIOD*/ 19380000
       RCBBKB0_C002.DDBSEFF = START_DATE_OVERLAP;                       19390000
       IF SWITCH_MSG_0246 = FALSE THEN                                  19400000
        DO;                          /* ISSUE MSG MSU EXCEEDS BAU WAR*/ 19410000
         CALL ISSUE_MSG('0246');                                        19420000
         SWITCH_MSG_0246 = TRUE;                                        19430000
        END;                                                            19440000
      END;                                                              19450000
     WHEN(BEFORE_DATE_FROM = '2')     /* IF T220 WARR STARTS EARLIER */ 19460000
      DO;                             /* REJECT NON OVERLAPING PERIOD*/ 19470000
       T220_ARRAY.EFFECTIVE_DATE(K) = START_DATE_OVERLAP;               19480000
      END;                                                              19490000
     WHEN(AFTER_DATE_FROM = '1')      /* IF WSU ENDS LATER THAN T220W*/ 19500000
      DO;                             /* UPGRADE OVERLAPING PERIOD   */ 19510000
       RCBBKX0_REC = RCBBKB0_REC1;                                      19520000
       RCBBKX0_C002.DDBSIAC = END_DATE_OVERLAP;                         19530000
       RCBBKB0_EXTENSION = RCBBKB0_C002 , BY NAME;                      19540000
       CALL WRITE_RCBBKX0_REC;                                          19550000
       RCBBKB0_C002.DDBSEFF = START_DATE_AFTER;                         19560000
       K = K + 1;                     /* READ NEXT T220 WARR IF ANY  */ 19570000
       T220_WARR_COPY = T220_ARRAY(K) , BY NAME;                        19580000
       SWITCH_CHECK_PI_WARR = FALSE;                                    19590000
       IF SWITCH_MSG_0246 = FALSE THEN                                  19600000
        DO;                                                             19610000
         CALL ISSUE_MSG('0246');                                        19620000
         SWITCH_MSG_0246 = TRUE;                                        19630000
        END;                                                            19640000
      END;                                                              19650000
     WHEN(AFTER_DATE_FROM = '2')      /* IF T220W ENDS LATER THAN WSU*/ 19660000
      DO;                             /* UPGRADE OVERLAPING PERIOD   */ 19670000
       RCBBKX0_REC = RCBBKB0_REC1;                                      19680000
       RCBBKX0_C002.DDBSIAC = END_DATE_OVERLAP;                         19690000
       RCBBKB0_EXTENSION = RCBBKB0_C002 , BY NAME;                      19700000
       CALL WRITE_RCBBKX0_REC;                                          19710000
       SWITCH_CHECK_PI_WARR = FALSE;                                    19720000
       SWITCH_EXIT = TRUE;            /* EXIT AS FULL WSU DONE       */ 19730000
      END;                                                              19740000
    END;                                                                19750000
   END;                                                                 19760000
 END;                                                                   19770000
                                                                        19780000
 T220_WARR_COPY = '';                                                   19790000
                                                                        19800000
                  /* IF T220 WARR NOT PRESENT OR ITS NOT OVERLAPPING */ 19810000
                  /* WITH WSU THEN PI WAR WILL BE CHECKED            */ 19820000
                                                                        19830000
 IF SWITCH_CHECK_PI_WARR THEN                                           19840000
   DO;                                                                  19850000
    IF SWITCH_READ_PI_WARR THEN                                         19860000
      CALL READ_PI_WARR;                                                19870000
                                                                        19880000
    IF ¬EOC_T051_WARR THEN /* IF PI WARR EXISTS */                      19890000
     DO;                                                                19900000
      START_DATE_1 = RCBBKB0_C002.DDBSEFF;                              19910000
      END_DATE_1   = RCBBKB0_C002.DDBSIAC;                              19920000
      START_DATE_2 = TB_RCBV051.INSTALL_DATE;                           19930000
      END_DATE_2   = TB_RCBV051.WARRANTY_EXP_DATE;                      19940000
      CALL FIND_DATE_OVERLAP;                                           19950000
     END;                                                               19960000
    ELSE                           /* ELSE NO PI OR BAU WARR PRESENT */ 19970000
     DO;                                                                19980000
      TYPE_OF_OVERLAP = '';                                             19990000
      CALL ISSUE_MSG('0248');           /* NO WAR IN BOTH BAU AND PI */ 20000000
     END;                                                               20010000
                                                                        20020000
    IF TYPE_OF_OVERLAP = '0' THEN       /* NO OVERLAP WITH PI        */ 20030000
      CALL ISSUE_MSG('0248');           /* NO WAR IN BOTH BAU AND PI */ 20040000
                                                                        20050000
    IF TYPE_OF_OVERLAP = '1' THEN       /* FULL OVERLAP- NO MSG      */ 20060000
      DO;                                                               20070000
        RCBBKX0_REC = RCBBKB0_REC1;                                     20080000
        RCBBKB0_EXTENSION = RCBBKB0_C002 , BY NAME;                     20090000
        ASSIGN_SERV_PERIOD = 'WSU';                                     20100000
        CALL WRITE_RCBBKX0_REC;                                         20110000
      END;                                                              20120000
                                                                        20130000
    IF TYPE_OF_OVERLAP = '2' THEN       /* IF PARTIAL OVERLAP WITH PI*/ 20140000
     DO;                                      /* WSU EXCEEDS PI WARR */ 20150000
      IF BEFORE_DATE_FROM = '1' | AFTER_DATE_FROM = '1' THEN            20160000
         CALL ISSUE_MSG('0247');        /* MSG SAYING PARTIAL OVERLAP*/ 20170000
                                        /* ADAPT FULL WSU PERIOD     */ 20180000
      RCBBKX0_REC = RCBBKB0_REC1;                                       20190000
      RCBBKX0_C002.DDBSEFF = START_DATE_OVERLAP;                        20200000
      RCBBKX0_C002.DDBSIAC = END_DATE_OVERLAP;                          20210000
      RCBBKB0_EXTENSION = RCBBKB0_C002 , BY NAME;                       20220000
      ASSIGN_SERV_PERIOD = 'WSU';                                       20230000
      CALL WRITE_RCBBKX0_REC;                                           20240000
     END;                                                               20250000
   END; /* END OF IF SWITCH_CHECK_PI_WARR */                            20260000
                                                                        20270000
 END PROCESS_WSU;                                                       20280000
1/********************************************************************/ 20290000
 /*                                                                  */ 20300000
 /* MODULE NAME      : PROCESS_MSU                                   */ 20310000
 /*                                                                  */ 20320000
 /* DESCRIPTION      : PROCESS MSU RECORDS                           */ 20330000
 /*                                                                  */ 20340000
 /********************************************************************/ 20350000
 PROCESS_MSU : PROC;                                                    20360000
                                           /* ISSUE MSU RELATED MSGS */ 20370000
           /* ALL MSU MESSAGES RELATED TO THIS TOS ARE REPORTED HERE */ 20380000
 I = 1;                                                                 20390000
 J = 1;                                                                 20400000
 K = 1;                                                                 20410000
 CALL READ_RCBBKZ0_ARRAY(I);                                            20420000
 CALL READ_RCBBKB0_ARRAY(J);                                            20430000
                                                                        20440000
 T220_ARRAY(*) = '';                                                    20450000
 T220_ARRAY(*) = T220_ARRAY_SAVED(*);                                   20460000
        /* DO WHILE UNTIL ALL UPGRADE RECORDS COMPLETES FOR THIS TOS */ 20470000
 DO WHILE (J <= KB0_ARRAY_COUNT);                                       20480000
  IF WRK_UPGD_TYP = 'M' THEN         /* ISSUE MSG ONLY IF MSU RECORD */ 20490000
   DO;                                                                  20500000
    SWITCH_ADAPT_MSU = FALSE;                                           20510000
    I = 1;                /* CHECK FOR MSU AND CHIS CONTRACT OVERLAP */ 20520000
    DO WHILE (I <= KZ0_ARRAY_COUNT);                                    20530000
     IF ¬(RCBBKB0_C002.DDBSEFF > RCBBKZ0_C002.DDBSIAC |                 20540000
          RCBBKZ0_C002.DDBSEFF > RCBBKB0_C002.DDBSIAC ) THEN            20550000
      DO;                           /* ADAPT IF OVERLAPPING WITH KA0 */ 20560000
       SWITCH_ADAPT_MSU = TRUE;                                         20570000
                                                                        20580000
       IF (RCBBKB0_C002.DDBSEFF < RCBBKZ0_C002.DDBSEFF |                20590000
           RCBBKB0_C002.DDBSIAC > RCBBKZ0_C002.DDBSIAC ) THEN           20600000
         CALL ISSUE_MSG('0252');  /* MSU PARTIALLY OVERLAPS WITH KA0 */ 20610000
      END;                                                              20620000
     I = I + 1;                         /* CHECK FOR NEXT KA0 IF ANY */ 20630000
     CALL READ_RCBBKZ0_ARRAY(I);                                        20640000
    END;                                                                20650000
                                                                        20660000
    IF ¬SWITCH_ADAPT_MSU THEN                                           20670000
     DO;                                                                20680000
      CALL ISSUE_MSG('0259'); /*MSU DOES'T OVERLAP WITH KA0,SO REJECT*/ 20690000
     END;                                                               20700000
    ELSE                                                                20710000
     DO;                                                                20720000
                /* CHECK FOR T220 AND MSU PERIOD OVERLAP & ISSUE MSG */ 20730000
      K = 1;                  /* DO WHILE ALL T220 WAR REC COMPLETES */ 20740000
      DO WHILE (K <= T220_ARRAY_COUNT);                                 20750000
       IF ¬(RCBBKB0_C002.DDBSEFF         > T220_ARRAY.END_DATE(K)|      20760000
            T220_ARRAY.EFFECTIVE_DATE(K) > RCBBKB0_C002.DDBSIAC   )     20770000
       THEN                                                             20780000
        DO;                          /* IF OVERLAPPING WIRH T220 WARR*/ 20790000
         IF (T220_ARRAY.EFFECTIVE_DATE(K) <= RCBBKB0_C002.DDBSEFF)&     20800000
            (T220_ARRAY.END_DATE(K)       >= RCBBKB0_C002.DDBSIAC)      20810000
         THEN CALL ISSUE_MSG('0257');/* MSU PERIOD WITHIN BAU WARR   */ 20820000
         ELSE CALL ISSUE_MSG('0249');/* MSU OVERLAP WITH BAU WARR    */ 20830000
        END;                                                            20840000
       K = K + 1;                    /* CHECK FOR NEXT BAU WAR IF ANY*/ 20850000
      END;                                                              20860000
                           /* CHECK FOR PI WARR IF NO BAU WAR EXISTS */ 20870000
                                  /* READ PI RECORD ONLY IF REQUIRED */ 20880000
      IF ((T220_ARRAY_COUNT = 0) & SWITCH_READ_PI_WARR)                 20890000
       THEN                                                             20900000
        DO;                                                             20910000
         CALL READ_PI_WARR;                /* T051 OVERLAP ISSUE MSG */ 20920000
        END;                                                            20930000
                                                                        20940000
      IF ((T220_ARRAY_COUNT = 0) & ¬EOC_T051_WARR) THEN                 20950000
       IF ¬((RCBBKB0_C002.DDBSEFF    > TB_RCBV051.WARRANTY_EXP_DATE)|   20960000
            (TB_RCBV051.INSTALL_DATE > RCBBKB0_C002.DDBSIAC        ))   20970000
       THEN                                                             20980000
        DO;                                                             20990000
         CALL ISSUE_MSG('0250');           /* T051 OVERLAP ISSUE MSG */ 21000000
        END;                                                            21010000
     END;                                                               21020000
   END;                                                                 21030000
   J = J + 1;                     /* READ NEXT UPGRADE RECORD IF ANY */ 21040000
   CALL READ_RCBBKB0_ARRAY(J);                                          21050000
 END;                                                                   21060000
                                                                        21070000
  /* SELECT ONLY THE NON OVERLAPPING PERIOD OF MSU UPGRADE REC & T220 */21080000
  /* WARRANTY PERIOD REC INTO A SEPERATE ARRAY WHICH WILL BE NEXT     */21090000
  /* CHECKED WITH KZ0 & UPGRADED IF IT IS OVERLAPPING WITH KZ0-CHIS   */21100000
  /* CONTRACT RECORD                                                  */21110000
                                                                        21120000
 T220_ARRAY(*) = '';                                                    21130000
 T220_ARRAY(*) = T220_ARRAY_SAVED(*);                                   21140000
 J = 1;                                                                 21150000
 K = 1;                                                                 21160000
 L = 0;                                                                 21170000
                          /* READ FIRST MSU RECORD FROM THE KB0 ARRAY*/ 21180000
 J = READ_RCBBKB0_ARRAY_NEXT('M',J);                                    21190000
                       /* DO WHILE END OF KB0 ARRAY FOR MSU REC ONLY */ 21200000
 DO WHILE ((J <= KB0_ARRAY_COUNT ) & (WRK_UPGD_TYP = 'M'));             21210000
                                    /* IF T220 ARRAY NOT REACHED END */ 21220000
  IF K <= T220_ARRAY_COUNT THEN                                         21230000
    DO;                                                                 21240000
      START_DATE_1 = RCBBKB0_C002.DDBSEFF;                              21250000
      END_DATE_1   = RCBBKB0_C002.DDBSIAC;                              21260000
      START_DATE_2 = T220_ARRAY.EFFECTIVE_DATE(K);                      21270000
      END_DATE_2   = T220_ARRAY.END_DATE(K);                            21280000
      CALL FIND_DATE_OVERLAP;                                           21290000
    END;                                                                21300000
  ELSE                                                                  21310000
    DO;                             /* IF T220 ARRAY REACHED END     */ 21320000
      TYPE_OF_OVERLAP  = '0';       /* FORCE SWITCH TO NO OVERLAP    */ 21330000
      BEFORE_DATE_FROM = '1';       /* SAY MSU PERIOD EARLIER        */ 21340000
    END;                                                                21350000
                                    /* IF NOT OVERLAPPING            */ 21360000
  IF TYPE_OF_OVERLAP = '0' THEN                                         21370000
    DO;                                                                 21380000
     IF BEFORE_DATE_FROM = '1' THEN            /* MSU PERIOD EARLIER */ 21390000
      DO;                                                               21400000
        L = L+1;                          /* TAKE MSU FOR PROCESSING */ 21410000
        IMPOSED_MSU_REC1(L) = RCBBKB0_REC;                              21420000
        J = J+1;                                /* READ NEXT MSU REC */ 21430000
        J = READ_RCBBKB0_ARRAY_NEXT('M',J);                             21440000
      END;                                                              21450000
     IF BEFORE_DATE_FROM = '2' THEN       /* T220 WARR PERIOD EARLIER*/ 21460000
      DO;                                                               21470000
        K = K+1;                              /* READ NEXT T220 WARR */ 21480000
      END;                                                              21490000
    END;                                                                21500000
                                                                        21510000
  IF TYPE_OF_OVERLAP = '1' THEN     /* IF FULL OVERLAP WITH T220 WAR */ 21520000
    DO;                             /* THEN REJECT MSU PERIOD        */ 21530000
      J = J+1;                                                          21540000
      K = K+1;                            /* READ NEXT T220 WARR REC */ 21550000
      J = READ_RCBBKB0_ARRAY_NEXT('M',J);       /* READ NEXT MSU REC */ 21560000
    END;                                                                21570000
                                                                        21580000
  IF TYPE_OF_OVERLAP = '2' THEN  /* IF PARTIAL OVERLAP WITH T220 WAR */ 21590000
    DO;                       /* CONSIDER ONLY NON OVERLAPPING PERIOD*/ 21600000
     SELECT;                                                            21610000
      WHEN(BEFORE_DATE_FROM = '1') /* MSU STARTS EARLIER,CONSIDER NON*/ 21620000
       DO;        /* OVERLAPPING AND MAKE BOTH THE START DATES EQUAL */ 21630000
         L = L+1;                                                       21640000
         IMPOSED_MSU_REC1(L) = RCBBKB0_REC;                             21650000
         IMPOSED_MSU_REC.DDBSIAC(L) = END_DATE_BEFORE;                  21660000
         RCBBKB0_C002.DDBSEFF = START_DATE_OVERLAP;                     21670000
       END;                                                             21680000
                                         /* T220 WARR STARTS EARLIER */ 21690000
      WHEN(BEFORE_DATE_FROM = '2')                                      21700000
       DO;                      /* REJECT AND MAKE START DATES EQUAL */ 21710000
         T220_ARRAY.EFFECTIVE_DATE(K) = START_DATE_OVERLAP;             21720000
       END;                                                             21730000
                                                                        21740000
      WHEN(AFTER_DATE_FROM = '1')               /* T220 ENDS EARLIER */ 21750000
       DO;                              /* REJECT OVERLAPPING PERIOD */ 21760000
         RCBBKB0_C002.DDBSEFF = START_DATE_AFTER;                       21770000
         K = K + 1;                         /* READ NEXT T220 RECORD */ 21780000
       END;                                                             21790000
                                                                        21800000
      WHEN(AFTER_DATE_FROM = '2')                /* MSU ENDS EARLIER */ 21810000
       DO;                              /* REJECT OVERLAPPING PERIOD */ 21820000
         T220_ARRAY.EFFECTIVE_DATE(K) = START_DATE_AFTER;               21830000
         J = J+1;                            /* READ NEXT MSU RECORD */ 21840000
         J = READ_RCBBKB0_ARRAY_NEXT('M',J);                            21850000
       END;                                                             21860000
     END; /* END OF SELECT */                                           21870000
    END;                                                                21880000
 END;                                                                   21890000
 MSU_ARRAY_COUNT = L;                                                   21900000
                                                                        21910000
 /* IMPOSED ARRAY WHICH CONTAINS ONLY THE NON-OVERLAPPING PERIOD(WITH */21920000
 /* T220 WARRANY ) OF MSU IS CHECKED WITH CHIS CONTACT KZ0 RECORD AND */21930000
 /* UPGRADED IF THERE IS AN OVERLAP BETWEEN THEM                      */21940000
                                                                        21950000
 L = 1;                                                                 21960000
 I = 1;                                                                 21970000
 CALL READ_RCBBKZ0_ARRAY(I);                                            21980000
 RCBBKZ0_C002_COPY = RCBBKZ0_C002, BY NAME;                             21990000
                                        /* DO WHILE END OF KZ0 ARRAY */ 22000000
    DO WHILE (I <= KZ0_ARRAY_COUNT);                                    22010000
      IF L <= MSU_ARRAY_COUNT THEN                                      22020000
        DO;                          /* IF MSU ARRAY NOT REACHED END */ 22030000
          START_DATE_1 = IMPOSED_MSU_REC.DDBSEFF(L);                    22040000
          END_DATE_1   = IMPOSED_MSU_REC.DDBSIAC(L);                    22050000
          START_DATE_2 = RCBBKZ0_C002.DDBSEFF;                          22060000
          END_DATE_2   = RCBBKZ0_C002.DDBSIAC;                          22070000
          CALL FIND_DATE_OVERLAP;                                       22080000
        END;                                                            22090000
      ELSE                                        /* MSU REACHED END */ 22100000
        DO;                       /* NO MSU UPGRADE FOR THIS KZ0 REC */ 22110000
          TYPE_OF_OVERLAP  = '0';          /* FORCE NO OVERLAP FLAG  */ 22120000
          BEFORE_DATE_FROM = '2';          /* SAY KZ0 PERIOD EARLIER */ 22130000
        END;                                                            22140000
                                                                        22150000
      IF TYPE_OF_OVERLAP = '0' THEN                    /* NO OVERLAP */ 22160000
        DO;                                                             22170000
         IF BEFORE_DATE_FROM = '1' THEN        /* MSU PERIOD EARLIER */ 22180000
          DO;                                                           22190000
            L = L+1;         /* SKIP THIS & LOOK FOR NEXT MSU IF ANY */ 22200000
          END;                                                          22210000
         IF BEFORE_DATE_FROM = '2' THEN        /* KZ0 STARTS EARLIER */ 22220000
          DO;                      /* WRITE THE PERIOD OF KZ0 TO KX0 */ 22230000
            RCBBKX0_REC = RCBBKZ0_REC;                                  22240000
            ASSIGN_SERV_PERIOD = 'KZ0';                                 22250000
            CALL WRITE_RCBBKX0_REC;                                     22260000
            I = I+1;                         /* READ NEXT KZ0 IF ANY */ 22270000
            CALL READ_RCBBKZ0_ARRAY(I);                                 22280000
            RCBBKZ0_C002_COPY = RCBBKZ0_C002, BY NAME;                  22290000
          END;                                                          22300000
        END;                                                            22310000
                                                                        22320000
      IF TYPE_OF_OVERLAP = '1' THEN      /* KZ0 AND MSU FULL OVERLAP */ 22330000
        DO;                                                             22340000
          RCBBKX0_C002 = IMPOSED_MSU_REC(L) , BY NAME;                  22350000
          RCBBKB0_EXTENSION = IMPOSED_MSU_REC(L) , BY NAME;             22360000
          ASSIGN_SERV_PERIOD = 'MSU';                                   22370000
          CALL WRITE_RCBBKX0_REC;                                       22380000
          L = L+1;                       /* READ NEXT MSU REC IF ANY */ 22390000
          I = I+1;                       /* READ NEXT KZ0 REC IF ANY */ 22400000
          CALL READ_RCBBKZ0_ARRAY(I);                                   22410000
          RCBBKZ0_C002_COPY = RCBBKZ0_C002, BY NAME;                    22420000
        END;                                                            22430000
                                                                        22440000
      IF TYPE_OF_OVERLAP = '2' THEN   /* KZ0 AND MSU PARTIAL OVERLAP */ 22450000
        DO;                                                             22460000
         SELECT;                                                        22470000
          WHEN(BEFORE_DATE_FROM = '1')         /* MSU STARTS EARLIER */ 22480000
           DO;                       /* REJECT NON OVERLAPING PERIOD */ 22490000
             IMPOSED_MSU_REC.DDBSEFF(L) = START_DATE_OVERLAP;           22500000
           END;                                                         22510000
          WHEN(BEFORE_DATE_FROM = '2')     /* KZ0 REC STARTS EARLIER */ 22520000
           DO;           /* WRITE NO OVERLAPPING KZ0 AS IT IS TO KX0 */ 22530000
             RCBBKX0_REC = RCBBKZ0_REC;                                 22540000
             RCBBKX0_C002.DDBSIAC = END_DATE_BEFORE;                    22550000
             ASSIGN_SERV_PERIOD = 'KZ0';                                22560000
             CALL WRITE_RCBBKX0_REC;                                    22570000
             RCBBKZ0_C002.DDBSEFF = START_DATE_OVERLAP;                 22580000
           END;                                                         22590000
          WHEN(AFTER_DATE_FROM = '1')     /* KZ0 RECORD ENDS EARLIER */ 22600000
           DO; /* CALL TO ADAPT OVERLAP PERIOD AND LOOK FOR NEXT KZ0 */ 22610000
             /* CALL LOOKUP_NEXT_KZ0;  */                               22620000
             RCBBKX0_C002 = IMPOSED_MSU_REC(L) , BY NAME;               22630000
             RCBBKX0_C002.DDBSIAC = END_DATE_OVERLAP;                   22640000
             RCBBKB0_EXTENSION = IMPOSED_MSU_REC(L) , BY NAME;          22650000
             ASSIGN_SERV_PERIOD = 'MSU';                                22660000
             CALL WRITE_RCBBKX0_REC;                                    22670000
             IMPOSED_MSU_REC.DDBSEFF(L) = START_DATE_AFTER;             22680000
             I = I+1;                    /* READ NEXT KZ0 REC IF ANY */ 22690000
             CALL READ_RCBBKZ0_ARRAY(I);                                22700000
             RCBBKZ0_C002_COPY = RCBBKZ0_C002, BY NAME;                 22710000
           END;                                                         22720000
          WHEN(AFTER_DATE_FROM = '2')            /* MSU ENDS EARLIER */ 22730000
           DO;                           /* ADAPT OVERLAPPING PERIOD */ 22740000
             RCBBKX0_C002 = IMPOSED_MSU_REC(L) , BY NAME;               22750000
             RCBBKX0_C002.DDBSIAC = END_DATE_OVERLAP;                   22760000
             RCBBKB0_EXTENSION = IMPOSED_MSU_REC(L) , BY NAME;          22770000
             ASSIGN_SERV_PERIOD = 'MSU';                                22780000
             CALL WRITE_RCBBKX0_REC;         /* READ NEXT MSU IF ANY */ 22790000
             RCBBKZ0_C002.DDBSEFF = START_DATE_AFTER;                   22800000
             L = L + 1;                                                 22810000
           END;                                                         22820000
         END; /* END OF SELECT */                                       22830000
        END; /* END OF IF TYPE_OF_OVERLAP = '2' */                      22840000
    END; /* END OF DO-WHILE */                                          22850000
 END PROCESS_MSU;                                                       22860000
1/********************************************************************/ 22870000
 /*                                                                  */ 22880000
 /* MODULE NAME      : FIND_DATE_OVERLAP                             */ 22890000
 /*                                                                  */ 22900000
 /* DESCRIPTION      : FIND THE DATE OVERLAP BETWEEN TWO DATES       */ 22910000
 /*                                                                  */ 22920000
 /********************************************************************/ 22930000
 FIND_DATE_OVERLAP : PROC;                                              22940000
                                                                        22950000
 START_DATE_BEFORE   = '';                                              22960000
 END_DATE_BEFORE     = '';                                              22970000
 BEFORE_DATE_FROM    = '0';                                             22980000
 START_DATE_OVERLAP  = '';                                              22990000
 END_DATE_OVERLAP    = '';                                              23000000
 TYPE_OF_OVERLAP     = '0';                                             23010000
 START_DATE_AFTER    = '';                                              23020000
 END_DATE_AFTER      = '';                                              23030000
 AFTER_DATE_FROM     = '0';                                             23040000
                                                                        23050000
 SELECT;                                                                23060000
   WHEN (START_DATE_2 > END_DATE_1)        /* WHEN |------|          */ 23070000
     DO;                                   /*              |------|  */ 23080000
       START_DATE_BEFORE  = START_DATE_1;                               23090000
       END_DATE_BEFORE    = END_DATE_1;                                 23100000
       BEFORE_DATE_FROM   = '1';                                        23110000
                                                                        23120000
       START_DATE_AFTER   = START_DATE_2;                               23130000
       END_DATE_AFTER     = END_DATE_2;                                 23140000
       AFTER_DATE_FROM    = '2';                                        23150000
     END;                                                               23160000
   WHEN (START_DATE_1 > END_DATE_2)        /* WHEN         |------|  */ 23170000
     DO;                                   /*      |------|          */ 23180000
       START_DATE_BEFORE  = START_DATE_2;                               23190000
       END_DATE_BEFORE    = END_DATE_2;                                 23200000
       BEFORE_DATE_FROM   = '2';                                        23210000
                                                                        23220000
       START_DATE_AFTER   = START_DATE_1;                               23230000
       END_DATE_AFTER     = END_DATE_1;                                 23240000
       AFTER_DATE_FROM    = '1';                                        23250000
     END;                                                               23260000
   WHEN (START_DATE_1 > START_DATE_2)     /* WHEN        |-------->  */ 23270000
     DO;                                  /*        |------------->  */ 23280000
       START_DATE_BEFORE  = START_DATE_2;                               23290000
       END_DATE_BEFORE    = CALC_DATE(START_DATE_1,'D',-1);             23300000
       BEFORE_DATE_FROM   = '2';                                        23310000
                                                                        23320000
       START_DATE_OVERLAP = START_DATE_1;                               23330000
       TYPE_OF_OVERLAP    = '2';                                        23340000
     END;                                                               23350000
   WHEN (START_DATE_1 = START_DATE_2)     /* WHEN        |-------->  */ 23360000
     DO;                                  /*             |-------->  */ 23370000
       START_DATE_OVERLAP= START_DATE_1;                                23380000
       TYPE_OF_OVERLAP   = '1';                                         23390000
     END;                                                               23400000
   WHEN (START_DATE_1 < START_DATE_2)     /* WHEN   |------------->  */ 23410000
     DO;                                  /*             |-------->  */ 23420000
       START_DATE_BEFORE  = START_DATE_1;                               23430000
       END_DATE_BEFORE    = CALC_DATE(START_DATE_2,'D',-1);             23440000
       BEFORE_DATE_FROM   = '1';                                        23450000
                                                                        23460000
       START_DATE_OVERLAP = START_DATE_2;                               23470000
       TYPE_OF_OVERLAP    = '2';                                        23480000
     END;                                                               23490000
   OTHERWISE                                                            23500000
     DO;                                                                23510000
         CALL RCBBKXM_ERROR (NULL(), 'OTHER', '#026');                  23520000
     END;                                                               23530000
 END;                                                                   23540000
                                                                        23550000
 IF TYPE_OF_OVERLAP ¬= '0' THEN                                         23560000
   DO;                                                                  23570000
     SELECT;                                                            23580000
       WHEN(END_DATE_1 > END_DATE_2)      /* WHEN   <-----------|    */ 23590000
         DO;                              /*        <-------|        */ 23600000
           END_DATE_OVERLAP   = END_DATE_2;                             23610000
           TYPE_OF_OVERLAP    = '2';                                    23620000
                                                                        23630000
           START_DATE_AFTER   = CALC_DATE(END_DATE_2,'D',1);            23640000
           END_DATE_AFTER     = END_DATE_1;                             23650000
           AFTER_DATE_FROM    = '1';                                    23660000
         END;                                                           23670000
       WHEN(END_DATE_1 = END_DATE_2)      /* WHEN   <-------|        */ 23680000
         DO;                              /*        <-------|        */ 23690000
           END_DATE_OVERLAP   = END_DATE_1;                             23700000
         END;                                                           23710000
       WHEN(END_DATE_1 < END_DATE_2)      /* WHEN   <-------|        */ 23720000
         DO;                              /*        <-----------|    */ 23730000
           END_DATE_OVERLAP   = END_DATE_1;                             23740000
           TYPE_OF_OVERLAP    = '2';                                    23750000
                                                                        23760000
           START_DATE_AFTER   = CALC_DATE(END_DATE_1,'D',1);            23770000
           END_DATE_AFTER     = END_DATE_2;                             23780000
           AFTER_DATE_FROM    = '2';                                    23790000
         END;                                                           23800000
       OTHERWISE                                                        23810000
         DO;                                                            23820000
             CALL RCBBKXM_ERROR (NULL(), 'OTHER', '#027');              23830000
         END;                                                           23840000
     END;                                                               23850000
   END;                                                                 23860000
 END FIND_DATE_OVERLAP;                                                 23870000
 /********************************************************************/ 23880000
 /*                                                                  */ 23890000
 /* MODULE NAME      : CALC_DATE                                     */ 23900000
 /*                                                                  */ 23910000
 /* DESCRIPTION      : PROCESS DATE USING RCB004M                    */ 23920000
 /*                                                                  */ 23930000
 /********************************************************************/ 23940000
 CALC_DATE: PROC   (IN_DATE,                                            23950000
                    CALC_TYPE,                                          23960000
                    CALC_VALUE) RETURNS(CHAR(10));                      23970000
                                                                        23980000
 DCL IN_DATE      CHAR(10);                                             23990000
 DCL CALC_TYPE    CHAR(1);                                              24000000
 DCL CALC_VALUE   FIXED DEC(3,0);                                       24010000
                                                                        24020000
 DATE_AREA.WD_IN_FORMAT   = 'ISO';                                      24030000
 DATE_AREA.WD_OUT_FORMAT  = 'ISO';                                      24040000
 DATE_AREA.WD_FUNCTION    = 'C';                                        24050000
 DATE_AREA.WD_PERIOD_TYPE = CALC_TYPE;                                  24060000
 DATE_AREA.WD_PERIOD      = CALC_VALUE;                                 24070000
 DATE_AREA.WD_IN_DATE     = IN_DATE;                                    24080000
                                                                        24090000
 CALL RCB004M (ADDR (DATE_AREA));;                                      24100000
                                                                        24110000
 IF DATE_AREA.WD_STATUS  ¬= ' '                                         24120000
 THEN                                                                   24130000
   DO;                                                                  24140000
     G_WRKMSG.TXTFIELD_1  = 'RCB004M-INPUT DATE';                       24150000
     G_WRKMSG.TXTFIELD_2  = IN_DATE;                                    24160000
     G_WRKMSG.TXTFIELD_3  = 'RC';                                       24170000
     G_WRKMSG.TXTFIELD_4  = DATE_AREA.WD_STATUS;                        24180000
     CALL ISSUE_MSG('0012');                                            24190000
     CALL RCBBKXM_ERROR (NULL,'OTHER','#028');                          24200000
   END;                                                                 24210000
                                                                        24220000
 RETURN(DATE_AREA.WD_OUT_DATE);                                         24230000
                                                                        24240000
 END CALC_DATE;                                                         24250000
1/********************************************************************/ 24260000
 /*                                                                  */ 24270000
 /* MODULE NAME      : END_PROCESS_CTRY                              */ 24280000
 /*                                                                  */ 24290000
 /* DESCRIPTION      : DO ENDING ACTIONS FOR A COUNTRY ON FILE LEVEL */ 24300000
 /*                    IE. RECORD AND HASH TOTALS MUST BE CHECKED    */ 24310000
 /*                                                                  */ 24320000
 /********************************************************************/ 24330000
 END_PROCESS_CTRY: PROC;                                                24340000
                       /* IF RECORDS FOR COUNTRY PRESENT IN KZ0 FILE */ 24350000
                       /* MAY OR MAY NOT BE PRESENT IN KB0 FILE      */ 24360000
 IF SWITCH_RCBBKZ0_HEADER THEN                                          24370000
   DO;                                                                  24380000
    IF RCBBKZ0_C998.CDBSFRT ¬= 'C998'           /* WRONG RECORD TYPE */ 24390000
    THEN                                                                24400000
      DO;                                                               24410000
        G_WRKMSG.TXTFIELD_1 = RCBBKZ0_C998.IOPUCTY;                     24420000
        G_WRKMSG.TXTFIELD_2 = WRK_RCBBKZ0;                              24430000
        G_WRKMSG.TXTFIELD_3 = RCBBKZ0_C998.CDBSFRT;                     24440000
        CALL ISSUE_MSG('0018');                                         24450000
        CALL RCBBKXM_ERROR (NULL, 'OTHER', '#029');                     24460000
      END;                                                              24470000
                                                                        24480000
    COUNT.CNT_TOT.RCBBKZ0      = COUNT.CNT_TOT.RCBBKZ0 +                24490000
                                 COUNT.CNT_CTRY.RCBBKZ0;                24500000
                                                                        24510000
    COUNT.CNT_TOT.RCBBKZ0_REJ  = COUNT.CNT_TOT.RCBBKZ0_REJ +            24520000
                                 COUNT.CNT_CTRY.RCBBKZ0_REJ;            24530000
                                                                        24540000
    COUNT.CNT_TOT.RCBBKZ0_SKP  = COUNT.CNT_TOT.RCBBKZ0_SKP +            24550000
                                 COUNT.CNT_CTRY.RCBBKZ0_SKP;            24560000
                                                                        24570000
    COUNT.CNT_TOT.RCBBKZ0_HASH = COUNT.CNT_TOT.RCBBKZ0_HASH +           24580000
                                 COUNT.CNT_CTRY.RCBBKZ0_HASH;           24590000
                                                                        24600000
    COUNT.CNT_CTRY.RCBBKZ0_REP = COUNT.CNT_CTRY.RCBBKZ0;                24610000
    COUNT.CNT_CTRY.RCBBKZ0_REP_REJ = COUNT.CNT_CTRY.RCBBKZ0_REJ;        24620000
    COUNT.CNT_CTRY.RCBBKZ0_REP_SKP = COUNT.CNT_CTRY.RCBBKZ0_SKP;        24630000
                            /* IF RECORDS FOR COUNTRY PRESENT IN KB0 */ 24640000
    IF WRK_CTRYNO = WRK_KB0_CTRYNO THEN                                 24650000
      DO;                                                               24660000
       COUNT.CNT_CTRY.RCBBKB0_REP     = COUNT.CNT_CTRY.RCBBKB0;         24670000
       COUNT.CNT_CTRY.RCBBKB0_REP_REJ = COUNT.CNT_CTRY.RCBBKB0_REJ;     24680000
       COUNT.CNT_CTRY.RCBBKB0_REP_SKP = COUNT.CNT_CTRY.RCBBKB0_SKP;     24690000
                                                                        24700000
       COUNT.CNT_TOT.RCBBKB0    = COUNT.CNT_TOT.RCBBKB0 +               24710000
                                  COUNT.CNT_CTRY.RCBBKB0;               24720000
                                                                        24730000
       COUNT.CNT_TOT.RCBBKB0_REJ  = COUNT.CNT_TOT.RCBBKB0_REJ +         24740000
                                    COUNT.CNT_CTRY.RCBBKB0_REJ;         24750000
                                                                        24760000
       COUNT.CNT_TOT.RCBBKB0_SKP  = COUNT.CNT_TOT.RCBBKB0_SKP +         24770000
                                    COUNT.CNT_CTRY.RCBBKB0_SKP;         24780000
                                                                        24790000
       WRK_KB0_CTRYNO = WRK_KB0_CTRYNO_NXT;                             24800000
       WRK_KB0_CTRYNO_NXT = HIGH(3);                                    24810000
                                                                        24820000
       COUNT.CNT_CTRY.RCBBKB0     = COUNT.CNT_CTRY.RCBBKB0_NXT;         24830000
       COUNT.CNT_CTRY.RCBBKB0_NXT = 0;                                  24840000
       COUNT.CNT_CTRY.RCBBKB0_REJ = 0;                                  24850000
       COUNT.CNT_CTRY.RCBBKB0_SKP = 0;                                  24860000
      END;                                                              24870000
    ELSE                                                                24880000
      DO;                                                               24890000
       COUNT.CNT_CTRY.RCBBKB0_REP = 0;                                  24900000
       COUNT.CNT_CTRY.RCBBKB0_REP_REJ = 0;                              24910000
       COUNT.CNT_CTRY.RCBBKB0_REP_SKP = 0;                              24920000
      END;                                                              24930000
                                                                        24940000
    WRK_QCINRBA_C = RCBBKZ0_C998.QCINRBA;                               24950000
                                       /* CHECK REC COUNT OF COUNTRY */ 24960000
    IF WRK_QCINRBA_P ¬= COUNT.CNT_CTRY.RCBBKZ0                          24970000
    THEN                                                                24980000
      DO;                                                               24990000
        G_WRKMSG.TXTFIELD_1 = RCBBKZ0_C998.IOPUCTY;                     25000000
        G_WRKMSG.TXTFIELD_2 = WRK_RCBBKZ0;                              25010000
        G_WRKMSG.TXTFIELD_3 = RCBBKZ0_C998.QCINRBA;                     25020000
        G_WRKMSG.NUMFIELD_1 = COUNT.CNT_CTRY.RCBBKZ0;                   25030000
        CALL ISSUE_MSG('0007');                                         25040000
        CALL RCBBKXM_ERROR (NULL, 'OTHER', '#030');                     25050000
      END;                                                              25060000
                                     /* CHECK HASH TOTAL FOR COUNTRY */ 25070000
    IF RCBBKZ0_C998.QDBSHST ¬= COUNT.CNT_CTRY.RCBBKZ0_HASH              25080000
    THEN                                                                25090000
      DO;                                                               25100000
         G_WRKMSG.TXTFIELD_1     = RCBBKZ0_C998.IOPUCTY;                25110000
         G_WRKMSG.TXTFIELD_2     = WRK_RCBBKZ0;                         25120000
         G_WRKMSG.NUMFIELD_1     = COUNT.CNT_CTRY.RCBBKZ0_HASH;         25130000
         G_WRKMSG.NUMFIELD_2     = RCBBKZ0_C998.QDBSHST;                25140000
         CALL ISSUE_MSG('0175');                                        25150000
         CALL RCBBKXM_ERROR (NULL, 'OTHER', '#031');                    25160000
      END;                                                              25170000
                               /* WRITE TRAILER IF COUNTRY REQUESTED */ 25180000
                               /* AND IF HEADER WRITTEN TO O/P FILE  */ 25190000
    IF SWITCH_WRITE_TRAILER = TRUE THEN                                 25200000
      DO;                                                               25210000
       RCBBKX0_REC = RCBBKZ0_REC;                                       25220000
       COUNT.CNT_CTRY.RCBBKX0 = COUNT.CNT_CTRY.RCBBKX0 + 1 ;            25230000
       WRK_CNT_RCBBKX0        = COUNT.CNT_CTRY.RCBBKX0;                 25240000
       RCBBKX0_C998.QCINRBA   = WRK_CNT_RCBBKX0;                        25250000
       RCBBKX0_C998.QDBSHST   = COUNT.CNT_CTRY.RCBBKX0_HASH;            25260000
       COUNT.CNT_TOT.RCBBKX0      = COUNT.CNT_TOT.RCBBKX0 +             25270000
                                    COUNT.CNT_CTRY.RCBBKX0;             25280000
       COUNT.CNT_TOT.RCBBKX0_HASH = COUNT.CNT_TOT.RCBBKX0_HASH +        25290000
                                    COUNT.CNT_CTRY.RCBBKX0_HASH;        25300000
       WRITE FILE(RCBBKX0) FROM(RCBBKX0_REC);                           25310000
      END;                                                              25320000
                                                                        25330000
    CALL ISSUE_CTRY_CNT;                                                25340000
                                              /* RESET COUNTRY COUNT */ 25350000
    COUNT.CNT_CTRY.RCBBKZ0          = 0;                                25360000
    COUNT.CNT_CTRY.RCBBKZ0_REJ      = 0;                                25370000
    COUNT.CNT_CTRY.RCBBKZ0_SKP      = 0;                                25380000
    COUNT.CNT_CTRY.RCBBKZ0_HASH     = 0;                                25390000
    COUNT.CNT_CTRY.RCBBKX0          = 0;                                25400000
    COUNT.CNT_CTRY.RCBBKX0_HASH     = 0;                                25410000
    COUNT.CNT_CTRY.RCBBKZ0_REP      = 0;                                25420000
    COUNT.CNT_CTRY.RCBBKZ0_REP_REJ  = 0;                                25430000
    COUNT.CNT_CTRY.RCBBKZ0_REP_SKP  = 0;                                25440000
    COUNT.CNT_CTRY.RCBBKB0_REP      = 0;                                25450000
    COUNT.CNT_CTRY.RCBBKB0_REP_REJ  = 0;                                25460000
    COUNT.CNT_CTRY.RCBBKB0_REP_SKP  = 0;                                25470000
                                                                        25480000
    CALL READ_RCBBKZ0_REC;                 /* READ NEXT KZ0 RECORD   */ 25490000
   END;                                                                 25500000
 ELSE         /* IF RECORDS FOR THE COUNTRY PRESENT ONLY IN KB0 FILE */ 25510000
   DO;                                                                  25520000
    IF SWITCH_RCBBKB0_HEADER THEN                                       25530000
     DO;                                                                25540000
       RCBBKX0_REC = '';                                                25550000
       COUNT.CNT_CTRY.RCBBKX0 = COUNT.CNT_CTRY.RCBBKX0 + 1 ;            25560000
       WRK_CNT_RCBBKX0        = COUNT.CNT_CTRY.RCBBKX0;                 25570000
                                                                        25580000
       RCBBKX0_C998.CDBSFRT   = 'C998';                                 25590000
       RCBBKX0_C998.IOPUCTY   = WRK_CTRYNO;                             25600000
       RCBBKX0_C998.QCINRBA   = WRK_CNT_RCBBKX0;                        25610000
       RCBBKX0_C998.QDBSHST   = COUNT.CNT_CTRY.RCBBKX0_HASH;            25620000
                                                                        25630000
       COUNT.CNT_TOT.RCBBKX0      = COUNT.CNT_TOT.RCBBKX0 +             25640000
                                    COUNT.CNT_CTRY.RCBBKX0;             25650000
                                                                        25660000
       COUNT.CNT_TOT.RCBBKX0_HASH = COUNT.CNT_TOT.RCBBKX0_HASH +        25670000
                                    COUNT.CNT_CTRY.RCBBKX0_HASH;        25680000
                                                                        25690000
       WRITE FILE(RCBBKX0) FROM(RCBBKX0_REC);                           25700000
     END;                                                               25710000
                                                                        25720000
    COUNT.CNT_TOT.RCBBKB0    = COUNT.CNT_TOT.RCBBKB0 +                  25730000
                               COUNT.CNT_CTRY.RCBBKB0;                  25740000
                                                                        25750000
    COUNT.CNT_TOT.RCBBKB0_REJ  = COUNT.CNT_TOT.RCBBKB0_REJ +            25760000
                                 COUNT.CNT_CTRY.RCBBKB0_REJ;            25770000
                                                                        25780000
    COUNT.CNT_TOT.RCBBKB0_SKP  = COUNT.CNT_TOT.RCBBKB0_SKP +            25790000
                                 COUNT.CNT_CTRY.RCBBKB0_SKP;            25800000
                                                                        25810000
    COUNT.CNT_CTRY.RCBBKZ0_REP     = 0;                                 25820000
    COUNT.CNT_CTRY.RCBBKZ0_REP_REJ = 0;                                 25830000
    COUNT.CNT_CTRY.RCBBKZ0_REP_SKP = 0;                                 25840000
                                                                        25850000
    COUNT.CNT_CTRY.RCBBKB0_REP     = COUNT.CNT_CTRY.RCBBKB0;            25860000
    COUNT.CNT_CTRY.RCBBKB0_REP_REJ = COUNT.CNT_CTRY.RCBBKB0_REJ;        25870000
    COUNT.CNT_CTRY.RCBBKB0_REP_SKP = COUNT.CNT_CTRY.RCBBKB0_SKP;        25880000
                                                                        25890000
    CALL ISSUE_CTRY_CNT;                                                25900000
                                                                        25910000
    WRK_KB0_CTRYNO = WRK_KB0_CTRYNO_NXT;                                25920000
    WRK_KB0_CTRYNO_NXT = HIGH(3);                                       25930000
                                          /* RESET COUNTRY COUNT */     25940000
    COUNT.CNT_CTRY.RCBBKB0          = COUNT.CNT_CTRY.RCBBKB0_NXT;       25950000
    COUNT.CNT_CTRY.RCBBKB0_NXT      = 0;                                25960000
    COUNT.CNT_CTRY.RCBBKB0_REJ      = 0;                                25970000
    COUNT.CNT_CTRY.RCBBKB0_SKP      = 0;                                25980000
    COUNT.CNT_CTRY.RCBBKX0          = 0;                                25990000
    COUNT.CNT_CTRY.RCBBKX0_HASH     = 0;                                26000000
    COUNT.CNT_CTRY.RCBBKB0_REP      = 0;                                26010000
    COUNT.CNT_CTRY.RCBBKB0_REP_REJ  = 0;                                26020000
    COUNT.CNT_CTRY.RCBBKB0_REP_SKP  = 0;                                26030000
    COUNT.CNT_CTRY.RCBBKZ0_REP      = 0;                                26040000
    COUNT.CNT_CTRY.RCBBKZ0_REP_REJ  = 0;                                26050000
    COUNT.CNT_CTRY.RCBBKZ0_REP_SKP  = 0;                                26060000
   END;                                                                 26070000
                                                                        26080000
 SWITCH_RCBBKZ0_HEADER = FALSE;                                         26090000
 SWITCH_RCBBKB0_HEADER = FALSE;                                         26100000
 SWITCH_WRITE_TRAILER  = TRUE;                                          26110000
                                                                        26120000
 END END_PROCESS_CTRY;                                                  26130000
1/********************************************************************/ 26140000
 /*                                                                  */ 26150000
 /* MODULE NAME      : ISSUE_CTRY_CNT                                */ 26160000
 /*                                                                  */ 26170000
 /* DESCRIPTION      : ISSUE COUNT MESSAGES FOR A COUNTRY            */ 26180000
 /*                                                                  */ 26190000
 /********************************************************************/ 26200000
 ISSUE_CTRY_CNT: PROC;                                                  26210000
 G_WRKMSG.TXTFIELD_1            = WRK_CTRYNO;                           26220000
                                     /* RECORDS READ FOR RCBBKZ0     */ 26230000
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKZ0;                               26240000
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_CTRY.RCBBKZ0_REP;                26250000
                                     /* RECORDS ACCEPTED FOR RCBBKZ0 */ 26260000
 G_WRKMSG.NUMFIELD_2       = COUNT.CNT_CTRY.RCBBKZ0_REP -               26270000
                             COUNT.CNT_CTRY.RCBBKZ0_REP_REJ -           26280000
                             COUNT.CNT_CTRY.RCBBKZ0_SKP;                26290000
                                     /* RECORDS REJECTED FOR RCBBKZ0 */ 26300000
 G_WRKMSG.NUMFIELD_3       = COUNT.CNT_CTRY.RCBBKZ0_REP_REJ;            26310000
 G_WRKMSG.NUMFIELD_4       = COUNT.CNT_CTRY.RCBBKZ0_REP_SKP;            26320000
                                                                        26330000
 CALL ISSUE_MSG('0003');                                                26340000
                                                                        26350000
 G_WRKMSG.TXTFIELD_1       = WRK_CTRYNO;                                26360000
                                     /* RECORDS READ FOR RCBBKB0     */ 26370000
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKB0;                               26380000
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_CTRY.RCBBKB0_REP;                26390000
                                     /* RECORDS ACCEPTED FOR RCBBKB0 */ 26400000
 G_WRKMSG.NUMFIELD_2       = COUNT.CNT_CTRY.RCBBKB0_REP -               26410000
                             COUNT.CNT_CTRY.RCBBKB0_REP_REJ -           26420000
                             COUNT.CNT_CTRY.RCBBKB0_REP_SKP;            26430000
                                     /* RECORDS REJECTED FOR RCBBKB0 */ 26440000
 G_WRKMSG.NUMFIELD_3       = COUNT.CNT_CTRY.RCBBKB0_REP_REJ;            26450000
 G_WRKMSG.NUMFIELD_4       = COUNT.CNT_CTRY.RCBBKB0_REP_SKP;            26460000
 CALL ISSUE_MSG('0003');                                                26470000
                                     /* RECORDS WRITTEN TO RCBBKX0   */ 26480000
 G_WRKMSG.TXTFIELD_1       = WRK_CTRYNO;                                26490000
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKX0;                               26500000
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_CTRY.RCBBKX0;                    26510000
 CALL ISSUE_MSG('0004');                                                26520000
                                                                        26530000
 END ISSUE_CTRY_CNT;                                                    26540000
1/*********************************************************************/26550000
 /*                                                                   */26560000
 /* MODULE NAME      :  END_FILES                                     */26570000
 /*                                                                   */26580000
 /* DESCRIPTION      :  WRITE A TRAILER RECORD TO O/P FILE AND CLOSE  */26590000
 /*                                                                   */26600000
 /*********************************************************************/26610000
 END_FILES: PROC;                                                       26620000
                                                                        26630000
                                       /* WRITE A TRAILER TO RCBBKX0 */ 26640000
 RCBBKX0_REC = RCBBKZ0_REC;                                             26650000
 COUNT.CNT_TOT.RCBBKX0 = COUNT.CNT_TOT.RCBBKX0 + 1;                     26660000
 CNT_PIC15             = COUNT.CNT_TOT.RCBBKX0;                         26670000
 RCBBKX0_C999.QDBSCDR  = CNT_PIC15;                                     26680000
 RCBBKX0_C999.QDBSHST  = COUNT.CNT_TOT.RCBBKX0_HASH;                    26690000
 WRITE FILE (RCBBKX0) FROM (RCBBKX0_REC);                               26700000
 WRK_QDBSCDR_C = RCBBKZ0_C999.QDBSCDR;                                  26710000
                                           /*CHECK KZ0 RECORD COUNTS */ 26720000
 IF WRK_QDBSCDR_P ¬= COUNT.CNT_TOT.RCBBKZ0                              26730000
 THEN                                                                   26740000
   DO;                                                                  26750000
     G_WRKMSG.TXTFIELD_1            = ' ';                              26760000
     G_WRKMSG.TXTFIELD_2            = WRK_RCBBKZ0;                      26770000
     G_WRKMSG.TXTFIELD_3            = RCBBKZ0_C999.QDBSCDR;             26780000
     G_WRKMSG.NUMFIELD_1            = COUNT.CNT_TOT.RCBBKZ0;            26790000
     CALL ISSUE_MSG('0007');                                            26800000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#032');                        26810000
   END;                                                                 26820000
                                                   /* CHECK KZ0 HASH */ 26830000
 IF RCBBKZ0_C999.QDBSHST ¬= COUNT.CNT_TOT.RCBBKZ0_HASH                  26840000
 THEN                                                                   26850000
   DO;                                                                  26860000
     G_WRKMSG.TXTFIELD_1            = ' ';                              26870000
     G_WRKMSG.TXTFIELD_2           = WRK_RCBBKZ0;                       26880000
     G_WRKMSG.NUMFIELD_1           = COUNT.CNT_TOT.RCBBKZ0_HASH;        26890000
     G_WRKMSG.NUMFIELD_2           = RCBBKZ0_C999.QDBSHST;              26900000
     CALL ISSUE_MSG('0175');                                            26910000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#033');                        26920000
   END;                                                                 26930000
                                       /* CHECK RCBBKB0 RECORD COUNT */ 26940000
 WRK_QDBSCDR_C = RCBBKB0_C999.REC_CNT;                                  26950000
                                                                        26960000
 IF WRK_QDBSCDR_P ¬= COUNT.CNT_TOT.RCBBKB0                              26970000
 THEN                                                                   26980000
   DO;                                                                  26990000
     G_WRKMSG.TXTFIELD_1            = ' ';                              27000000
     G_WRKMSG.TXTFIELD_2            = WRK_RCBBKB0;                      27010000
     G_WRKMSG.TXTFIELD_3            = RCBBKB0_C999.REC_CNT;             27020000
     G_WRKMSG.NUMFIELD_1            = COUNT.CNT_TOT.RCBBKB0;            27030000
     CALL ISSUE_MSG('0007');                                            27040000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#034');                        27050000
   END;                                                                 27060000
                                                                        27070000
 CLOSE FILE (RCBBKB0);                                                  27080000
 CLOSE FILE (RCBBKZ0);                                                  27090000
 CLOSE FILE (RCBBKX0);                                                  27100000
                                                                        27110000
 END END_FILES;                                                         27120000
1/********************************************************************/ 27130000
 /*                                                                  */ 27140000
 /* MODULE NAME      : END_PROG                                      */ 27150000
 /*                                                                  */ 27160000
 /* DESCRIPTION      : ENDING ACTIONS FOR THE PROGRAM                */ 27170000
 /*                                                                  */ 27180000
 /********************************************************************/ 27190000
 END_PROG : PROC;                                                       27200000
                                                                        27210000
 IF RCBBKZ0_C999.CDBSFRT ¬= 'C999'              /* WRONG RECORD TYPE */ 27220000
 THEN                                                                   27230000
   DO;                                                                  27240000
     G_WRKMSG.TXTFIELD_1            = '';                               27250000
     G_WRKMSG.TXTFIELD_2            =  WRK_RCBBKZ0;                     27260000
     G_WRKMSG.TXTFIELD_3            =  RCBBKZ0_C999.CDBSFRT;            27270000
     CALL ISSUE_MSG('0018');                                            27280000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#035');                        27290000
   END;                                                                 27300000
                                                                        27310000
 IF RCBBKB0_C999.RECORD_TYPE ¬= 'C999'          /* WRONG RECORD TYPE */ 27320000
 THEN                                                                   27330000
   DO;                                                                  27340000
     G_WRKMSG.TXTFIELD_1            = '';                               27350000
     G_WRKMSG.TXTFIELD_2            =  WRK_RCBBKB0;                     27360000
     G_WRKMSG.TXTFIELD_3            =  RCBBKB0_C999.RECORD_TYPE;        27370000
     CALL ISSUE_MSG('0018');                                            27380000
     CALL RCBBKXM_ERROR (NULL, 'OTHER', '#036');                        27390000
   END;                                                                 27400000
                                                                        27410000
 G_WRKMSG.TXTFIELD_1       = '';                                        27420000
                                     /* RECORDS READ FOR RCBBKZ0     */ 27430000
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKZ0;                               27440000
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_TOT.RCBBKZ0;                     27450000
                                     /* RECORDS ACCEPTED FOR RCBBKZ0 */ 27460000
 G_WRKMSG.NUMFIELD_2       = COUNT.CNT_TOT.RCBBKZ0 -                    27470000
                             COUNT.CNT_TOT.RCBBKZ0_REJ -                27480000
                             COUNT.CNT_TOT.RCBBKZ0_SKP ;                27490000
                                     /* RECORDS REJECTED FOR RCBBKZ0 */ 27500000
 G_WRKMSG.NUMFIELD_3       = COUNT.CNT_TOT.RCBBKZ0_REJ;                 27510000
 G_WRKMSG.NUMFIELD_4       = COUNT.CNT_TOT.RCBBKZ0_SKP;                 27520000
 CALL ISSUE_MSG('0003');                                                27530000
                                                                        27540000
 G_WRKMSG.TXTFIELD_1       = '';                                        27550000
                                     /* RECORDS READ FOR RCBBKB0     */ 27560000
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKB0;                               27570000
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_TOT.RCBBKB0;                     27580000
                                     /* RECORDS ACCEPTED FOR RCBBKB0 */ 27590000
 G_WRKMSG.NUMFIELD_2       = COUNT.CNT_TOT.RCBBKB0 -                    27600000
                             COUNT.CNT_TOT.RCBBKB0_REJ -                27610000
                             COUNT.CNT_TOT.RCBBKB0_SKP ;                27620000
                                     /* RECORDS REJECTED FOR RCBBKB0 */ 27630000
 G_WRKMSG.NUMFIELD_3       = COUNT.CNT_TOT.RCBBKB0_REJ;                 27640000
 G_WRKMSG.NUMFIELD_4       = COUNT.CNT_TOT.RCBBKB0_SKP;                 27650000
 CALL ISSUE_MSG('0003');                                                27660000
                                     /* RECORDS WRITTEN TO RCBBKX0   */ 27670000
 G_WRKMSG.TXTFIELD_1       = '';                                        27680000
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKX0;                               27690000
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_TOT.RCBBKX0;                     27700000
 CALL ISSUE_MSG('0004');                                                27710000
                                                                        27720000
                                    /* ADD 1 TO KB0 FILE SEQ. NUMBER */ 27730000
 RCB035.FILE_SEQ_NUM_SC      = WRK_FILE_SEQ;                            27740000
 TB_RCB035                   = RCB035 , BY NAME;                        27750000
                                                                        27760000
 CALL RCBG50M (PTR_RCBV500,             /*   UPDATE RCB035 PARAMETER */ 27770000
               PTR_RCBV500I,                                            27780000
               PTR_RETURN_AREA,                                         27790000
               PTR_INT_AREA);                                           27800000
                                                                        27810000
 SELECT (RETURN_AREA.RETURN_CODE);                                      27820000
   WHEN (0);                                                            27830000
   OTHERWISE                                                            27840000
     DO;                                                                27850000
       CALL RCBBKXM_ERROR (ADDR (RETURN_AREA.RETURN_SQL),'DB2','#037'); 27860000
     END;                                                               27870000
 END;                                                                   27880000
                                                                        27890000
 CALL ISSUE_MSG('9999');                                                27900000
                                                                        27910000
 END END_PROG;                                                          27920000
1/********************************************************************/ 27930000
 /*                                                                  */ 27940000
 /* MODULE NAME      : ISSUE_MSG                                     */ 27950000
 /*                                                                  */ 27960000
 /* DESCRIPTION      : ISSSUE MESSAGES CORRESPONDING TO THE MESSAGE  */ 27970000
 /*                    NUMBER REQUESTED                              */ 27980000
 /********************************************************************/ 27990000
0ISSUE_MSG: PROC (A_MSG_NR);                                            28000000
                                                                        28010000
 DCL A_MSG_NR          CHAR(04);                                        28020000
                                                                        28030000
                                                /*RESET COMMON FIELDS*/ 28040000
 PARM_INT_AREA.MSG_VAR_CODES = ' ';                                     28050000
                                                                        28060000
 SELECT( A_MSG_NR );                                                    28070000
                                  /* I050: RECORD NOT FOUND WITH KEY */ 28080000
 WHEN ('I050') DO;                                                      28090000
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);   28100000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28110000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'PN';                               28120000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;                28130000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'PK';                               28140000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_3;                28150000
 END;                                                                   28160000
                                       /* 0002: RUN DATE FOR COUNTRY */ 28170000
 WHEN ('0002') DO;                                                      28180000
   PARM_INT_AREA.COUNTRY_NUMBER   = WRK_CTRYNO;                         28190000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28200000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'DT';                               28210000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = WRK_RUN_DATE;                       28220000
 END;                                                                   28230000
      /* 0003: RECORDS READ(C1),ACCEPTED(C3),REJECTED(C4),SKIPPED(C5)*/ 28240000
 WHEN ('0003') DO;                                                      28250000
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);   28260000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28270000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               28280000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;                28290000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'C1';                               28300000
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_1;                28310000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;                           28320000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'C3';                               28330000
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_2;                28340000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = CNT_PIC9;                           28350000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'C4';                               28360000
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_3;                28370000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = CNT_PIC9;                           28380000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'C5';                               28390000
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_4;                28400000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = CNT_PIC9;                           28410000
 END;                                                                   28420000
                     /* 0004: NUMBERS RECORDS WRITTEN TO OUTPUT FILE */ 28430000
 WHEN ('0004') DO;                                                      28440000
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);   28450000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28460000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               28470000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;                28480000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'C6';                               28490000
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_1;                28500000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;                           28510000
 END;                                                                   28520000
                               /* 0005: NO COUNTRY FOUND FOR PROGRAM */ 28530000
 WHEN ('0005') DO;                                                      28540000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28550000
 END;                                                                   28560000
                                  /* 0007: INVALID TRAILER REC COUNT */ 28570000
 WHEN ('0007') DO;                                                      28580000
   PARM_INT_AREA.COUNTRY_NUMBER    = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);  28590000
   PARM_INT_AREA.MESSAGE_TYPE      = 'IS';                              28600000
   PARM_INT_AREA.MSG_VAR_CODE_6    = 'FL';                              28610000
   PARM_INT_AREA.MSG_VAR_VALUE_6   = G_WRKMSG.TXTFIELD_2;               28620000
   PARM_INT_AREA.MSG_VAR_CODE_7    = 'C7';                              28630000
   PARM_INT_AREA.MSG_VAR_VALUE_7   = G_WRKMSG.TXTFIELD_3;               28640000
   CNT_PIC9                        = G_WRKMSG.NUMFIELD_1;               28650000
   PARM_INT_AREA.MSG_VAR_CODE_8    = 'C8';                              28660000
   PARM_INT_AREA.MSG_VAR_VALUE_8   = CNT_PIC9;                          28670000
 END;                                                                   28680000
                                         /* 0012: INVALID DATE FOUND */ 28690000
 WHEN ('0012') DO;                                                      28700000
   PARM_INT_AREA.COUNTRY_NUMBER   = WRK_CTRYNO;                         28710000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28720000
   PARM_INT_AREA.MSG_VAR_CODE_6    = 'DN';                              28730000
   PARM_INT_AREA.MSG_VAR_VALUE_6   = G_WRKMSG.TXTFIELD_1;               28740000
   PARM_INT_AREA.MSG_VAR_CODE_7    = 'DT';                              28750000
   PARM_INT_AREA.MSG_VAR_VALUE_7   = G_WRKMSG.TXTFIELD_2;               28760000
   PARM_INT_AREA.MSG_VAR_CODE_8    = SUBSTR (G_WRKMSG.TXTFIELD_3,1,2);  28770000
   PARM_INT_AREA.MSG_VAR_VALUE_8   = G_WRKMSG.TXTFIELD_4;               28780000
 END;                                                                   28790000
                                     /* 0013: EMPTY FILE OR DATABASE */ 28800000
 WHEN ('0013') DO;                                                      28810000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28820000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               28830000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_1;                28840000
 END;                                                                   28850000
                                       /* 0014: INVALID HEADER FOUND */ 28860000
 WHEN ('0014') DO;                                                      28870000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28880000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               28890000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_1;                28900000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'RT';                               28910000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_2;                28920000
 END;                                                                   28930000
                                  /* 0018: INVALID RECORD TYPE FOUND */ 28940000
 WHEN ('0018') DO;                                                      28950000
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);   28960000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               28970000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               28980000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;                28990000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'RT';                               29000000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_3;                29010000
 END;                                                                   29020000
                        /*  0175: INCORRECT HASH TOTAL OF INPUT FILE */ 29030000
 WHEN ('0175') DO;                                                      29040000
   PARM_INT_AREA.COUNTRY_NUMBER    = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);  29050000
   PARM_INT_AREA.MESSAGE_TYPE      = 'IS';                              29060000
   PARM_INT_AREA.MSG_VAR_CODE_6    = 'FL';                              29070000
   PARM_INT_AREA.MSG_VAR_VALUE_6   = G_WRKMSG.TXTFIELD_2;               29080000
   CNT_PIC9                        = G_WRKMSG.NUMFIELD_1;               29090000
   PARM_INT_AREA.MSG_VAR_CODE_7    = 'HT';                              29100000
   PARM_INT_AREA.MSG_VAR_VALUE_7   = CNT_PIC9;                          29110000
   CNT_PIC9                        = G_WRKMSG.NUMFIELD_2;               29120000
   PARM_INT_AREA.MSG_VAR_CODE_8    = 'HT';                              29130000
   PARM_INT_AREA.MSG_VAR_VALUE_8   = CNT_PIC9;                          29140000
 END;                                                                   29150000
                                   /* 0180: RUNS ARE OUT OF SEQUENCE */ 29160000
 WHEN ('0180') DO;                                                      29170000
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);   29180000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               29190000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               29200000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;                29210000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'SQ';                               29220000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_3;                29230000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'PN';                               29240000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = G_WRKMSG.TXTFIELD_4;                29250000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'PK';                               29260000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = G_WRKMSG.TXTFIELD_5;                29270000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'SQ';                               29280000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = G_WRKMSG.TXTFIELD_6;                29290000
 END;                                                                   29300000
                  /* 0181: RECORD PRESENT, BUT COUNTRY NOT REQUESTED */ 29310000
 WHEN ('0181') DO;                                                      29320000
   PARM_INT_AREA.COUNTRY_NUMBER   = WRK_CTRYNO;                         29330000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               29340000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'CY';                               29350000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = WRK_CTRYNO;                         29360000
 END;                                                                   29370000
                         /* 0184: COUNTRY REAUESTED, BUT NOT PRESENT */ 29380000
 WHEN ('0184') DO;                                                      29390000
   PARM_INT_AREA.COUNTRY_NUMBER   = WRK_CTRYNO;                         29400000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               29410000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'CY';                               29420000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = WRK_CTRYNO;                         29430000
 END;                                                                   29440000
                                    /* 0198: CUSTOMER NUMBER INVALID */ 29450000
 WHEN ('0198') DO;                                                      29460000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               29470000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               29480000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          29490000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'CU';                               29500000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = VALIDATE_C002.CUSTOMER;             29510000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'HW';                               29520000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = VALIDATE_C002.TYPE                  29530000
                                  ||VALIDATE_C002.SERIAL;               29540000
 END;                                                                   29550000
                              /* 0199: MACHINE SERIAL NUMBER INVALID */ 29560000
 WHEN ('0199') DO;                                                      29570000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               29580000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               29590000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          29600000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'SQ';                               29610000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = VALIDATE_C002.SERIAL;               29620000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'HW';                               29630000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = VALIDATE_C002.TYPE                  29640000
                                  ||VALIDATE_C002.SERIAL;               29650000
 END;                                                                   29660000
                                       /* 0201: INVALID MACHINE TYPE */ 29670000
 WHEN ('0201') DO;                                                      29680000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               29690000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               29700000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          29710000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'PT';                               29720000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = VALIDATE_C002.TYPE;                 29730000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'HW';                               29740000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = VALIDATE_C002.TYPE                  29750000
                                  ||VALIDATE_C002.SERIAL;               29760000
 END;                                                                   29770000
                                       /* 0237: STOP DATE < EFF DATE */ 29780000
 WHEN ('0237') DO;                                                      29790000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               29800000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               29810000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          29820000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'D2';                               29830000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = VALIDATE_C002.STOP_DATE;            29840000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               29850000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = VALIDATE_C002.EFF_DATE;             29860000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'HW';                               29870000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = VALIDATE_C002.TYPE                  29880000
                                  ||VALIDATE_C002.SERIAL;               29890000
 END;                                                                   29900000
                                      /* 0238: SERV_END < SERV_START */ 29910000
 WHEN ('0238') DO;                                                      29920000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               29930000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               29940000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          29950000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'D2';                               29960000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = VALIDATE_C002.SERV_END;             29970000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               29980000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = VALIDATE_C002.SERV_START;           29990000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'HW';                               30000000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = VALIDATE_C002.TYPE                  30010000
                                  ||VALIDATE_C002.SERIAL;               30020000
 END;                                                                   30030000
                                        /* 0239: EFFECTIVE < SERVICE */ 30040000
 WHEN ('0239') DO;                                                      30050000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               30060000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               30070000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          30080000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'D1';                               30090000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = VALIDATE_C002.EFF_DATE;             30100000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D2';                               30110000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = VALIDATE_C002.STOP_DATE;            30120000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D1';                               30130000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = VALIDATE_C002.SERV_START;           30140000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D2';                               30150000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = VALIDATE_C002.SERV_END;             30160000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'HW';                               30170000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = VALIDATE_C002.TYPE                  30180000
                                  ||VALIDATE_C002.SERIAL;               30190000
 END;                                                                   30200000
                                 /* 0245: WSU OVERLAPS WITH CONTRACT */ 30210000
 WHEN ('0245') DO;                                                      30220000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               30230000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               30240000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          30250000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               30260000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          30270000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               30280000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               30290000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               30300000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               30310000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               30320000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = RCBBKZ0_C002.DDBSEFF;               30330000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               30340000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = RCBBKZ0_C002.DDBSIAC;               30350000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  30360000
 END;                                                                   30370000
                                   /* 0246: WSU EXCEEDS BAU WARRANTY */ 30380000
 WHEN ('0246') DO;                                                      30390000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               30400000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               30410000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          30420000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               30430000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          30440000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               30450000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               30460000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               30470000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               30480000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               30490000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = T220_ARRAY.EFFECTIVE_DATE(K);       30500000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               30510000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = T220_ARRAY.END_DATE(K);             30520000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  30530000
 END;                                                                   30540000
                                    /* 0247: WSU EXCEEDS PI WARRANTY */ 30550000
 WHEN ('0247') DO;                                                      30560000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               30570000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               30580000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          30590000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               30600000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          30610000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               30620000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               30630000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               30640000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               30650000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               30660000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = TB_RCBV051.INSTALL_DATE;            30670000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               30680000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = TB_RCBV051.WARRANTY_EXP_DATE;       30690000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  30700000
 END;                                                                   30710000
                      /* 0248: NEITHER BAU OR PI WARR EXISTS FOR WSU */ 30720000
 WHEN ('0248') DO;                                                      30730000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               30740000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               30750000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          30760000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               30770000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          30780000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               30790000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               30800000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               30810000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               30820000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  30830000
 END;                                                                   30840000
                                 /* 0249: MSU OVERLAPS WITH BAU WARR */ 30850000
 WHEN ('0249') DO;                                                      30860000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               30870000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               30880000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          30890000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               30900000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          30910000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               30920000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               30930000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               30940000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               30950000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               30960000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = T220_ARRAY.EFFECTIVE_DATE(K);       30970000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               30980000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = T220_ARRAY.END_DATE(K);             30990000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  31000000
 END;                                                                   31010000
                                  /* 0250: MSU OVERLAPS WITH PI WARR */ 31020000
 WHEN ('0250') DO;                                                      31030000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               31040000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               31050000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          31060000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               31070000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          31080000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               31090000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               31100000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               31110000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               31120000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               31130000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = TB_RCBV051.INSTALL_DATE;            31140000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               31150000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = TB_RCBV051.WARRANTY_EXP_DATE;       31160000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  31170000
 END;                                                                   31180000
                               /* 0251:MSU DOESN'T HAVE KA0 CONTRACT */ 31190000
 WHEN ('0251') DO;                                                      31200000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               31210000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               31220000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          31230000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               31240000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          31250000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               31260000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               31270000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               31280000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               31290000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  31300000
 END;                                                                   31310000
                             /* 0252: MSU OVERLAPS WITH KA0 CONTRACT */ 31320000
 WHEN ('0252') DO;                                                      31330000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               31340000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               31350000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          31360000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               31370000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          31380000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               31390000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               31400000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               31410000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               31420000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               31430000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = RCBBKZ0_C002.DDBSEFF;               31440000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               31450000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = RCBBKZ0_C002.DDBSIAC;               31460000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  31470000
 END;                                                                   31480000
                              /* 0257: MSU IS WITHIN BAU WARR PERIOD */ 31490000
 WHEN ('0257') DO;                                                      31500000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               31510000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               31520000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          31530000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               31540000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          31550000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               31560000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               31570000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               31580000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               31590000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               31600000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = T220_ARRAY.EFFECTIVE_DATE(K);       31610000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               31620000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = T220_ARRAY.END_DATE(K);             31630000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  31640000
 END;                                                                   31650000
                                       /* 0258: INVALID UPGRADE TYPE */ 31660000
 WHEN ('0258') DO;                                                      31670000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               31680000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               31690000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          31700000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               31710000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          31720000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'UT';                               31730000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = WRK_UPGD_TYP;                       31740000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  31750000
 END;                                                                   31760000
                              /* 0259: MSU DOES NOT OVERLAP WITH KA0 */ 31770000
 WHEN ('0259') DO;                                                      31780000
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';                               31790000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               31800000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKB0';                          31810000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';                               31820000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KB0_HW;                          31830000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';                               31840000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKB0_C002.DDBSEFF;               31850000
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';                               31860000
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKB0_C002.DDBSIAC;               31870000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'D1';                               31880000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = RCBBKZ0_C002.DDBSEFF;               31890000
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'D2';                               31900000
   PARM_INT_AREA.MSG_VAR_VALUE_11 = RCBBKZ0_C002.DDBSIAC;               31910000
   PARM_INT_AREA.ERR_AREA.SEQUENCE_KEY = SK_KB0_TEMP1;                  31920000
 END;                                                                   31930000
                                  /* 9999: PROGRAM SUCCESFULLY ENDED */ 31940000
 WHEN ('9999') DO;                                                      31950000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               31960000
 END;                                                                   31970000
                                      /* INVALID MSG NUMBER PASSED   */ 31980000
 OTHERWISE                                                              31990000
   DO;                                                                  32000000
     PUT SKIP LIST( '#DBG# '||'A_MSG_NR=' || A_MSG_NR);                 32010000
     CALL RCBBKXM_ERROR (NULL(), 'OTHER', '#038');                      32020000
   END;                                                                 32030000
  END;                                                                  32040000
                                                                        32050000
                                 /* MESSAGE IS VALID, REPORT MESSAGE */ 32060000
 PARM_INT_AREA.MESSAGE_NUMBER = A_MSG_NR;                               32070000
 CALL RCB0M1M(PTR_INT_AREA);                                            32080000
                                                                        32090000
                    /* PREVENT PRINTING PREVIOUS MESSAGE WORK FIELDS */ 32100000
 G_WRKMSG = '';                                                         32110000
                                                                        32120000
 END ISSUE_MSG;                                                         32130000
1/********************************************************************/ 32140000
 /*                                                                  */ 32150000
 /* MODULE NAME      : RCBBKXM_ERROR                                 */ 32160000
 /*                                                                  */ 32170000
 /* DESCRIPTION      : CALLS THE COMMON ERROR ROUTINE AFTER FILLING  */ 32180000
 /*                    THE INPUT VARIABLES                           */ 32190000
 /*                                                                  */ 32200000
 /********************************************************************/ 32210000
0RCBBKXM_ERROR: PROC     (PTR_ERROR,                                    32220000
                          ERR_TYPE,                                     32230000
                          CALL_ID);                                     32240000
 DCL PTR_ERROR    PTR;                                                  32250000
 DCL ERR_TYPE     CHAR(8);                                              32260000
 DCL CALL_ID      CHAR(4);                                              32270000
                                                                        32280000
 PARM_INT_AREA.PTR_ERROR      = PTR_ERROR;                              32290000
 PARM_INT_AREA.ERR_TYPE       = ERR_TYPE;                               32300000
 PARM_INT_AREA.CALL_ID        = CALL_ID;                                32310000
                                                                        32320000
 CALL RCB0E1M (PTR_INT_AREA);                                           32330000
                                                                        32340000
0END RCBBKXM_ERROR;                                                     32350000
1/*******************************************************************/  32360000
 /*  DO NOT CHANGE THIS PART, IT IS MEANT FOR ABR                   */  32370000
 /*******************************************************************/  32380000
0%INCLUDE DAIFPLH ;                      /* COMPILE DATE/TIME STAMP */  32390000
 $DAIMOD (RCBBKXM);                      /* MODULE TO BE COMPILED   */  32400000
0/*******************************************************************/  32410000
 /* END OF ABR BLOCK                                                */  32420000
 /*******************************************************************/  32430000
 END RCBBKXM;                                                           32440000