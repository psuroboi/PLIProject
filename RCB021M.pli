 /* RCB021M - Substr for mixed character strings (DBCS)              */ 00019212
 /*                                                                  */ 00020000
 /* 5695-153 (C) COPYRIGHT IBM EMEA WORLD TRADE CORPORATION 1991     */ 00030000
 /* LICENSED MATERIAL - PROGRAM PROPERTY OF IBM                      */ 00040000
 /* REFER TO COPYRIGHT INSTRUCTIONS: FORM G120-2083                  */ 00050000
 /*                                                                  */ 00060000
 /********************************************************************/ 00070000
 /* PROGRAM          : RCB021M                                       */ 00080000
 /*                                                                  */ 00090000
 /* LANGUAGE         : PLI                                           */ 00100000
 /*                                                                  */ 00110000
 /* TYPE             : LINKABLE MODULE                               */ 00120000
 /*                                                                  */ 00130000
 /* DESCRIPTION      : Substr for mixed character strings (DBCS)     */ 00140000
 /*                                                                  */ 00150000
 /* INPUT            : None                                          */ 00160000
 /*                                                                  */ 00170000
 /* OUTPUT           : None                                          */ 00180000
 /*                                                                  */ 00190000
 /* EXTERNAL MODULES : None                                          */ 00200000
 /*                                                                  */ 00210000
 /* MESSAGES         : none                                          */ 00220000
 /*                                                                  */ 00230000
 /* DEPENDENCIES     : ???                                           */ 00240000
 /*                                                                  */ 00250000
 /* MAINTENANCE LOG  :                                               */ 00260000
 /* ---------------                                                  */ 00270000
 /*                                                                  */ 00280000
 /*  DATE       | WORK-ITEMNO. | DESCRIPTION                         */ 00290000
 /* --------------------------------------------------------------   */ 00300000
 /*  1997-04-11 | PTM1036      | ADDED PROLOG                        */ 00310000
 /*  1997-05-05 | PTM1038      | CORRECT NAMES                       */ 00320000
 /*             |              |                                     */ 00330000
 /********************************************************************/ 00340000
 RCB021M: PROC (IN,POS,LEN,OUT,RET);                                    00350000
 /*-------------------------------------------------------------------*/00360000
 /*                                                                   */00370000
 /*  SUBSTR for Mixed character strings                               */00380000
 /*                                                                   */00390000
 /*  How to use :                                                     */00400000
 /*                                                                   */00410000
 /*    CALL RCB021M (IN,POS,LEN,OUT,RET);                             */00420000
 /*                                                                   */00430000
 /*  Variable Description :                                           */00440000
 /*                                                                   */00450000
 /*    IN  : Input chracter strings                                   */00460000
 /*            Any length                                             */00470000
 /*    POS : Start position which you want                            */00480000
 /*            FIXED (15)                                             */00490000
 /*    LEN : Character strings length which you want                  */00500000
 /*            FIXED (15)                                             */00510000
 /*    OUT : Output character strings                                 */00520000
 /*            Any length                                             */00530000
 /*    RET : Return code ( 0 : normal end  16 : parm error )          */00540000
 /*            FIXED (15)                                             */00550000
 /*                                                                   */00560000
 /*-------------------------------------------------------------------*/00570000
 /*-------------------------------------------------------------------*/00580000
 /*   D E C L A R E   P A R M                                         */00590000
 /*-------------------------------------------------------------------*/00600000
 DCL IN        CHAR  (*),                                               00610000
     OUT       CHAR  (*),                                               00620000
     POS       FIXED (15),                                              00630000
     LEN       FIXED (15),                                              00640000
     RET       FIXED (15);                                              00650000
 /*-------------------------------------------------------------------*/00660000
 /*   D E C L A R E   W O R K   A R E A                               */00670000
 /*-------------------------------------------------------------------*/00680000
 DCL POS_WORK  FIXED (15) INIT (0),                                     00690000
     LEN_IN    FIXED (15) INIT (0),                                     00700000
     LEN_OUT   FIXED (15) INIT (0),                                     00710000
     LEN_COPY  FIXED (15) INIT (0),                                     00720000
     I         FIXED (15) INIT (0),                                     00730000
     J         FIXED (15) INIT (0);                                     00740000
 DCL SO        CHAR  (1)  INIT ('0E'X),                                 00750000
     SI        CHAR  (1)  INIT ('0F'X),                                 00760000
     CHAR_ATTR CHAR  (2)  INIT ('');                                    00770000
 DCL ADD_SO    BIT   (1)  INIT ('0'B),                                  00780000
     ADD_SI    BIT   (1)  INIT ('0'B);                                  00790000
 /*-------------------------------------------------------------------*/00800000
 /*   D E C L A R E   B U I L T I N   F U N C T I O N                 */00810000
 /*-------------------------------------------------------------------*/00820000
 DCL LENGTH BUILTIN,                                                    00830000
     SUBSTR BUILTIN;                                                    00840000
 /*-------------------------------------------------------------------*/00850000
 /*   S T A R T                                                       */00860000
 /*-------------------------------------------------------------------*/00870000
 LEN_IN  = LENGTH (IN);                                                 00880000
 LEN_OUT = LENGTH (OUT);                                                00890000
                                                                        00900000
 IF (POS <= LEN_IN) & (0 < LEN)                                         00910000
 THEN DO;                                                               00920000
 /*-------------------------------------------------------------------*/00930000
 /*   C H E C K   S T A R T   C H A R   A T T R I B U T E             */00940000
 /*-------------------------------------------------------------------*/00950000
   J = POS;                                                             00960000
   CALL CHK_CHAR_ATTR;                                                  00970000
 /*-------------------------------------------------------------------*/00980000
 /*   R E S E T   S T A R T   P O S I T I O N                         */00990000
 /*-------------------------------------------------------------------*/01000000
   SELECT (CHAR_ATTR);                                                  01010000
     WHEN ('D1') DO;                                                    01020000
       POS_WORK = POS - 1;                                              01030000
       ADD_SO = '1'B;                                                   01040000
     END;                                                               01050000
     WHEN ('D2') DO;                                                    01060000
       POS_WORK = POS - 2;                                              01070000
       ADD_SO = '1'B;                                                   01080000
     END;                                                               01090000
     WHEN ('SI') DO;                                                    01100000
       POS_WORK = POS + 1;                                              01110000
     END;                                                               01120000
     OTHERWISE DO;                                                      01130000
       POS_WORK = POS;                                                  01140000
     END;                                                               01150000
   END;                                                                 01160000
                                                                        01170000
   IF POS_WORK <= LEN_IN                                                01180000
   THEN DO;                                                             01190000
                                                                        01200000
 /*-------------------------------------------------------------------*/01210000
 /*   R E S E T   C O P Y   L E N G T H   T O   F I T   T O   V A R   */01220000
 /*-------------------------------------------------------------------*/01230000
     IF LEN_IN < (POS_WORK + LEN - 1)                                   01240000
       THEN LEN_COPY = LEN_IN - POS_WORK + 1;                           01250000
       ELSE LEN_COPY = LEN;                                             01260000
                                                                        01270000
     IF LEN_OUT < LEN_COPY                                              01280000
       THEN LEN_COPY = LEN_OUT;                                         01290000
                                                                        01300000
 /*-------------------------------------------------------------------*/01310000
 /*   C H E C K   L A S T   C H A R   A T T R I B U T E               */01320000
 /*-------------------------------------------------------------------*/01330000
     J = POS_WORK + LEN_COPY - 1;                                       01340000
     CALL CHK_CHAR_ATTR;                                                01350000
 /*-------------------------------------------------------------------*/01360000
 /*   R E S E T   C O P Y   L E N G T H                               */01370000
 /*-------------------------------------------------------------------*/01380000
     SELECT (CHAR_ATTR);                                                01390000
       WHEN ('SO') DO;                                                  01400000
         LEN_COPY = LEN_COPY - 1;                                       01410000
       END;                                                             01420000
       WHEN ('D1') DO;                                                  01430000
         ADD_SI = '1'B;                                                 01440000
       END;                                                             01450000
       WHEN ('D2') DO;                                                  01460000
         LEN_COPY = LEN_COPY - 1;                                       01470000
         ADD_SI = '1'B;                                                 01480000
       END;                                                             01490000
       OTHERWISE;                                                       01500000
     END;                                                               01510000
                                                                        01520000
 /*-------------------------------------------------------------------*/01530000
 /*   C O P Y   I N   T O   O U T   &   A D D   S O  ,  S I           */01540000
 /*-------------------------------------------------------------------*/01550000
     IF 0 < LEN_COPY                                                    01560000
     THEN DO;                                                           01570000
       OUT = SUBSTR (IN,POS_WORK,LEN_COPY);                             01580000
       IF ADD_SO = '1'B                                                 01590000
         THEN SUBSTR (OUT,1,1) = SO;                                    01600000
       IF ADD_SI = '1'B                                                 01610000
         THEN SUBSTR (OUT,LEN_COPY,1) = SI;                             01620000
     END;                                                               01630000
     ELSE OUT = '';                                                     01640000
                                                                        01650000
     RET = 0;                                                           01660000
   END;                                                                 01670000
   ELSE DO;                                                             01680000
     OUT = '';                                                          01690000
     RET = 0;                                                           01700000
   END;                                                                 01710000
 END;                                                                   01720000
 /*-------------------------------------------------------------------*/01730000
 /*   P A R M   E R R O R                                             */01740000
 /*-------------------------------------------------------------------*/01750000
 ELSE RET = 16;                                                         01760000
 /*-------------------------------------------------------------------*/01770000
 /*   S U B   P R O C                                                 */01780000
 /*-------------------------------------------------------------------*/01790000
 /*-------------------------------------------------------------------*/01800000
 /*   C H E C K   C H A R   A T T R I B U T E                         */01810000
 /*-------------------------------------------------------------------*/01820000
 CHK_CHAR_ATTR : PROC;                                                  01830000
   CHAR_ATTR = 'S ';                                                    01840000
   DO I = 1 TO J;                                                       01850000
     SELECT (SUBSTR(IN,I,1));                                           01860000
       WHEN (SO) CHAR_ATTR = 'SO';                                      01870000
       WHEN (SI) CHAR_ATTR = 'SI';                                      01880000
       OTHERWISE DO;                                                    01890000
         SELECT (CHAR_ATTR);                                            01900000
           WHEN ('SO') CHAR_ATTR = 'D1';                                01910000
           WHEN ('D1') CHAR_ATTR = 'D2';                                01920000
           WHEN ('D2') CHAR_ATTR = 'D1';                                01930000
           WHEN ('SI') CHAR_ATTR = 'S ';                                01940000
           OTHERWISE   CHAR_ATTR = 'S ';                                01950000
         END;                                                           01960000
       END;                                                             01970000
     END;                                                               01980000
   END;                                                                 01990000
 END;                                                                   02000000
 /*-------------------------------------------------------------------*/02010000
 /*   E N D                                                           */02020000
 /*-------------------------------------------------------------------*/02030000
1/*******************************************************************/  02040000
 /* DO NOT CHANGE THIS PART, IT IS MEANT FOR ABR                    */  02050000
 /*******************************************************************/  02060000
0%INCLUDE DAIFPLH ;                   /* COMPILE DATE/TIME STAMP    */  02070000
 $DAIMOD (RCB021M);                   /* MODULE TO BE COMPILED      */  02080000
0/*******************************************************************/  02090000
 /* END OF ABR BLOCK                                                */  02100000
 /*******************************************************************/  02110000
 END RCB021M;                                                           02120000