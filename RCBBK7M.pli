 /* RCBBK7M - CREATE FILES FOR TABLE UPDATES AND MERGE               */ 00010004
 /*                                                                  */ 00020000
 /* 5695-153 (C) COPYRIGHT IBM EMEA WORLD TRADE CORPORATION 1991     */ 00030000
 /* LICENSED MATERIAL - PROGRAM PROPERTY OF IBM                      */ 00040000
 /* REFER TO COPYRIGHT INSTRUCTIONS: FORM G120-2083                  */ 00050000
 /*                                                                  */ 00060000
 /********************************************************************/ 00070000
 /* PROGRAM          : RCBBK7M                                       */ 00080001
 /*                                                                  */ 00090000
 /* LANGUAGE         : PLISQL                                        */ 00100000
 /*                                                                  */ 00150000
 /* TYPE             : BATCH                                         */ 00160000
 /*                                                                  */ 00170000
 /* DESCRIPTION      : CREATE FILES FOR UPDATING TABLES T090,T120    */ 00180003
 /*                    AND FOR MERGING OF KA0 LIKE FILE AND ME/SE    */ 00190000
 /*                    FILE                                          */ 00200000
 /*                                                                  */ 00280000
 /* INPUT            : RCBBKW0 ME/SE FILE                            */ 00290000
 /*                    RCBBKW4 ME/SE FILE                            */ 00290000
 /*                    RCBT0500_PARM                                 */ 00300000
 /*                                                                  */ 00310000
 /* OUTPUT           : RCBBKW1   FOR T090 COMPARE AND UPDATE PROGRAM */ 00320001
 /*                    RCBBKW2   FOR T120 COMPARE AND UPDATE PROGRAM */ 00320001
 /*                    RCBBKW3   FOR MERGEING OF KA0 LIKE FILE AND   */ 00320001
 /*                              ME/SE FILE.                         */
 /*                    RCBT0500_PARM                                 */ 00330000
 /*                    RCB0M10   MESSAGES ISSUED                     */ 00340000
 /*                                                                  */ 00350000
 /* EXTERNAL MODULES : RCB0E1M   COMMON ERROR ROUTINE                */ 00360000
 /*                    RCB0M1M   COMMON MESSAGE ROUTINE              */ 00370000
 /*                    RCB0T1M   RETRIEVE SYSTEM DATE                */ 00380000
 /*                    RCB004M   VALIDATE DATE                       */ 00380000
 /*                    RCB019M   RETRIEVE COUNTRY NUMBERS            */ 00400000
 /*                    RCB020M   RETRIEVE RUN DATE                   */ 00410000
 /*                                                                  */ 00440000
 /* MESSAGES         : I050,0002,0003,0004,0005,0007,0012,0013,0014  */ 00450000
 /*                    0018,0180,0181,0184,0198,0199,0201,0237,0253  */ 00450000
 /*                    0262,0263,9999                                */ 00460000
 /*                                                                  */ 00470000
 /* DEPENDENCIES     : HAS TO BE RUN AFTER THE DATA IS EXTRACTED FROM*/ 00480000
 /*                    ME/SE ENVIRONMENT                             */ 00490000
 /*                                                                  */ 00520000
 /* MAINTENANCE LOG  :                                               */ 00530000
 /* ---------------                                                  */ 00540000
 /*                                                                  */ 00550000
 /* DATE       | WORK-ITEMNO. | DESCRIPTION                          */ 00560000
 /* ---------------------------------------------------------------  */ 00570000
 /* 2009-07-14 | RB01301      | CEDS ALIGNMENT TO CHIS 810 - BAU     */ 00571004
 /*            |              | SERVICE EXTENSIONS                   */ 00572004
 /* 2010-03-12 | CEDS00000507 | CORRECTED MERGING LOGIC IN CASE OF   */ 00572004
 /*            |              | OPEN END DATE.CORRECTED ERROR        */ 00572004
 /*            |              | MESSAGES AND MOVED VALUES TO DISPLAY */ 00572004
 /*            |              | MESSAGE FIELDS                       */ 00572004
 /* 2010-03-26 | CEDS00000513 | CORRECTED MERGING LOGIC TO PASS      */ 00572004
 /*            |              | MINIMUM EFFECTIVE DATE AND MAXIMUM   */ 00572004
 /*            |              | END DATE FOR MESE'S AT CUSTOMER LEVEL*/
 /* 2010-04-23 | CEDS00000519 | THE COUNTER IS INCREMENTED WHEN      */ 00572004
 /*            |              | TRAILER RECORD IS READ               */
 /* 2013-08-12 | CEDS00000644 | INTRODUCED A NEW INPUT FILE RCBBKW4  */ 00572004
 /*            |              | TO AVOID THE SORTING ISSUE.          */
 /********************************************************************/ 00670000
1RCBBK7M: PROC                                                          00680000
          OPTIONS (MAIN)                                                00690000
          REORDER;                                                      00700000
-DEFAULT RANGE (*) STATIC;                                              00710000
1/********************************************************************/ 00720000
 /* FILE DECLARATIONS (NON GSAM)                                     */ 00730000
 /********************************************************************/ 00740000
0DCL RCBBKW0  FILE RECORD INPUT; /* SORTED MESE FILE BASED ON OFFER  */ 00750000
                                 /* SOC CEDS00000644 */
0DCL RCBBKW4  FILE RECORD INPUT; /* SORTED MESE FILE BASED ON TOS    */ 00750000
                                 /* EOC CEDS00000644 */
0DCL RCBBKW1  FILE RECORD OUTPUT;/* MESE FILE TO COMPARE AND UPDATE  */ 00760000
                                 /* T090                             */
0DCL RCBBKW2  FILE RECORD OUTPUT;/* MESE FILE TO COMPARE AND UPDATE  */ 00760000
                                 /* T120                             */
0DCL RCBBKW3  FILE RECORD OUTPUT;/* MESE FILE FOR MERGING WITH KA0   */ 00760000
                                 /* LIKE FILE                        */
0DCL RCB0M10  FILE RECORD OUTPUT;/*           MESSAGE FILE           */ 00770000
1/********************************************************************/ 00780000
 /* EXTERNAL ENTRIES                                                 */ 00790000
 /********************************************************************/ 00800000
 DCL RCB0E1M   ENTRY  EXTERNAL;          /* COMMON ERROR ROUTINE     */ 00810000
 DCL RCB0M1M   ENTRY  EXTERNAL;          /* COMMON MESSAGE ROUTINE   */ 00820000
 DCL RCB0T1M   ENTRY  EXTERNAL;          /* SYSTEM DATE              */ 00830000
 DCL RCB004M   ENTRY  EXTERNAL;          /* VALIDATE DATE FORMAT     */ 00830000
 DCL RCB019M   ENTRY  EXTERNAL;          /* RETRIEVE COUNTRY NUMBERS */ 00850000
 DCL RCB020M   ENTRY  EXTERNAL;          /* RETRIEVE RUNDATES        */ 00860000
 DCL RCBI50M   ENTRY  EXTERNAL;          /* RETRIEVE RUNDATES        */ 00860000
 DCL RCBF50M   ENTRY  EXTERNAL;          /* RETRIEVE RUNDATES        */ 00860000
 DCL RCBG50M   ENTRY  EXTERNAL;          /* RETRIEVE RUNDATES        */ 00860000
1/********************************************************************/ 00890000
 /* EXTERNAL PARAMETER INTERFACES                                    */ 00900000
 /********************************************************************/ 00910000
0DCL PTR_INT_AREA      PTR;                                             00920000
 DCL PTR_RETURN_AREA   PTR;                                             00930000
 DCL PTR_COUNTRY_AREA  PTR;                                             00940000
 DCL PTR_RUN_DATE_AREA PTR;                                             00950000
 DCL PTR_DATE_AREA     PTR;                    /* RCB004M DATE CHECK */ 00980000

0DCL 1 PARM_INT_AREA,                          /* INTERFACE AREA     */ 00960000
       %INCLUDE (RCBZ01S);;                                             00970000
0DCL 1 RETURN_AREA,                            /* RETURN AREA        */ 00980000
       %INCLUDE (RCBZ02S);;                                             00990000
0DCL 1 DATE_AREA,                              /* DATE AREA          */ 01040000
       %INCLUDE (RCBZ03S);;                                             01050000
0DCL 1 COUNTRY_AREA,                           /* COUNTRY AREA       */ 01000000
       %INCLUDE (RCBZ26S);;                                             01010000
0DCL 1 RUN_DATE_AREA,                          /* RUN DATE AREA      */ 01020000
       %INCLUDE (RCBZ28S);;                                             01030000
1/********************************************************************/ 01040000
 /* DB2 TABLE STRUCTURES                                             */ 01050000
 /********************************************************************/ 01060000
0DCL PTR_RCBV500    PTR;               /* PTR PARAMETER ROW          */ 01070000
 DCL PTR_RCBV500I   PTR;               /* PTR NULL-IND. PARAMETER    */ 01080000
 DCL 1 TB_RCBV500,                     /* PARAMETER ROW              */ 01090000
       %INCLUDE (RCB500S);;                                             01100000
 DCL 1 TB_RCBV500_I,                   /* NULL-IND. PARAMETER        */ 01110000
       %INCLUDE (RCB500SI);;                                            01120000
 DCL 1 TB_RCBV691,
      %INCLUDE (RCB691S);;
                                        /* SOC CEDS00000644 */
 DCL 1 TB_RCBV691_NEW,
      %INCLUDE (RCB691S);;
                                        /* EOC CEDS00000644 */
1/********************************************************************/ 01130000
 /*  RECORD STRUCTURE FOR INPUT FILE                                 */ 01140000
 /********************************************************************/ 01150000
 DCL RCBBKW0_REC      CHAR(78);  /* IOAREA MESE FILE                 */
 DCL 1 RCBBKW0_INPUT_ARRAY(25)   CHAR (78);
 DCL 1 RCBBKW0_OUTPUT_ARRAY(25)  CHAR (78);
 DCL 1 RCBBKW0_HEADER BASED(ADDR(RCBBKW0_REC)),
      %INCLUDE RCBBKWSH;;        /* IOAREA MESE FILE                 */
 DCL 1 RCBBKW0_TRAILER BASED(ADDR(RCBBKW0_REC)),
      %INCLUDE RCBBKWST;;        /* IOAREA MESE FILE                 */
 DCL 1 RCBBKW0_DATA   BASED(ADDR(RCBBKW0_REC)),
      %INCLUDE RCBBKWS1;;        /* IOAREA MESE FILE                 */
                                 /* SOC CEDS00000644 */
 DCL RCBBKW4_REC      CHAR(78);  /* IOAREA MESE FILE                 */
 DCL 1 RCBBKW4_HEADER BASED(ADDR(RCBBKW4_REC)),
      %INCLUDE RCBBKWSH;;        /* IOAREA MESE FILE                 */
 DCL 1 RCBBKW4_TRAILER BASED(ADDR(RCBBKW4_REC)),
      %INCLUDE RCBBKWST;;        /* IOAREA MESE FILE                 */
 DCL 1 RCBBKW4_DATA   BASED(ADDR(RCBBKW4_REC)),
      %INCLUDE RCBBKWS1;;        /* IOAREA MESE FILE                 */
                                 /* EOC CEDS00000644 */
1/********************************************************************/ 01210000
 /*  RECORD STRUCTURES FOR OUTPUT FILES                              */ 01220000
 /********************************************************************/ 01230000
 DCL RCBBKW1_REC      CHAR(80);  /* IOAREA T090 UPDATE FILE          */
 DCL 1 RCBBKW1_HEADER BASED(ADDR(RCBBKW1_REC)),
      %INCLUDE RCBBAASH;;        /* IOAREA T090 UPDATE FILE          */
 DCL 1 RCBBKW1_TRAILER BASED(ADDR(RCBBKW1_REC)),
      %INCLUDE RCBBAAST;;        /* IOAREA T090 UPDATE FILE          */
 DCL 1 RCBBKW1_MESE   BASED(ADDR(RCBBKW1_REC)),
      3 REC_TYPE    CHAR(2),
      %INCLUDE RCBBKWS1;;        /* IOAREA T090 UPDATE FILE          */
                                                                        01360000
 DCL RCBBKW2_REC      CHAR(80);  /* IOAREA T120 UPDATE FILE          */
 DCL 1 RCBBKW2_HEADER BASED(ADDR(RCBBKW2_REC)),
      %INCLUDE RCBBAASH;;        /* IOAREA T120 UPDATE FILE          */
 DCL 1 RCBBKW2_TRAILER BASED(ADDR(RCBBKW2_REC)),
      %INCLUDE RCBBAAST;;        /* IOAREA T120 UPDATE FILE          */
 DCL 1 RCBBKW2_MESE   BASED(ADDR(RCBBKW2_REC)),
       3 REC_TYPE    CHAR(2),
      %INCLUDE RCBBKWS1;;        /* IOAREA T120 UPDATE FILE          */

 DCL RCBBKW3_REC      CHAR(88);  /* IOAREA FOR MERGE FILE            */
0DCL 1 RCBBKW3_REC_PREV          CHAR (88);
 DCL 1 RCBBKW3_HEADER BASED(ADDR(RCBBKW3_REC)),
      %INCLUDE RCBBKWSH;;        /* IOAREA FOR MERGE FILE            */
 DCL 1 RCBBKW3_TRAILER BASED(ADDR(RCBBKW3_REC)),
      %INCLUDE RCBBKWST;;        /* IOAREA FOR MERGE FILE            */
 DCL 1 RCBBKW3_MESE   BASED(ADDR(RCBBKW3_REC)),
       3 REC_TYPE        CHAR(3),
       3 OFFSNAME        CHAR(3),
       3 OFFERANK        CHAR(4),
      %INCLUDE RCBBKWS1;;        /* IOAREA FOR MERGE FILE            */
 DCL 1 MESE_OP_ARRAY(25),
       3 REC_TYPE        CHAR(3),
       3 OFFSNAME        CHAR(3),
       3 OFFERANK        CHAR(4),
      %INCLUDE RCBBKWS1;;
 DCL 1 MESE_OP_ARRAY_REC(25) CHAR (88) DEFINED (MESE_OP_ARRAY);
1/********************************************************************/ 01370000
 /*  PROGRAM CONTROL PARAMETERS                                      */ 01380000
 /********************************************************************/ 01390000
0DCL 1 TB_RCB001        BASED(ADDR(TB_RCBV500)),   /* RECON DATE     */ 01400000
       %INCLUDE (RCBP01S);;                                             01410000
0DCL 1 TB_RCB035        BASED(PTR_RCBV500),        /* FILE SEQUENCE  */
      %INCLUDE (RCBP35S);;
 DCL 1 RCB035,
       %INCLUDE (RCBP35S);;
1/********************************************************************/ 01560000
 /*  COUNTS                                                          */ 01570000
 /********************************************************************/ 01580000
0DCL 1 COUNT,                                                           01590000
       3 CNT_CTRY,                           /* FOR A COUNTRY        */ 01600000
         5 RCBBKW0           FIXED BIN(31),  /* COUNT ME/SE RECORDS  */ 01620000
                                             /* SOC CEDS00000644 */
         5 RCBBKW4           FIXED BIN(31),  /* COUNT ME/SE1 RECORDS */ 01620000
         5 RCBBKW4_REP       FIXED BIN(31),  /* COUNT REPORTED RECS  */ 01620000
         5 RCBBKW4_REJ       FIXED BIN(31),  /* COUNT REJECTED RECS  */ 01620000
                                             /* EOC CEDS00000644 */
         5 RCBBKW1           FIXED BIN(31),  /* COUNT T090 RECORDS   */ 01630001
         5 RCBBKW2           FIXED BIN(31),  /* COUNT T120  ECORDS   */ 01630001
         5 RCBBKW3           FIXED BIN(31),  /* COUNT MERGE RECORDS  */ 01630001
         5 RCBBKW0_REP       FIXED BIN(31),  /* COUNT REPORTED RECS  */ 01620000
         5 RCBBKW0_REJ       FIXED BIN(31),  /* COUNT REJECTED RECS  */ 01620000
       3 CNT_TOT,                            /* TOTAL RECORDS        */ 01640000
         5 RCBBKW0           FIXED BIN(31),  /* COUNT ME/SE RECORDS  */ 01620000
                                             /* SOC CEDS00000644 */
         5 RCBBKW4           FIXED BIN(31),  /* COUNT ME/SE1 RECORDS */ 01620000
         5 RCBBKW4_REP       FIXED BIN(31),  /* COUNT REPORTED RECS  */ 01620000
         5 RCBBKW4_REJ       FIXED BIN(31),  /* COUNT REJECTED RECS  */ 01620000
                                             /* EOC CEDS00000644 */
         5 RCBBKW1           FIXED BIN(31),  /* COUNT T090 RECORDS   */ 01630001
         5 RCBBKW2           FIXED BIN(31),  /* COUNT T120  ECORDS   */ 01630001
         5 RCBBKW3           FIXED BIN(31),  /* COUNT MERGE RECORDS  */ 01630001
         5 RCBBKW0_REP       FIXED BIN(31),  /* COUNT REPORTED RECS  */ 01620000
         5 RCBBKW0_REJ       FIXED BIN(31);  /* COUNT REJECTED RECS  */ 01620000

 DCL KW3_ARRAY_OP_COUNT      FIXED BIN (31) INIT('0');

 DCL I                       FIXED BIN (31) INIT('0');
 DCL J                       FIXED BIN (31) INIT('0');
 DCL K                       FIXED BIN (31) INIT('0');

0DCL   CNT_PIC9              PIC '(15)9';                               01670000
 DCL   WRK_CNT_RCBBKW3       PIC '(15)9';
1/********************************************************************/ 01690000
 /*  BIT SWITCHES                                                    */ 01700000
 /********************************************************************/ 01710000
0DCL TRUE                    BIT (1)         INIT ('1'B);               01720000
 DCL FALSE                   BIT (1)         INIT ('0'B);               01730000
 DCL SWITCH_CTRY_REQUESTED   BIT (1)         INIT ('0'B);               01740000
 DCL SWITCH_WRITE_OUTPUT     BIT (1)         INIT ('0'B);               01740000
 DCL CUST_AGGR_FLAG          BIT (1)         INIT ('0'B);               01740000
 DCL SLC_TRANS_FLAG          BIT (1)         INIT ('0'B);               01740000
 DCL PREV_SLC_TRANS_FLAG     BIT (1)         INIT ('0'B);               01740000
 DCL EOF_RCBBKW0             BIT (1)         INIT ('0'B);               01750000
                                 /* SOC CEDS00000644 */
 DCL CUST_AGGR_FLAG1         BIT (1)         INIT ('0'B);               01740000
 DCL SLC_TRANS_FLAG1         BIT (1)         INIT ('0'B);               01740000
 DCL EOF_RCBBKW4             BIT (1)         INIT ('0'B);               01750000
                                 /* EOC CEDS00000644 */
 DCL WRITE_RECORD            BIT (1);                                   01760000
                                      /* SOC CEDS00000644 */
 /* DCL 1 ERROR_SWITCH(2)       BIT (1);                       */       02260000
 DCL 1 ERROR_SWITCH(4)       BIT (1); /* EOC CEDS00000644 */            02260000
0/********************************************************************/ 01830000
 /*  STRUCTURES                                                      */ 01840000
 /********************************************************************/ 01850000
0DCL 1 OVERLAP_AREA,                                                    01860000
       3 START_DATE_1       CHAR (10),                                  01870000
       3 END_DATE_1         CHAR (10),                                  01880000
       3 START_DATE_2       CHAR (10),                                  01890000
       3 END_DATE_2         CHAR (10),                                  01900000
       3 START_DATE_BEFORE  CHAR (10),                                  01910000
       3 END_DATE_BEFORE    CHAR (10),                                  01920000
       3 BEFORE_DATE_FROM   CHAR (01),                                  01930000
       3 START_DATE_OVERLAP CHAR (10),                                  01940000
       3 END_DATE_OVERLAP   CHAR (10),                                  01950000
       3 TYPE_OF_OVERLAP    CHAR (01),                                  01960000
       3 START_DATE_AFTER   CHAR (10),                                  01970000
       3 END_DATE_AFTER     CHAR (10),                                  01980000
       3 AFTER_DATE_FROM    CHAR (01);                                  01990000

0DCL 1 G_WRKMSG,
       3 TXTFIELD_1     CHAR (25),
       3 TXTFIELD_2     CHAR (25),
       3 TXTFIELD_3     CHAR (25),
       3 TXTFIELD_4     CHAR (25),
       3 TXTFIELD_5     CHAR (25),
       3 TXTFIELD_6     CHAR (25),
       3 NUMFIELD_1     FIXED BIN(31),
       3 NUMFIELD_2     FIXED BIN(31),
       3 NUMFIELD_3     FIXED BIN(31),
       3 NUMFIELD_4     FIXED BIN(31),
       3 NUMFIELD_5     FIXED BIN(31),
       3 NUMFIELD_6     FIXED BIN(31);
0/********************************************************************/
 /* COMPARE KEYS                                                     */
 /********************************************************************/
0DCL 1 SSK,
      3 CTRYNO               CHAR(3)  INIT (''),
      3 CUSTOMER_NUMBER      CHAR(8)  INIT (''),
      3 OFFERING_NICK_NAME   CHAR(15) INIT ('');
 DCL SSK_STRING              CHAR(26) DEFINED (SSK);

 DCL PREV_SSK_STRING         CHAR(26) INIT ('');

0DCL 1 SSK_MESE,
      3 CTRYNO               CHAR(3)  INIT (''),
      3 PRODUCT_TYPE         CHAR(4)  INIT (''),
      3 ORIGIN               CHAR(2)  INIT (''),
      3 SEQUENCE_NUMBER      CHAR(7)  INIT (''),
      3 OFFERING_NICK_NAME   CHAR(15) INIT ('');
 DCL SSK_MESE_STRING         CHAR(31) DEFINED (SSK_MESE);

 DCL PREV_SSK_MESE           CHAR(31) INIT ('');

0DCL 1 SSK_TRANS,
      3 CTRYNO               CHAR(3)  INIT (''),
      3 PRODUCT_TYPE         CHAR(4)  INIT (''),
      3 ORIGIN               CHAR(2)  INIT (''),
      3 SEQUENCE_NUMBER      CHAR(7)  INIT ('');
 DCL SSK_TRANS_STRING        CHAR(16) DEFINED (SSK_TRANS);

 DCL PREV_SSK_TRANS_STRING   CHAR(16) INIT ('');
1/********************************************************************/ 01770000
 /*  ALL OTHER USED TEMPORARY FIELDS                                 */ 01780000
 /********************************************************************/ 01790000
0DCL WRK_MOD_NAME         CHAR (08)   INIT ('RCBBK7M ');                01800001
 DCL WRK_LEVEL            FIXED BIN (15);                               01810000
 DCL WRK_PGM_NAME         CHAR (08)   INIT ('RCBBK7P ');                01820001
 DCL WRK_SYSTEM_TYPE      CHAR (01)   INIT ('B');                       01830000
 DCL WRK_DATETIME         CHAR (20);                                    01840000
 DCL WRK_PGR_TYPE         CHAR (03);                                    01850000
 DCL WRK_CTRYNO_PARM      CHAR (03)   INIT ('');                        01860000
 DCL WRK_CTRYNO_FILE      CHAR (03)   INIT ('');                        01870000
 DCL SERV_START_DATE_NXT  CHAR (10)   INIT('');
 DCL MESE_START_DATE_NXT  CHAR (10)   INIT('');
 DCL WRK_RUN_DATE         CHAR (10);                                    01880000
 DCL WRK_TYPE             CHAR (04);                                    01880000
 DCL WRK_SERIAL           CHAR (09);                                    01880000
                                   /* SOC CEDS00000644 */
 DCL WRK_TYPE1            CHAR (04);                                    01880000
 DCL WRK_SERIAL1          CHAR (09);                                    01880000
                                   /* EOC CEDS00000644 */
 DCL WRK_OFFERING_ID      CHAR (15);                                    01880000
 DCL WRK_OFFSNAME         CHAR (03);                                    01880000
 DCL WRK_OFFERANK         CHAR (04);                                    01880000
 DCL WRK_KW0_COUNT        CHAR (15);                                    01880000
 DCL WRK_RCBBKW0          CHAR (07)   INIT ('RCBBKW0');                 01900000
                                   /* SOC CEDS00000644 */
 DCL WRK_KW4_COUNT        CHAR (15);                                    01880000
 DCL WRK_RCBBKW4          CHAR (07)   INIT ('RCBBKW4');                 01900000
 DCL WRK_OFFERING_ID1     CHAR (15);                                    01880000
 DCL WRK_OFFSNAME1        CHAR (03);                                    01880000
 DCL WRK_OFFERANK1        CHAR (04);                                    01880000
 DCL WRK_INDNULL1         FIXED BIN (15);
                                   /* EOC CEDS00000644 */
 DCL WRK_RCBBKW1          CHAR (07)   INIT ('RCBBKW1');                 01910001
 DCL WRK_RCBBKW2          CHAR (07)   INIT ('RCBBKW2');                 01910001
 DCL WRK_RCBBKW3          CHAR (07)   INIT ('RCBBKW3');                 01910001
 DCL ALPHA                CHAR (36)                                     03840000
                          INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'); 03850000
 DCL WRK_CTRY_IDX         FIXED BIN (31);         /* INDEX COUNTRIES */ 01920000
 DCL WRK_INDNULL          FIXED BIN (15);
 DCL WRK_FILE_SEQ         PIC '99999';
1/********************************************************************/ 01940000
 /*  BUILTIN FUNCTIONS                                               */ 01950000
 /********************************************************************/ 01960000
0DCL (ADDR,                                                             01970000
      CSTG,                                                             01980000
      DATE,                                                             01990000
      DIM,                                                              02000000
      HIGH,                                                             02010000
      LENGTH,                                                           02020000
      LOW,                                                              02030000
      NULL,                                                             02040000
      PLIRETC,                                                          02050000
      PLISRTC,                                                          02060000
      STG,                                                              02070000
      STRING,                                                           02080000
      SUBSTR,                                                           02090000
      TIME,                                                             02100000
      VERIFY)     BUILTIN;                                              02110000
0/********************************************************************/
 /*                 S Q L    D E C L A R A T I O N S                 */
 /********************************************************************/
 EXEC SQL INCLUDE SQLCA;
1/********************************************************************/ 02120000
 /* ON ERROR CONDITIONS                                              */ 02130000
 /********************************************************************/ 02140000
0%INCLUDE (RCB0E0M);                                                    02150000
   END;                                                                 02160000
0/********************************************************************/ 02170000
 /* ON ENDFILE                                                       */ 02180000
 /********************************************************************/ 02190000
0ON ENDFILE (RCBBKW0)                                                   02200000
   BEGIN;                                                               02210000
     EOF_RCBBKW0 = TRUE;                                                02220000
   END;                                                                 02230000
                              /* SOC CEDS00000644 */
0ON ENDFILE (RCBBKW4)                                                   02200000
   BEGIN;                                                               02210000
     EOF_RCBBKW4 = TRUE;                                                02220000
   END;                                                                 02230000
                              /* EOC CEDS00000644 */
1/********************************************************************/ 02240000
 /*                 S T A R T   P R O C E S S I N G                  */ 02250000
 /********************************************************************/ 02260000
 CALL RCBBK7M_INIT_PROG;                                                02280000
 CALL RCBBK7M_INIT_FILE;                                                02300001
 CALL RCBBK7M_INIT_COUNTRY;                                             02500000
                                        /* NOT END OF FILE           */ 02510000
                                           /* SOC CEDS00000644 */
 /*DO WHILE ((¬EOF_RCBBKW0)&(RCBBKW0_TRAILER.RECORD_TYPE ¬= HIGH(3)));*/02520000
 DO WHILE ((¬EOF_RCBBKW0) & (RCBBKW0_TRAILER.RECORD_TYPE ¬= HIGH(3))&   02520000
           (¬EOF_RCBBKW4) & (RCBBKW4_TRAILER.RECORD_TYPE ¬= HIGH(3)));  02520000
                                            /* EOC CEDS00000644 */
                                                                        02540000
    IF RCBBKW0_DATA.IOPUCTY ¬= WRK_CTRYNO_FILE                          02550000
    THEN DO;                                                            02560000
       CALL RCBBK7M_END_CTRY;               /* END PREVIOUS COUNTRY  */ 02570000
       WRK_CTRYNO_FILE  = RCBBKW0_DATA.IOPUCTY;                         02590000
       CALL RCBBK7M_INIT_COUNTRY;                                       02600000
    END;                                                                02610000
                                          /* COUNT FOR INPUT RECORDS */ 02620000
    COUNT.CNT_CTRY.RCBBKW0 = COUNT.CNT_CTRY.RCBBKW0 + 1;                02630000
                                            /* SOC CEDS00000644 */
    COUNT.CNT_CTRY.RCBBKW4 = COUNT.CNT_CTRY.RCBBKW4 + 1;                02630000
                                            /* EOC CEDS00000644 */
                                                                        02640000
    IF SWITCH_CTRY_REQUESTED
    THEN DO;
      CALL RCBBK7M_CHECK_RECORD;          /* VALIDATE DATA RECORD    */ 02650000
                                                                        02660000
      IF WRITE_RECORD = TRUE                      /* RECORD IS VALID */ 02670000
      THEN DO;
                                             /* SOC CEDS00000644 */
   /*   IF ( RCBBKW0_DATA.IOVSNIK  ¬= '' )      /* TOS IS NOT BLANK */
   /*   THEN DO; */
                                             /* EOC CEDS00000644 */
          CALL RCBBK7M_CUSSLC_FALG;     /* DETAILS OF CUST_AGGR_FLAG */
                                             /* SOC CEDS00000644 */
          CALL RCBBK7M_CUSSLC_FLAG1;   /* DETAILS OF CUST_AGGR_FLAG1 */
                 /* SLC_TRANSLATION FLAG,RANK AND OFFERING NICK NAME */
   /*     IF CUST_AGGR_FLAG = TRUE  /* CUSTOMER AGGREGATION IS TRUE  */
   /*     THEN DO;
            CALL RCBBK7M_T120_WRITE_RECORD; /* UPDATE FILE FOR T120  */
   /*       CALL RCBBK7M_T090_WRITE_RECORD; /* UPDATE FILE FOR T090  */
   /*     END; */
   /*      ELSE DO;
            CALL RCBBK7M_T120_WRITE_RECORD; /* UPDATE FILE FOR T120  */
   /*      END;*/
   /*   END; */
   /*     ELSE DO;
          CALL RCBBK7M_T090_WRITE_RECORD;   /* UPDATE FILE FOR T090  */
   /*   END; */
        IF ( RCBBKW0_DATA.IOVSNIK  = '' )      /* TOS IS BLANK */
        THEN CALL RCBBK7M_T090_WRITE_RECORD; /* UPDATE FILE FOR T090  */
        ELSE DO;
          IF CUST_AGGR_FLAG = TRUE  /* CUSTOMER AGGREGATION IS TRUE  */
            THEN CALL RCBBK7M_T090_WRITE_RECORD;/*UPDATE FILE FOR T090*/
        END;
        IF RCBBKW0_DATA.IOVSNIK  ¬= ''         /* TOS IS BLANK */
        THEN CALL RCBBK7M_T120_WRITE_RECORD; /* UPDATE FILE FOR T120 */
                                             /* EOC CEDS00000644 */
      END;
    END;
    CALL RABBK7M_READ_RCBBKW0;                                          02720000
   /* PROCESS PREVIOUS STORED RECORD IF THE CURRENT RECORD TYPE IS   */
   /* TRAILER RECORD                                                 */
                                           /* SOC CEDS00000644 */
   /* IF RCBBKW0_TRAILER.RECORD_TYPE = HIGH(3) THEN */
    IF ( RCBBKW0_TRAILER.RECORD_TYPE = HIGH(3) &
         RCBBKW4_TRAILER.RECORD_TYPE = HIGH(3) )THEN
                                           /* EOC CEDS00000644 */
      DO;                                  /* COUNT TRAILER RECORD   */
        COUNT.CNT_TOT.RCBBKW0 = COUNT.CNT_TOT.RCBBKW0 + 1;              02530000
                                           /* SOC CEDS00000644 */
        COUNT.CNT_TOT.RCBBKW4 = COUNT.CNT_TOT.RCBBKW4 + 1;              02530000
                                           /* EOC CEDS00000644 */
        IF RCBBKW1_HEADER.REC_TYPE ¬= '01' THEN
          DO;                        /* WRITE RCBBKW1 STORED RECORD  */
            WRITE FILE (RCBBKW1) FROM (RCBBKW1_REC);
            COUNT.CNT_CTRY.RCBBKW1 = COUNT.CNT_CTRY.RCBBKW1 + 1;
          END;
        IF RCBBKW2_HEADER.REC_TYPE ¬= '01' THEN
          DO;                        /* WRITE RCBBKW2 STORED RECORD  */
            WRITE FILE (RCBBKW2) FROM (RCBBKW2_REC);
            COUNT.CNT_CTRY.RCBBKW2 = COUNT.CNT_CTRY.RCBBKW2 + 1;
          END;
        IF RCBBKW3_HEADER.RECORD_TYPE  ¬= LOW(3) THEN
          DO;                        /* WRITE RCBBKW3 STORED RECORD  */
            SSK_TRANS.CTRYNO  = RCBBKW3_MESE.IOPUCTY;
            SSK_TRANS.PRODUCT_TYPE       =
                              SUBSTR(RCBBKW3_MESE.IOVSNIK,1,4);
            SSK_TRANS.ORIGIN             =
                              SUBSTR(RCBBKW3_MESE.IOVSNIK,5,2);
            SSK_TRANS.SEQUENCE_NUMBER    =
                              SUBSTR(RCBBKW3_MESE.IOVSNIK,7,7);
            IF PREV_SLC_TRANS_FLAG = TRUE THEN
              DO;                   /* PROCESS FOR THE SAME TOS     */
                IF SSK_TRANS_STRING = PREV_SSK_TRANS_STRING THEN
                  DO;
                    SWITCH_WRITE_OUTPUT = TRUE;
                    KW3_ARRAY_OP_COUNT = KW3_ARRAY_OP_COUNT + 1;
                    /* MOVE PREVIOUS RCBBKW3 RECORD TO ARRAY        */
                    MESE_OP_ARRAY_REC(KW3_ARRAY_OP_COUNT) =
                                              RCBBKW3_REC_PREV;
                    KW3_ARRAY_OP_COUNT = KW3_ARRAY_OP_COUNT + 1;
                    /* MOVE PRESENT RCBBKW3 RECORD TO ARRAY         */
                    MESE_OP_ARRAY_REC(KW3_ARRAY_OP_COUNT) =
                                              RCBBKW3_REC;
                    CALL RCBBK7M_PROCESS_OVERLAP;
                  END;
                ELSE                /* IF TOS IS NOT THE SAME       */
                  DO;
                    SWITCH_WRITE_OUTPUT = TRUE;
                    KW3_ARRAY_OP_COUNT = KW3_ARRAY_OP_COUNT + 1;
                    /* MOVE PREVIOUS RCBBKW3 RECORD TO ARRAY        */
                    MESE_OP_ARRAY_REC(KW3_ARRAY_OP_COUNT) =
                                              RCBBKW3_REC_PREV;
                    CALL RCBBK7M_PROCESS_OVERLAP;
                    /* WRITE PRESENT RCBBKW3 RECORD TO OUTPUT       */
                    WRITE FILE (RCBBKW3) FROM (RCBBKW3_REC);
                    COUNT.CNT_CTRY.RCBBKW3 =
                                    COUNT.CNT_CTRY.RCBBKW3 + 1;
                  END;
              END;
            ELSE       /* PROCESS PREVIOUS STORED RCBBKW3 RECORD    */
              DO;
                SWITCH_WRITE_OUTPUT = TRUE;
                KW3_ARRAY_OP_COUNT = KW3_ARRAY_OP_COUNT + 1;
                    /* MOVE PREVIOUS RCBBKW3 RECORD TO ARRAY        */
                MESE_OP_ARRAY_REC(KW3_ARRAY_OP_COUNT) =
                                              RCBBKW3_REC_PREV;
                CALL RCBBK7M_PROCESS_OVERLAP;
              END;
           END;
      END;
 END;                                                                   02750000
 CALL RCBBK7M_END_CTRY;                      /* END PREVIOUS COUNTRY */ 02740000
                                                                        02760000
 WRK_CTRYNO_FILE = HIGH(3);                                             02770000
                                                                        02780000
 CALL RCBBK7M_INIT_COUNTRY;     /* PROCESS OTHER COUNTRIES REQUESTED */ 02790000
 CALL RABBK7M_END_FILE;                                                 02810001

 CALL RABBK7M_END_PROG;                                                 02840000
1/********************************************************************/ 02870000
 /*                                                                  */ 02880000
 /* MODULE NAME      : RABBK7M_READ_RCB000                           */ 02890000
 /*                                                                  */ 02900000
 /* DESCRIPTION      : READ (NEXT) ENTRY FROM THE COUNTRY ARRAY      */ 02910000
 /*                    GIVE RUNDATE MESSAGE                          */ 02920000
 /*                                                                  */ 02930000
 /********************************************************************/ 02940000
 RABBK7M_READ_RCB000: PROC;                                             02950000
                                                                        02960000
 WRK_CTRY_IDX = WRK_CTRY_IDX + 1;                                       02970000
                                                                        02980000
 IF WRK_CTRY_IDX <= COUNTRY_AREA.COUNT_CTRY                             02990000
 THEN DO;                                                               03000000
   WRK_PGR_TYPE    = CTRY_ARRAY.PGR_TYPE (WRK_CTRY_IDX);                03010000
   WRK_CTRYNO_PARM = CTRY_ARRAY.CTRYNO (WRK_CTRY_IDX);                  03020000
                                                                        03030000
                                                /* RETRIEVE RUN DATE */ 03040000
   RUN_DATE_AREA.PROC_ID  = COUNTRY_AREA.PROC_ID;                       03050000
   RUN_DATE_AREA.CTRYNO   = WRK_CTRYNO_PARM;                            03060000
   RUN_DATE_AREA.PGR_TYPE = WRK_PGR_TYPE;                               03070000
                                                                        03080000
   CALL RCB020M (PTR_RUN_DATE_AREA,                                     03090000
                 PTR_INT_AREA);                                         03100000
                                                                        03110000
   IF RUN_DATE_AREA.RUN_DATE = ''        /* NO RUN DATE RCB001 FOUND */ 03120000
   THEN DO;                                                             03130000
     WRK_RUN_DATE = PARM_INT_AREA.SYSTEM_DATE;                          03140000
   END;                                                                 03150000
   ELSE DO;                                                             03160000
     WRK_RUN_DATE = RUN_DATE_AREA.RUN_DATE;                             03170000
   END;                                                                 03180000
   CALL RCBBK7M_ISSUE_MSG('0002');  /* REPORT RUN DATE FOR COUNTRY */
 END;                                                                   03270000
 ELSE DO;                                                               03280000
   WRK_PGR_TYPE     = '';                                               03290000
   WRK_CTRYNO_PARM  = HIGH (3);        /* NO MORE COUNTRIES IN ARRAY */ 03300000
 END;                                                                   03310000
                                                                        03320000
 END RABBK7M_READ_RCB000;                                               03330000
1/********************************************************************/ 03350000
 /*                                                                  */ 03360000
 /* MODULE NAME      : RCBBK7M_INIT_COUNTRY                          */ 03370000
 /*                                                                  */ 03380000
 /* DESCRIPTION      : INITIAL ACTIONS FOR A COUNTRY COMPARE         */ 03390000
 /*                    COUNTRIES IN THIS FILE TO COUNTRIES REQUESTED */ 03400000
 /*                    BY PARAMETER AND GIVE MESSAGES FOR COUNTRIES  */ 03410000
 /*                    MISSING ON FILE ND COUNTRIES SKIPPED          */ 03420000
 /********************************************************************/ 03450000
 RCBBK7M_INIT_COUNTRY : PROC;                                           03460000
                                                                        03470000
 SWITCH_CTRY_REQUESTED           = FALSE;                               03480000
 COUNT.CNT_CTRY.RCBBKW0          = 0;            /* COUNT VARIABLES  */ 03490000
 COUNT.CNT_CTRY.RCBBKW1          = 0;                                   03500001
 COUNT.CNT_CTRY.RCBBKW2          = 0;                                   03500001
 COUNT.CNT_CTRY.RCBBKW3          = 0;                                   03500001
 COUNT.CNT_CTRY.RCBBKW0_REP      = 0;                                   03490000
 COUNT.CNT_CTRY.RCBBKW0_REJ      = 0;                                   03490000
                                              /* SOC CEDS00000644 */
 COUNT.CNT_CTRY.RCBBKW4          = 0;                                   03490000
 COUNT.CNT_CTRY.RCBBKW4_REP      = 0;                                   03490000
 COUNT.CNT_CTRY.RCBBKW4_REJ      = 0;                                   03490000
                                              /* EOC CEDS00000644 */
                              /* GIVE MESSAGE ABOUT COUNTRY MISSING  */ 03530000
                              /* ON INPUT FILE, BUT REQUESTED        */ 03540000
 DO WHILE  (WRK_CTRYNO_FILE > WRK_CTRYNO_PARM);                         03550000
    CALL RCBBK7M_ISSUE_MSG('0184');      /* COUNTRY NOT IN I/P FILES */
    CALL RABBK7M_READ_RCB000;                                           03650000
 END;                                                                   03660000
                                                                        03670000
 IF WRK_CTRYNO_FILE ¬= HIGH(3)                                          03680000
 THEN DO;                                                               03690000
   IF WRK_CTRYNO_FILE = WRK_CTRYNO_PARM                                 03700000
   THEN DO;                                                             03710000
     SWITCH_CTRY_REQUESTED   = TRUE;                                    03720000
     WRK_PGR_TYPE            = CTRY_ARRAY.PGR_TYPE (WRK_CTRY_IDX);      03730000
   END;                                                                 03740000
   ELSE DO;                   /* GIVE MESSAGE ABOUT COUNTRY IGNORED  */ 03750000
     CALL RCBBK7M_ISSUE_MSG('0181');
   END;                                                                 03830000
 END;                                                                   03840000
                                                                        03850000
 END RCBBK7M_INIT_COUNTRY;                                              03860000
1/********************************************************************/ 03880000
 /*                                                                  */ 03890000
 /* MODULE NAME      : RCBBK7M_END_CTRY                              */ 03900000
 /*                                                                  */ 03910000
 /* DESCRIPTION      : ENDING ACTIONS FOR A REQUESTED COUNTRY        */ 03920000
 /*                    AND MESSAGES FOR REQUESTED COUNTRIES          */ 03930000
 /*                                                                  */ 03950000
 /********************************************************************/ 03960000
 RCBBK7M_END_CTRY : PROC;                                               03970000
                                                                        03980000
                                    /* SAVE AMOUNT OF WRITTEN RECORDS */03990000
 COUNT.CNT_CTRY.RCBBKW0_REP = COUNT.CNT_CTRY.RCBBKW0 -
                              COUNT.CNT_CTRY.RCBBKW0_REJ;
 COUNT.CNT_TOT.RCBBKW0_REP  = COUNT.CNT_TOT.RCBBKW0_REP +               04000001
                              COUNT.CNT_CTRY.RCBBKW0_REP;               04010001
 COUNT.CNT_TOT.RCBBKW0_REJ  = COUNT.CNT_TOT.RCBBKW0_REJ +               04000001
                              COUNT.CNT_CTRY.RCBBKW0_REJ;               04010001
 COUNT.CNT_TOT.RCBBKW0      = COUNT.CNT_TOT.RCBBKW0 +                   04000001
                              COUNT.CNT_CTRY.RCBBKW0;                   04010001
                                     /* SOC CEDS00000644 */
 COUNT.CNT_CTRY.RCBBKW4_REP = COUNT.CNT_CTRY.RCBBKW4 -
                              COUNT.CNT_CTRY.RCBBKW4_REJ;
 COUNT.CNT_TOT.RCBBKW4_REP  = COUNT.CNT_TOT.RCBBKW4_REP +               04000001
                              COUNT.CNT_CTRY.RCBBKW4_REP;               04010001
 COUNT.CNT_TOT.RCBBKW4_REJ  = COUNT.CNT_TOT.RCBBKW4_REJ +               04000001
                              COUNT.CNT_CTRY.RCBBKW4_REJ;               04010001
 COUNT.CNT_TOT.RCBBKW4      = COUNT.CNT_TOT.RCBBKW4 +                   04000001
                              COUNT.CNT_CTRY.RCBBKW4;                   04010001
                                     /* EOC CEDS00000644 */
 COUNT.CNT_TOT.RCBBKW1      = COUNT.CNT_TOT.RCBBKW1 +                   04000001
                              COUNT.CNT_CTRY.RCBBKW1;                   04010001
 COUNT.CNT_TOT.RCBBKW2      = COUNT.CNT_TOT.RCBBKW2 +                   04000001
                              COUNT.CNT_CTRY.RCBBKW2;                   04010001
 COUNT.CNT_TOT.RCBBKW3      = COUNT.CNT_TOT.RCBBKW3 +                   04000001
                              COUNT.CNT_CTRY.RCBBKW3;                   04010001
                                                                        04020000
 IF SWITCH_CTRY_REQUESTED                                               04030000
 THEN DO;                                                               04040000
                                /* GIVE MESSAGE: COUNTRY INPUT COUNT */ 04090000
   G_WRKMSG.TXTFIELD_1       = WRK_CTRYNO_PARM;
                                       /* RECORDS READ FOR RCBBKW0   */ /
   G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW0;
   G_WRKMSG.NUMFIELD_1       = COUNT.CNT_CTRY.RCBBKW0;
                                     /* RECORDS ACCEPTED FOR RCBBKW0 */ /
   G_WRKMSG.NUMFIELD_2       = COUNT.CNT_CTRY.RCBBKW0_REP;
                                    /* RECORDS REJECTED FOR RCBBKW0 */  /
   G_WRKMSG.NUMFIELD_3       = COUNT.CNT_CTRY.RCBBKW0_REJ;
   CALL RCBBK7M_ISSUE_MSG('0003');
                                    /* SOC CEDS00000644 */
                                /* GIVE MESSAGE: COUNTRY INPUT COUNT */ 04090000
   G_WRKMSG.TXTFIELD_1       = WRK_CTRYNO_PARM;
                                       /* RECORDS READ FOR RCBBKW4   */ /
   G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW4;
   G_WRKMSG.NUMFIELD_1       = COUNT.CNT_CTRY.RCBBKW4;
                                     /* RECORDS ACCEPTED FOR RCBBKW4 */ /
   G_WRKMSG.NUMFIELD_2       = COUNT.CNT_CTRY.RCBBKW4_REP;
                                    /* RECORDS REJECTED FOR RCBBKW4 */  /
   G_WRKMSG.NUMFIELD_3       = COUNT.CNT_CTRY.RCBBKW4_REJ;
   CALL RCBBK7M_ISSUE_MSG('0003');
                                    /* EOC CEDS00000644 */
                                /* GIVE MESSAGE: COUNTRY OUTPUT COUNT */04200000
   G_WRKMSG.TXTFIELD_1       = WRK_CTRYNO_PARM;
   G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW1;
   G_WRKMSG.TXTFIELD_3       = WRK_RCBBKW2;
   G_WRKMSG.TXTFIELD_4       = WRK_RCBBKW3;
   G_WRKMSG.NUMFIELD_1       = COUNT.CNT_CTRY.RCBBKW1;
   G_WRKMSG.NUMFIELD_2       = COUNT.CNT_CTRY.RCBBKW2;
   G_WRKMSG.NUMFIELD_3       = COUNT.CNT_CTRY.RCBBKW3;
   CALL RCBBK7M_ISSUE_MSG('0004');
   CALL RABBK7M_READ_RCB000;                                            04320000
 END;                                                                   04330000
                                                                        04340000
 END RCBBK7M_END_CTRY;                                                  04350000
1/********************************************************************/ 04370000
 /*                                                                  */ 04380000
 /* MODULE NAME      : RCBBK7M_CHECK_RECORD                          */ 04390000
 /*                                                                  */ 04400000
 /* DESCRIPTION     :  OMIT THOSE RECORDS OUT THAT ARE NOT TO BE     */ 04410000
 /*                    COMPARED, LIKE COUNTRY NOT IN LIST            */ 04420000
 /********************************************************************/ 04440000
 RCBBK7M_CHECK_RECORD : PROC;                                           04450000
                                                                        04460000
 WRITE_RECORD = TRUE;                                                   04470000
                                 /* VALIDATE TOS IF IT IS NOT BLANK  */
 IF RCBBKW0_DATA.IOVSNIK  ¬= '' THEN
   DO;
     WRK_TYPE              = SUBSTR(RCBBKW0_DATA.IOVSNIK,1,4);
     WRK_SERIAL            = SUBSTR(RCBBKW0_DATA.IOVSNIK,5,9);
                                            /* VALIDATE PRODUCT TYPE */
     IF WRK_TYPE  =  ''
     THEN
     DO;
       G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW0;
       WRITE_RECORD        = FALSE;
       CALL RCBBK7M_ISSUE_MSG('0201');
     END;
                                           /* VALIDATE SERIAL NUMBER */
     IF WRK_SERIAL = ''
     THEN
     DO;
       G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW0;
       WRITE_RECORD        = FALSE;
       CALL RCBBK7M_ISSUE_MSG('0199');
     END;
   END;
                                         /* SOC CEDS00000644 */
 IF RCBBKW4_DATA.IOVSNIK  ¬= '' THEN
   DO;
     WRK_TYPE1             = SUBSTR(RCBBKW4_DATA.IOVSNIK,1,4);
     WRK_SERIAL1           = SUBSTR(RCBBKW4_DATA.IOVSNIK,5,9);
                                            /* VALIDATE PRODUCT TYPE */
     IF WRK_TYPE1  =  ''
     THEN
     DO;
       G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW4;
       WRITE_RECORD        = FALSE;
       CALL RCBBK7M_ISSUE_MSG('0201');
     END;
                                           /* VALIDATE SERIAL NUMBER */
     IF WRK_SERIAL1 = ''
     THEN
     DO;
       G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW4;
       WRITE_RECORD        = FALSE;
       CALL RCBBK7M_ISSUE_MSG('0199');
     END;
   END;
                                        /* EOC CEDS00000644 */
                                        /* VALIDATE CUSTOMER NUMBER */
 IF (VERIFY(RCBBKW0_DATA.ICUSUSE,ALPHA)¬=0)
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW0;
   CALL RCBBK7M_ISSUE_MSG('0198');
   WRITE_RECORD                  = FALSE;
 END;
                                        /* SOC CEDS00000644 */
                                        /* VALIDATE CUSTOMER NUMBER */
 IF (VERIFY(RCBBKW4_DATA.ICUSUSE,ALPHA)¬=0)
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW4;
   CALL RCBBK7M_ISSUE_MSG('0198');
   WRITE_RECORD                  = FALSE;
 END;
                                     /* EOC CEDS00000644 */
                                     /* VALIDATE OFFERING NICK NAME */
 IF RCBBKW0_DATA.IOFFNIK = ''
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW0;
   CALL RCBBK7M_ISSUE_MSG('0262');
   WRITE_RECORD                  = FALSE;
 END;
                                     /* SOC CEDS00000644 */
                                     /* VALIDATE OFFERING NICK NAME */
 IF RCBBKW4_DATA.IOFFNIK = ''
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW4;
   CALL RCBBK7M_ISSUE_MSG('0262');
   WRITE_RECORD                  = FALSE;
 END;
                                      /* EOC CEDS00000644 */
                                      /* VALIDATE SERVICE START DATE */
 IF (RCBBKW0_DATA.DAGRCAS ¬= '') &
    (¬ VALIDATE_DATE(RCBBKW0_DATA.DAGRCAS))
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = 'RECORD START DATE';
   G_WRKMSG.TXTFIELD_2 = RCBBKW0_DATA.DAGRCAS;
   G_WRKMSG.TXTFIELD_3 = 'HW';                   /* SOC CEDS00000507 */
   G_WRKMSG.TXTFIELD_4 = WRK_TYPE ||WRK_SERIAL;
   G_WRKMSG.TXTFIELD_5 = 'CU';
   G_WRKMSG.TXTFIELD_6 = RCBBKW0_DATA.ICUSUSE;   /* EOC CEDS00000507 */
   CALL RCBBK7M_ISSUE_MSG('0012');
   WRITE_RECORD                  = FALSE;
   ERROR_SWITCH(1)               = TRUE;
 END;
                                        /* VALIDATE SERVICE END DATE */
 IF (RCBBKW0_DATA.DAGRVEX ¬= '') &
    (¬ VALIDATE_DATE(RCBBKW0_DATA.DAGRVEX))
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = 'RECORD END DATE';
   G_WRKMSG.TXTFIELD_2 = RCBBKW0_DATA.DAGRCAS;
   G_WRKMSG.TXTFIELD_3 = 'HW';                   /* SOC CEDS00000507 */
   G_WRKMSG.TXTFIELD_4 = WRK_TYPE ||WRK_SERIAL;
   G_WRKMSG.TXTFIELD_5 = 'CU';
   G_WRKMSG.TXTFIELD_6 = RCBBKW0_DATA.ICUSUSE;   /* EOC CEDS00000507 */
   CALL RCBBK7M_ISSUE_MSG('0012');
   WRITE_RECORD                  = FALSE;
   ERROR_SWITCH(2)               = TRUE;
 END;

                                      /* SOC CEDS00000644 */
                                      /* VALIDATE SERVICE START DATE */
 IF (RCBBKW4_DATA.DAGRCAS ¬= '') &
    (¬ VALIDATE_DATE(RCBBKW4_DATA.DAGRCAS))
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = 'RECORD START DATE';
   G_WRKMSG.TXTFIELD_2 = RCBBKW4_DATA.DAGRCAS;
   G_WRKMSG.TXTFIELD_3 = 'HW';
   G_WRKMSG.TXTFIELD_4 = WRK_TYPE1 ||WRK_SERIAL1;
   G_WRKMSG.TXTFIELD_5 = 'CU';
   G_WRKMSG.TXTFIELD_6 = RCBBKW4_DATA.ICUSUSE;
   CALL RCBBK7M_ISSUE_MSG('0012');
   WRITE_RECORD                  = FALSE;
   ERROR_SWITCH(3)               = TRUE;
 END;

                                        /* VALIDATE SERVICE END DATE */
 IF (RCBBKW4_DATA.DAGRVEX ¬= '') &
    (¬ VALIDATE_DATE(RCBBKW4_DATA.DAGRVEX))
 THEN
 DO;
   G_WRKMSG.TXTFIELD_1 = 'RECORD END DATE';
   G_WRKMSG.TXTFIELD_2 = RCBBKW4_DATA.DAGRCAS;
   G_WRKMSG.TXTFIELD_3 = 'HW';                    /* SOC CEDS00000507 */
   G_WRKMSG.TXTFIELD_4 = WRK_TYPE1 ||WRK_SERIAL1;
   G_WRKMSG.TXTFIELD_5 = 'CU';
   G_WRKMSG.TXTFIELD_6 = RCBBKW4_DATA.ICUSUSE;    /* EOC CEDS00000507 */
   CALL RCBBK7M_ISSUE_MSG('0012');
   WRITE_RECORD                  = FALSE;
   ERROR_SWITCH(4)               = TRUE;
 END;
                                       /* EOC CEDS00000644 */

 IF (ERROR_SWITCH(1) = FALSE & ERROR_SWITCH(2) = FALSE) &
    (RCBBKW0_DATA.DAGRVEX < RCBBKW0_DATA.DAGRCAS)
 THEN
 DO;
   CALL RCBBK7M_ISSUE_MSG('0237');
   WRITE_RECORD                  = FALSE;
 END;
                                       /* SOC CEDS00000644 */
 IF (ERROR_SWITCH(3) = FALSE & ERROR_SWITCH(4) = FALSE) &
    (RCBBKW4_DATA.DAGRVEX < RCBBKW4_DATA.DAGRCAS)
 THEN
 DO;
   CALL RCBBK7M_ISSUE_MSG('0237');
   WRITE_RECORD                  = FALSE;
 END;
                                       /* EOC CEDS00000644 */

 IF WRITE_RECORD = FALSE
 THEN
 DO;
   COUNT.CNT_CTRY.RCBBKW0_REJ = COUNT.CNT_CTRY.RCBBKW0_REJ + 1;
                                          /* SOC CEDS00000644 */
   COUNT.CNT_CTRY.RCBBKW4_REJ = COUNT.CNT_CTRY.RCBBKW4_REJ + 1;
                                          /* EOC CEDS00000644 */
 END;

 END RCBBK7M_CHECK_RECORD;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBK7M_T090_WRITE_RECORD                     */
 /*                                                                  */
 /* DESCRIPTION      : CHECK OVERLAP OF DATES IN CUSTOMER RECORD     */
 /*                                                                  */
 /********************************************************************/
 RCBBK7M_T090_WRITE_RECORD : PROC;

 SSK.CTRYNO             = RCBBKW0_DATA.IOPUCTY;
 SSK.CUSTOMER_NUMBER    = RCBBKW0_DATA.ICUSUSE;
 SSK.OFFERING_NICK_NAME = RCBBKW0_DATA.IOFFNIK;
 /*IF KEYS ARE EQUAL AND SERVICE START DATE = END DATE OF PREVIOUS+1 */
 IF ( (SSK_STRING = PREV_SSK_STRING                  ) &
      (RCBBKW0_DATA.DAGRCAS <= SERV_START_DATE_NXT)  ) THEN
  DO;                                  /* CHANGE END DATE TO MAXIMUM */
                                                 /* SOC CEDS00000513 */
    IF RCBBKW0_DATA.DAGRVEX > RCBBKW1_MESE.DAGRVEX THEN
                                                 /* EOC CEDS00000513 */
       RCBBKW1_MESE.DAGRVEX   = RCBBKW0_DATA.DAGRVEX;
                                                 /* SOC CEDS00000513 */
    IF RCBBKW0_DATA.DAGRCAS < RCBBKW1_MESE.DAGRCAS THEN
       RCBBKW1_MESE.DAGRCAS  =  RCBBKW0_DATA.DAGRCAS;
                                                 /* EOC CEDS00000513 */
  END;
 ELSE                                   /*WRITE RCBBKW1 RECORD       */
  DO;
    IF RCBBKW1_HEADER.REC_TYPE ¬= '01' THEN
     DO;
      WRITE FILE (RCBBKW1) FROM (RCBBKW1_REC);
      COUNT.CNT_CTRY.RCBBKW1 = COUNT.CNT_CTRY.RCBBKW1 + 1;
     END;

    RCBBKW1_MESE           = '';
    RCBBKW1_MESE.REC_TYPE  = '02';

    RCBBKW1_MESE.IOPUCTY   = RCBBKW0_DATA.IOPUCTY;
    RCBBKW1_MESE.IAGRCID   = RCBBKW0_DATA.IAGRCID;
    RCBBKW1_MESE.FAGRINT   = RCBBKW0_DATA.FAGRINT;
    RCBBKW1_MESE.ICUSUSE   = RCBBKW0_DATA.ICUSUSE;
    RCBBKW1_MESE.IAGRENO   = RCBBKW0_DATA.IAGRENO;                      05071001
    RCBBKW1_MESE.DAGRCAS   = RCBBKW0_DATA.DAGRCAS;                      05071001
    RCBBKW1_MESE.DAGRVEX   = RCBBKW0_DATA.DAGRVEX;                      05071001
    RCBBKW1_MESE.IOFFNIK   = RCBBKW0_DATA.IOFFNIK;                      05071001
    RCBBKW1_MESE.IOVSNIK   = RCBBKW0_DATA.IOVSNIK;                      05071001
  END;

 IF RCBBKW1_MESE.DAGRVEX ¬= '9999-12-31' THEN    /* SOC CEDS00000507 */
    SERV_START_DATE_NXT = CALC_DATE(RCBBKW1_MESE.DAGRVEX,'D',1);
 ELSE
    SERV_START_DATE_NXT =  RCBBKW1_MESE.DAGRVEX;
 /*SERV_START_DATE_NXT = CALC_DATE(RCBBKW1_MESE.DAGRVEX,'D',1);      */
                                                 /* EOC CEDS00000507 */
 PREV_SSK_STRING = SSK_STRING;

 END RCBBK7M_T090_WRITE_RECORD;                                         05780000
1/********************************************************************/ 04870000
 /*                                                                  */ 04880000
 /* MODULE NAME      : RCBBK7M_T120_WRITE_RECORD                     */ 04890000
 /*                                                                  */ 04900000
 /* DESCRIPTION      : BUILD AND WRITE A TABLE LIKE RCBBKW0 RECORD   */ 04910004
 /*                                                                  */ 04920000
 /********************************************************************/ 04930000
 RCBBK7M_T120_WRITE_RECORD : PROC;                                      04940000

                                          /* SOC CEDS00000644 */
 /* SSK_MESE.CTRYNO             = RCBBKW0_DATA.IOPUCTY;
 SSK_MESE.PRODUCT_TYPE       = SUBSTR(RCBBKW0_DATA.IOVSNIK,1,4);
 SSK_MESE.ORIGIN             = SUBSTR(RCBBKW0_DATA.IOVSNIK,5,2);
 SSK_MESE.SEQUENCE_NUMBER    = SUBSTR(RCBBKW0_DATA.IOVSNIK,7,7);
 SSK_MESE.OFFERING_NICK_NAME = RCBBKW0_DATA.IOFFNIK; */
 SSK_MESE.CTRYNO             = RCBBKW4_DATA.IOPUCTY;
 SSK_MESE.PRODUCT_TYPE       = SUBSTR(RCBBKW4_DATA.IOVSNIK,1,4);
 SSK_MESE.ORIGIN             = SUBSTR(RCBBKW4_DATA.IOVSNIK,5,2);
 SSK_MESE.SEQUENCE_NUMBER    = SUBSTR(RCBBKW4_DATA.IOVSNIK,7,7);
 SSK_MESE.OFFERING_NICK_NAME = RCBBKW4_DATA.IOFFNIK;
                                          /* EOC CEDS00000644 */

 /*IF KEYS ARE EQUAL AND SERVICE START DATE = END DATE OF PREVIOUS+1 */
 IF ( (SSK_MESE_STRING = PREV_SSK_MESE                    ) &
                                          /* SOC CEDS00000644 */
    /*(RCBBKW0_DATA.DAGRCAS <= MESE_START_DATE_NXT)  ) THEN */
      (RCBBKW4_DATA.DAGRCAS <= MESE_START_DATE_NXT)  ) THEN
                                          /* EOC CEDS00000644 */
  DO;
                                          /* SOC CEDS00000644 */
  /* RCBBKW2_MESE.DAGRVEX   = RCBBKW0_DATA.DAGRVEX;
    RCBBKW3_MESE.DAGRVEX   = RCBBKW0_DATA.DAGRVEX; */
    RCBBKW2_MESE.DAGRVEX   = RCBBKW4_DATA.DAGRVEX;
    RCBBKW3_MESE.DAGRVEX   = RCBBKW4_DATA.DAGRVEX;
                                          /* EOC CEDS00000644 */
  END;
 ELSE
  DO;
    IF RCBBKW2_HEADER.REC_TYPE ¬= '01' THEN
     DO;                                     /* WRITE RCBBKW2 RECORD */
      WRITE FILE (RCBBKW2) FROM (RCBBKW2_REC);
      COUNT.CNT_CTRY.RCBBKW2 = COUNT.CNT_CTRY.RCBBKW2 + 1;
                                           /* SLC TRANS FLAG IS TRUE */
      IF PREV_SLC_TRANS_FLAG = TRUE THEN
         DO;                  /* PROCESS MESE TRANSLATION RECORD     */
           CALL RCBBK7M_MESE_WRITE_RECORD;
         END;
     END;
                                                                        04990000
    RCBBKW2_MESE           = '';                                           05000
    RCBBKW2_MESE.REC_TYPE  = '02';                                         07340
                                                                        05070000
                                        /* SOC CEDS00000644 */
    /* RCBBKW2_MESE.IOPUCTY   = RCBBKW0_DATA.IOPUCTY;                      05071
    RCBBKW2_MESE.IAGRCID   = RCBBKW0_DATA.IAGRCID;                         05071
    RCBBKW2_MESE.FAGRINT   = RCBBKW0_DATA.FAGRINT;                         05071
    RCBBKW2_MESE.ICUSUSE   = RCBBKW0_DATA.ICUSUSE;                         05071
    RCBBKW2_MESE.IAGRENO   = RCBBKW0_DATA.IAGRENO;                         05071
    RCBBKW2_MESE.DAGRCAS   = RCBBKW0_DATA.DAGRCAS;                         05071
    RCBBKW2_MESE.DAGRVEX   = RCBBKW0_DATA.DAGRVEX;                         05071
    RCBBKW2_MESE.IOFFNIK   = RCBBKW0_DATA.IOFFNIK;                         05071
    RCBBKW2_MESE.IOVSNIK   = RCBBKW0_DATA.IOVSNIK; */                      05071
    RCBBKW2_MESE.IOPUCTY   = RCBBKW4_DATA.IOPUCTY;                         05071
    RCBBKW2_MESE.IAGRCID   = RCBBKW4_DATA.IAGRCID;                         05071
    RCBBKW2_MESE.FAGRINT   = RCBBKW4_DATA.FAGRINT;                         05071
    RCBBKW2_MESE.ICUSUSE   = RCBBKW4_DATA.ICUSUSE;                         05071
    RCBBKW2_MESE.IAGRENO   = RCBBKW4_DATA.IAGRENO;                         05071
    RCBBKW2_MESE.DAGRCAS   = RCBBKW4_DATA.DAGRCAS;                         05071
    RCBBKW2_MESE.DAGRVEX   = RCBBKW4_DATA.DAGRVEX;                         05071
    RCBBKW2_MESE.IOFFNIK   = RCBBKW4_DATA.IOFFNIK;                         05071
    RCBBKW2_MESE.IOVSNIK   = RCBBKW4_DATA.IOVSNIK;                         05071
                                       /* EOC CEDS00000644 */

    PREV_SLC_TRANS_FLAG    = FALSE;
                                       /* SOC CEDS00000644 */
    /*PREV_SLC_TRANS_FLAG    = SLC_TRANS_FLAG;*/
    PREV_SLC_TRANS_FLAG    = SLC_TRANS_FLAG1;
                                       /* EOC CEDS00000644 */
    IF PREV_SLC_TRANS_FLAG = TRUE THEN
    DO;
      RCBBKW3_MESE           = '';                                           0
      RCBBKW3_MESE.REC_TYPE  = '002';                                        0
                                                                             0
                                       /* SOC CEDS00000644 */
      /*RCBBKW3_MESE.OFFSNAME  = WRK_OFFSNAME;                               0
      RCBBKW3_MESE.OFFERANK  = WRK_OFFERANK;                                 0
      RCBBKW3_MESE.IOPUCTY   = RCBBKW0_DATA.IOPUCTY;                         0
      RCBBKW3_MESE.IAGRCID   = RCBBKW0_DATA.IAGRCID;                         0
      RCBBKW3_MESE.FAGRINT   = RCBBKW0_DATA.FAGRINT;                         0
      RCBBKW3_MESE.ICUSUSE   = RCBBKW0_DATA.ICUSUSE;                         0
      RCBBKW3_MESE.IAGRENO   = RCBBKW0_DATA.IAGRENO;                         0
      RCBBKW3_MESE.DAGRCAS   = RCBBKW0_DATA.DAGRCAS;                         0
      RCBBKW3_MESE.DAGRVEX   = RCBBKW0_DATA.DAGRVEX;                         0
      RCBBKW3_MESE.IOFFNIK   = RCBBKW0_DATA.IOFFNIK;                         0
      RCBBKW3_MESE.IOVSNIK   = RCBBKW0_DATA.IOVSNIK;*/                       0
      RCBBKW3_MESE.OFFSNAME  = WRK_OFFSNAME1;                                0
      RCBBKW3_MESE.OFFERANK  = WRK_OFFERANK1;                                0
      RCBBKW3_MESE.IOPUCTY   = RCBBKW4_DATA.IOPUCTY;                         0
      RCBBKW3_MESE.IAGRCID   = RCBBKW4_DATA.IAGRCID;                         0
      RCBBKW3_MESE.FAGRINT   = RCBBKW4_DATA.FAGRINT;                         0
      RCBBKW3_MESE.ICUSUSE   = RCBBKW4_DATA.ICUSUSE;                         0
      RCBBKW3_MESE.IAGRENO   = RCBBKW4_DATA.IAGRENO;                         0
      RCBBKW3_MESE.DAGRCAS   = RCBBKW4_DATA.DAGRCAS;                         0
      RCBBKW3_MESE.DAGRVEX   = RCBBKW4_DATA.DAGRVEX;                         0
      RCBBKW3_MESE.IOFFNIK   = RCBBKW4_DATA.IOFFNIK;                         0
      RCBBKW3_MESE.IOVSNIK   = RCBBKW4_DATA.IOVSNIK;                         0
                                      /* EOC CEDS00000644 */
    END;
  END;

 IF RCBBKW2_MESE.DAGRVEX ¬= '9999-12-31' THEN    /* SOC CEDS00000507 */
    MESE_START_DATE_NXT = CALC_DATE(RCBBKW2_MESE.DAGRVEX,'D',1);
 ELSE
    MESE_START_DATE_NXT =  RCBBKW2_MESE.DAGRVEX;
 /*MESE_START_DATE_NXT = CALC_DATE(RCBBKW2_MESE.DAGRVEX,'D',1);      */
                                                 /* EOC CEDS00000507 */
 PREV_SSK_MESE   =  SSK_MESE_STRING;
                                                                        05770000
 END RCBBK7M_T120_WRITE_RECORD;                                         05780000
1/********************************************************************/ 04870000
 /*                                                                  */ 04880000
 /* MODULE NAME      : RCBBK7M_MESE_WRITE_RECORD                     */ 04890000
 /*                                                                  */ 04900000
 /* DESCRIPTION      : WHEN MULTIPLE OFFERINGS (MESE) FOR SLC        */ 04910004
 /*                    TRANSLATION WITH OVERLAPPING DATES FOR THE    */ 04920000
 /*                    SAME TOS,THEN FOR THE OVERLAPPING PERIOD SLC  */ 04920000
 /*                    TRANSLATION PREFERENCE WOULD BE GIVEN FOR     */ 04920000
 /*                    OFFERING THAT HAS A HIGHER RANK IN T691.      */ 04920000
 /********************************************************************/ 04930000
 RCBBK7M_MESE_WRITE_RECORD : PROC;                                      04940000

 SSK_TRANS.CTRYNO             = RCBBKW3_MESE.IOPUCTY;
 SSK_TRANS.PRODUCT_TYPE       = SUBSTR(RCBBKW3_MESE.IOVSNIK,1,4);
 SSK_TRANS.ORIGIN             = SUBSTR(RCBBKW3_MESE.IOVSNIK,5,2);
 SSK_TRANS.SEQUENCE_NUMBER    = SUBSTR(RCBBKW3_MESE.IOVSNIK,7,7);
                                         /* WHEN KEYS ARE EQUAL      */
 IF SSK_TRANS_STRING = PREV_SSK_TRANS_STRING  THEN
  DO;
    KW3_ARRAY_OP_COUNT = KW3_ARRAY_OP_COUNT + 1;
    MESE_OP_ARRAY_REC(KW3_ARRAY_OP_COUNT) = RCBBKW3_REC_PREV;
    RCBBKW3_REC_PREV = RCBBKW3_REC;
  END;
 ELSE
  DO;
    IF RCBBKW3_REC_PREV ¬= '' THEN
     DO;
      SWITCH_WRITE_OUTPUT = TRUE;
      KW3_ARRAY_OP_COUNT = KW3_ARRAY_OP_COUNT + 1;
      MESE_OP_ARRAY_REC(KW3_ARRAY_OP_COUNT) = RCBBKW3_REC_PREV;
     END;

    RCBBKW3_REC_PREV = RCBBKW3_REC;
  END;
  CALL RCBBK7M_PROCESS_OVERLAP;

 END RCBBK7M_MESE_WRITE_RECORD;                                         05780000
1/********************************************************************/ 04870000
 /*                                                                  */ 04880000
 /* MODULE NAME      : RCBBK7M_PROCESS_OVERLAP                       */ 04890000
 /*                                                                  */ 04900000
 /* DESCRIPTION      : WRITE RECORD FOR MESE SLC TRANSLATION         */ 04910004
 /*                                                                  */ 04920000
 /********************************************************************/ 04930000
 RCBBK7M_PROCESS_OVERLAP : PROC;                                        04940000

 IF SWITCH_WRITE_OUTPUT THEN
  DO;                                                                   05770000
    I = 1;
    J = 2;
    K = KW3_ARRAY_OP_COUNT;
                                       /* SOC CEDS00000644 */
    DO WHILE ( I<= K & K ¬= 1);
                                       /* EOC CEDS00000644 */
      IF MESE_OP_ARRAY.OFFERANK(I) > MESE_OP_ARRAY.OFFERANK(J) THEN
        DO;
         OVERLAP_AREA = '';
         START_DATE_1 = MESE_OP_ARRAY.DAGRCAS(I);
         END_DATE_1   = MESE_OP_ARRAY.DAGRVEX(I);
         START_DATE_2 = MESE_OP_ARRAY.DAGRCAS(J);
         END_DATE_2   = MESE_OP_ARRAY.DAGRVEX(J);

         CALL FIND_DATE_OVERLAP;

         IF TYPE_OF_OVERLAP = '1' THEN          /* WHEN FULL OVERLAP */
           DO;
             G_WRKMSG.TXTFIELD_1 = MESE_OP_ARRAY.DAGRCAS(J);
             G_WRKMSG.TXTFIELD_2 = MESE_OP_ARRAY.DAGRVEX(J);
             G_WRKMSG.TXTFIELD_3 = MESE_OP_ARRAY.IOFFNIK(J);
             CALL RCBBK7M_ISSUE_MSG('0263');
             MESE_OP_ARRAY(J) = '';
           END;

         IF TYPE_OF_OVERLAP = '2' THEN           /* PARTIAL OVERLAP  */
          DO;
           SELECT;
            WHEN(BEFORE_DATE_FROM = '0') /* WHEN START DATE ARE SAME */
             DO; /* WHEN END DATES ARE SAME OR END DATE OF REC1>REC2 */
               IF AFTER_DATE_FROM = '0' | AFTER_DATE_FROM = '1' THEN
                 DO;
                   G_WRKMSG.TXTFIELD_1 = MESE_OP_ARRAY.DAGRCAS(J);
                   G_WRKMSG.TXTFIELD_2 = MESE_OP_ARRAY.DAGRVEX(J);
                   G_WRKMSG.TXTFIELD_3 = MESE_OP_ARRAY.IOFFNIK(J);
                   CALL RCBBK7M_ISSUE_MSG('0263');
                   MESE_OP_ARRAY(J) = ''; /* REJECT OVERLAPPING PART */
                 END;
               IF AFTER_DATE_FROM = '2' THEN
                 DO;                 /* WHEN END DATE OF REC2 > REC1 */
                   G_WRKMSG.TXTFIELD_1 = MESE_OP_ARRAY.DAGRCAS(J);
                   G_WRKMSG.TXTFIELD_2 = MESE_OP_ARRAY.DAGRVEX(J);
                   G_WRKMSG.TXTFIELD_3 = MESE_OP_ARRAY.IOFFNIK(J);
                   CALL RCBBK7M_ISSUE_MSG('0263');
                   /* REJECT OVERLAPPING PART AND MAKE START DATE AS */
                   /* END DATE + 1                                   */
                   MESE_OP_ARRAY.DAGRCAS(J) = START_DATE_AFTER;
                 END;
             END;
            WHEN(BEFORE_DATE_FROM = '1') /*START DATE1 < START DATE2 */
             DO; /* WHEN END DATES ARE SAME OR END DATE OF REC1>REC2 */
               IF AFTER_DATE_FROM = '0' | AFTER_DATE_FROM = '1' THEN
                 DO;
                   G_WRKMSG.TXTFIELD_1 = MESE_OP_ARRAY.DAGRCAS(J);
                   G_WRKMSG.TXTFIELD_2 = MESE_OP_ARRAY.DAGRVEX(J);
                   G_WRKMSG.TXTFIELD_3 = MESE_OP_ARRAY.IOFFNIK(J);
                   CALL RCBBK7M_ISSUE_MSG('0263');
                   MESE_OP_ARRAY(J) = ''; /* REJECT OVERLAPPING PART */
                 END;
               IF AFTER_DATE_FROM = '2' THEN
                 DO;                 /* WHEN END DATE OF REC2 > REC1 */
                   G_WRKMSG.TXTFIELD_1 = MESE_OP_ARRAY.DAGRCAS(J);
                   G_WRKMSG.TXTFIELD_2 = MESE_OP_ARRAY.DAGRVEX(J);
                   G_WRKMSG.TXTFIELD_3 = MESE_OP_ARRAY.IOFFNIK(J);
                   CALL RCBBK7M_ISSUE_MSG('0263');
                   /* REJECT OVERLAPPING PART AND MAKE START DATE AS */
                   /* END DATE + 1                                   */
                   MESE_OP_ARRAY.DAGRCAS(J) = START_DATE_AFTER;
                 END;
             END;
            WHEN(BEFORE_DATE_FROM = '2') /*START DATE2 < START DATE1 */
             DO;                         /* IF END DATES ARE EQUAL   */
               IF AFTER_DATE_FROM = '0' THEN
                 DO;
                   G_WRKMSG.TXTFIELD_1 = MESE_OP_ARRAY.DAGRCAS(J);
                   G_WRKMSG.TXTFIELD_2 = MESE_OP_ARRAY.DAGRVEX(J);
                   G_WRKMSG.TXTFIELD_3 = MESE_OP_ARRAY.IOFFNIK(J);
                   CALL RCBBK7M_ISSUE_MSG('0263');
                   /* REJECT OVERLAPPING PART AND MAKE END DATE AS   */
                   /* START DATE OF REC1 - 1                         */
                   MESE_OP_ARRAY.DAGRVEX(J) = END_DATE_BEFORE;
                 END;
               IF AFTER_DATE_FROM = '1' THEN
                 DO;                      /* END DATE 1 > END DATE 2 */
                   G_WRKMSG.TXTFIELD_1 = MESE_OP_ARRAY.DAGRCAS(J);
                   G_WRKMSG.TXTFIELD_2 = MESE_OP_ARRAY.DAGRVEX(J);
                   G_WRKMSG.TXTFIELD_3 = MESE_OP_ARRAY.IOFFNIK(J);
                   CALL RCBBK7M_ISSUE_MSG('0263');
                   /* REJECT OVERLAPPING PART AND MAKE END DATE AS   */
                   /* START DATE OF REC1 - 1                         */
                   MESE_OP_ARRAY.DAGRVEX(J) = END_DATE_BEFORE ;
                 END;
               IF AFTER_DATE_FROM = '2' THEN
                 DO;                      /* END DATE 2 > END DATE 1 */
                   K = K + 1;
                   MESE_OP_ARRAY_REC(K) = MESE_OP_ARRAY_REC(J);
                   MESE_OP_ARRAY.DAGRVEX(J) = END_DATE_BEFORE;
                   MESE_OP_ARRAY.DAGRCAS(K) = START_DATE_AFTER;
                   MESE_OP_ARRAY.DAGRVEX(K) = END_DATE_AFTER;
                 END;
             END;
           END;
          END;
        END;
      J = J + 1;
                                         /* SOC CEDS00000644 */
      DO WHILE( MESE_OP_ARRAY_REC(J) = '' & J <= K );
                                         /* EOC CEDS00000644 */
        J = J + 1;
      END;
      IF J > K THEN
       DO;
         I = I + 1;
         J = 1 ;
                                         /* SOC CEDS00000644 */
         DO WHILE( MESE_OP_ARRAY_REC(I) = '' & I <= K );
                                         /* EOC CEDS00000644 */
           I = I + 1;
         END;
       END;
    END;
    I = 1;
                                        /* SOC CEDS00000644 */
    DO WHILE ( I <= K );
                                        /* EOC CEDS00000644 */
      IF MESE_OP_ARRAY_REC(I) ¬= '' THEN
       DO;
        WRITE FILE (RCBBKW3) FROM (MESE_OP_ARRAY_REC(I));
        COUNT.CNT_CTRY.RCBBKW3 = COUNT.CNT_CTRY.RCBBKW3 + 1;
       END;
      I = I + 1;
    END;
   KW3_ARRAY_OP_COUNT = 0;
   SWITCH_WRITE_OUTPUT = FALSE;
   MESE_OP_ARRAY(*) = '';
  END;

 PREV_SSK_TRANS_STRING = SSK_TRANS_STRING ;

 END RCBBK7M_PROCESS_OVERLAP;                                           05780000
1/********************************************************************/ 14920000
 /*                                                                  */ 14930000
 /* MODULE NAME      : FIND_DATE_OVERLAP                             */ 14940000
 /*                                                                  */ 14950000
 /* DESCRIPTION      : FIND THE DATE OVERLAP BETWEEN TWO DATES       */ 14960000
 /*                                                                  */ 14970000
 /********************************************************************/ 14980000
 FIND_DATE_OVERLAP : PROC;                                              14990000
                                                                        15000000
 START_DATE_BEFORE   = '';
 END_DATE_BEFORE     = '';
 BEFORE_DATE_FROM    = '0';
 START_DATE_OVERLAP  = '';
 END_DATE_OVERLAP    = '';
 TYPE_OF_OVERLAP     = '0';
 START_DATE_AFTER    = '';
 END_DATE_AFTER      = '';
 AFTER_DATE_FROM     = '0';
                                                                        15100000
 SELECT;                                                                15110099
   WHEN (START_DATE_2 > END_DATE_1)        /* WHEN |------|          */ 15120099
     DO;                                   /*              |------|  */ 15130099
       START_DATE_BEFORE  = START_DATE_1;                               15140099
       END_DATE_BEFORE    = END_DATE_1;                                 15150099
       BEFORE_DATE_FROM   = '1';                                        15160099

       START_DATE_AFTER   = START_DATE_2;                               15180099
       END_DATE_AFTER     = END_DATE_2;                                 15190099
       AFTER_DATE_FROM    = '2';                                        15200099
     END;                                                               15210099
   WHEN (START_DATE_1 > END_DATE_2)        /* WHEN         |------|  */ 15220099
     DO;                                   /*      |------|          */ 15230099
       START_DATE_BEFORE  = START_DATE_2;                               15240099
       END_DATE_BEFORE    = END_DATE_2;                                 15250099
       BEFORE_DATE_FROM   = '2';                                        15260099
                                                                        15270099
       START_DATE_AFTER   = START_DATE_1;                               15280099
       END_DATE_AFTER     = END_DATE_1;                                 15290099
       AFTER_DATE_FROM    = '1';                                        15300099
     END;                                                               15310099
   WHEN (START_DATE_1 > START_DATE_2)     /* WHEN         |-------~  */ 15320099
     DO;                                  /*        |-------------~  */ 15330099
       START_DATE_BEFORE  = START_DATE_2;                               15340099
       END_DATE_BEFORE    = CALC_DATE(START_DATE_1,'D',-1);             15350099
       BEFORE_DATE_FROM   = '2';                                        15360099
                                                                        15370099
       START_DATE_OVERLAP = START_DATE_1;                               15380099
       TYPE_OF_OVERLAP    = '2';                                        15390099
     END;                                                               15400099
   WHEN (START_DATE_1 = START_DATE_2)     /* WHEN   |----------~     */ 15410099
     DO;                                  /*        |----------~     */ 15420099
       START_DATE_OVERLAP= START_DATE_1;                                15430099
       TYPE_OF_OVERLAP   = '1';                                         15440099
     END;                                                               15450099
   WHEN (START_DATE_1 < START_DATE_2)     /* WHEN   |------------~   */ 15460099
     DO;                                  /*            |--------~   */ 15470099
       START_DATE_BEFORE  = START_DATE_1;                               15480099
       END_DATE_BEFORE    = CALC_DATE(START_DATE_2,'D',-1);             15490099
       BEFORE_DATE_FROM   = '1';                                        15500099
                                                                        15510099
       START_DATE_OVERLAP = START_DATE_2;                               15520099
       TYPE_OF_OVERLAP    = '2';                                        15530099
     END;                                                               15540099
   OTHERWISE                                                            15550099
     DO;                                                                15560099
         CALL RCBBK7M_ERROR (NULL(), 'OTHER', '#020');                  15570099
     END;                                                               15580099
 END;                                                                   15590099
                                                                        15600099
 IF TYPE_OF_OVERLAP ¬= '0' THEN                                         15610099
   DO;                                                                  15620099
     SELECT;                                                            15630099
       WHEN(END_DATE_1 > END_DATE_2)      /* WHEN   ~----------|     */ 15640099
         DO;                              /*        ~------|         */ 15650099
           END_DATE_OVERLAP   = END_DATE_2;                             15660099
           TYPE_OF_OVERLAP    = '2';                                    15670099
                                                                        15680099
           START_DATE_AFTER   = CALC_DATE(END_DATE_2,'D',1);            15690099
           END_DATE_AFTER     = END_DATE_1;                             15700099
           AFTER_DATE_FROM    = '1';                                    15710099
         END;                                                           15720099
       WHEN(END_DATE_1 = END_DATE_2)       /* WHEN   ~----------|     */15730099
         DO;                               /*        ~----------|     */15740099
           END_DATE_OVERLAP   = END_DATE_1;                             15750099
         END;                                                           15770099
       WHEN(END_DATE_1 < END_DATE_2)       /* WHEN   ~-------|        */15780099
         DO;                               /*        ~-----------|    */15790099
           END_DATE_OVERLAP   = END_DATE_1;                             15800099
           TYPE_OF_OVERLAP    = '2';                                    15810099
                                                                        15820099
           START_DATE_AFTER   = CALC_DATE(END_DATE_1,'D',1);            15830099
           END_DATE_AFTER     = END_DATE_2;                             15840099
           AFTER_DATE_FROM    = '2';                                    15850099
         END;                                                           15860099
       OTHERWISE                                                        15870099
         DO;                                                            15880099
             CALL RCBBK7M_ERROR (NULL(), 'OTHER', '#021');              15890099
         END;                                                           15900099
     END;                                                               15910099
   END;                                                                 15920099
 END FIND_DATE_OVERLAP;                                                 15930000
1/********************************************************************/ 06520000
 /*                                                                  */ 06530000
 /* MODULE NAME      : RABBK7M_READ_RCBBKW0                          */ 06540000
 /*                                                                  */ 06550000
 /* DESCRIPTION      : READ RECORD FROM SORTED UNLOAD FILE           */ 06560000
 /*                                                                  */ 06570000
 /********************************************************************/ 06580000
 RABBK7M_READ_RCBBKW0: PROC;                                            06590000
                                                                        06600000
 READ FILE(RCBBKW0) INTO (RCBBKW0_REC);                                 06610000
                                 /* SOC CEDS00000644 */
 READ FILE(RCBBKW4) INTO (RCBBKW4_REC);                                 06610000
                                 /* EOC CEDS00000644 */
                                                                        06620000
 END RABBK7M_READ_RCBBKW0;                                              06630000
 /********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : CALC_DATE                                     */
 /*                                                                  */
 /* DESCRIPTION      : PROCESS DATE USING RCB004M                    */
 /*                                                                  */
 /********************************************************************/
 CALC_DATE: PROC   (IN_DATE,
                    CALC_TYPE,
                    CALC_VALUE) RETURNS(CHAR(10));

 DCL IN_DATE      CHAR(10);
 DCL CALC_TYPE    CHAR(1);
 DCL CALC_VALUE   FIXED DEC(3,0);

 DATE_AREA.WD_IN_FORMAT   = 'ISO';
 DATE_AREA.WD_OUT_FORMAT  = 'ISO';
 DATE_AREA.WD_FUNCTION    = 'C';
 DATE_AREA.WD_PERIOD_TYPE = CALC_TYPE;
 DATE_AREA.WD_PERIOD      = CALC_VALUE;
 DATE_AREA.WD_IN_DATE     = IN_DATE;

 CALL RCB004M (ADDR (DATE_AREA));;

 IF DATE_AREA.WD_STATUS  ¬= ' '
 THEN
   DO;
     G_WRKMSG.TXTFIELD_1  = 'RCB004M-INPUT DATE';/* SOC CEDS00000507 */
     G_WRKMSG.TXTFIELD_2  = IN_DATE;
     G_WRKMSG.TXTFIELD_3  = 'RC';
     G_WRKMSG.TXTFIELD_4  = DATE_AREA.WD_STATUS;
     CALL RCBBK7M_ISSUE_MSG('0012');             /* EOC CEDS00000507 */
     CALL RCBBK7M_ERROR (NULL,'OTHER','#029');
   END;

 RETURN(DATE_AREA.WD_OUT_DATE);

 END CALC_DATE;
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : VALIDATE_DATE                                  */
 /*                                                                  */
 /* DESCRIPTION      : VALIDATE DATE PROCESSING                      */
 /********************************************************************/
0VALIDATE_DATE: PROC (DATE_IN) RETURNS(BIT(1));

 DCL L_RET            BIT(1) INIT('1'B);
 DCL DATE_IN          CHAR(10);

 L_RET                   = '1'B;

 DATE_AREA               = '';
 DATE_AREA.WD_IN_FORMAT  = 'ISO';
 DATE_AREA.WD_OUT_FORMAT = 'ISO';
 DATE_AREA.WD_FUNCTION   = 'V';
 DATE_AREA.WD_IN_DATE    = DATE_IN;
 CALL RCB004M (PTR_DATE_AREA);
                                         /* TEST RESULT FROM RCB004M */
 IF (DATE_AREA.WD_STATUS ¬= ' ') THEN
 DO;
   L_RET = FALSE;
 END;

 RETURN(L_RET);

0END VALIDATE_DATE;
1/********************************************************************/ 06650000
 /*                                                                  */ 06660000
 /* MODULE NAME      : RCBBK7M_INIT_PROG                             */ 06670000
 /*                                                                  */ 06680000
 /* DESCRIPTION      : INITIAL ACTIONS FOR THE PROGRAM               */ 06690000
 /*                                                                  */ 06700000
 /********************************************************************/ 06710000
 RCBBK7M_INIT_PROG : PROC;                                              06720000
                                                                        06730000
 WRK_CTRY_IDX      = 0;                                                 06740000
                                                                        06750000
 PTR_INT_AREA      = ADDR (PARM_INT_AREA);                              06760000
 PTR_RETURN_AREA   = ADDR (RETURN_AREA);                                06770000
 PTR_COUNTRY_AREA  = ADDR (COUNTRY_AREA);                               06780000
 PTR_RUN_DATE_AREA = ADDR (RUN_DATE_AREA);                              06790000
 PTR_DATE_AREA     = ADDR (DATE_AREA);                                  05230000
 PTR_RCBV500       = ADDR (TB_RCBV500);                                 06800000
 PTR_RCBV500I      = ADDR (TB_RCBV500_I);                               06810000

 SSK_STRING                    = '';
 PREV_SSK_STRING               = '';        /* INITIALISE VARIABLES */

 SSK_MESE_STRING               = '';
 PREV_SSK_MESE                 = '';        /* INITIALISE VARIABLES */

 SSK_TRANS_STRING              = '';
 PREV_SSK_TRANS_STRING         = '';        /* INITIALISE VARIABLES */
 RCBBKW3_REC_PREV              = '';
 MESE_OP_ARRAY(*)              = '';
 KW3_ARRAY_OP_COUNT            = 0;

 COUNT.CNT_CTRY.RCBBKW0        = 0;                                     03500001
 COUNT.CNT_CTRY.RCBBKW1        = 0;                                     03500001
 COUNT.CNT_CTRY.RCBBKW2        = 0;                                     03500001
 COUNT.CNT_CTRY.RCBBKW3        = 0;                                     03500001

 COUNT.CNT_TOT.RCBBKW0         = 0;
 COUNT.CNT_TOT.RCBBKW1         = 0;
 COUNT.CNT_TOT.RCBBKW2         = 0;
 COUNT.CNT_TOT.RCBBKW3         = 0;
                                                                        06820000
 PARM_INT_AREA.MSG_AREA        = '';                                    06860000
 PARM_INT_AREA.ERR_AREA        = '';                                    06870000
 PARM_INT_AREA.MSG_REQUEST     = 'O';                                   06880000
 PARM_INT_AREA.MSG_TARGET      = 'F';                                   06890000
 PARM_INT_AREA.ID_SOURCE_APPL  = 'RCB';                                 06900000
 PARM_INT_AREA.ID_MOD_LEVEL    = 1;                                     06910000
 PARM_INT_AREA.ID_MOD_PATH (1) = WRK_MOD_NAME;                          06920000
 PARM_INT_AREA.ID_SOURCE_PROG  = WRK_PGM_NAME;                          06930000
 PARM_INT_AREA.SYSTEM_TYPE     = WRK_SYSTEM_TYPE;                       06940000
 PARM_INT_AREA.PTR_PCB_IO      = NULL;                                  06950000
 PARM_INT_AREA.PTR_PCB_ALT     = NULL;                                  06960000
                                                                        06970000
 CALL RCB0M1M (PTR_INT_AREA);                                           06980000
                                                                        06990000
 CALL RCB0T1M (PTR_INT_AREA);            /* RETRIEVE SYSTEM DATE   */   07000000
 WRK_DATETIME = PARM_INT_AREA.SYSTEM_DATE || '.' || TIME();             07010000
                                                                        07020000

 CALL RCB019M (PTR_COUNTRY_AREA,         /* RETRIEVE ALL COUNTRIES */   07030000
               PTR_INT_AREA);                                           07040000
                                                                        07050000

 IF COUNTRY_AREA.COUNT_CTRY = 0                                         07060000
 THEN DO;                                                               07070000
   CALL RCBBK7M_ISSUE_MSG('0005');
   CALL RCBBK7M_ERROR (NULL, 'OTHER', '#004');                          07120001
 END;                                                                   07130000
                                                                        07140000
 OPEN FILE (RCBBKW0);
                                    /* SOC CEDS00000644 */
 OPEN FILE (RCBBKW4);
                                    /* EOC CEDS00000644 */
 OPEN FILE (RCBBKW1);
 OPEN FILE (RCBBKW2);
 OPEN FILE (RCBBKW3);

 CALL RABBK7M_READ_RCBBKW0;                /* INITIAL READ          */

 IF ( EOF_RCBBKW0 )                                                     02350000
 THEN DO;                                  /* EMPTY INPUT FILE       */ 02360000
   G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW0;
   CALL RCBBK7M_ISSUE_MSG('0013');
   CALL RCBBK7M_ERROR (NULL, 'OTHER', '#002');
 END;                                                                   02450000
                                       /* SOC CEDS00000644 */
 IF ( EOF_RCBBKW4 )                                                     02350000
 THEN DO;                                  /* EMPTY INPUT FILE       */ 02360000
   G_WRKMSG.TXTFIELD_1 = WRK_RCBBKW4;
   CALL RCBBK7M_ISSUE_MSG('0013');
   CALL RCBBK7M_ERROR (NULL, 'OTHER', '#003');
 END;                                                                   02450000
                                       /* EOC CEDS00000644 */

 CALL RCBBK7M_PROCESS_HEADER;              /* PROCESS HEADER        */
 COUNT.CNT_TOT.RCBBKW0 = COUNT.CNT_TOT.RCBBKW0 + 1;                     02530000
                                       /* SOC CEDS00000644 */
 COUNT.CNT_TOT.RCBBKW4 = COUNT.CNT_TOT.RCBBKW4 + 1;                     02530000
                                       /* EOC CEDS00000644 */
 CALL RABBK7M_READ_RCBBKW0;                /* READ FIRST RECORD     */

 IF RCBBKW0_TRAILER.RECORD_TYPE = HIGH(3) THEN    /*SOC CEDS00000519 */
    DO;                                    /* COUNT TRAILER RECORD   */
       COUNT.CNT_TOT.RCBBKW0 = COUNT.CNT_TOT.RCBBKW0 + 1;               02530000
    END;                                          /*EOC CEDS00000519 */
 IF RCBBKW4_TRAILER.RECORD_TYPE = HIGH(3) THEN   /* SOC CEDS00000644 */
    DO;                                    /* COUNT TRAILER RECORD   */
       COUNT.CNT_TOT.RCBBKW4 = COUNT.CNT_TOT.RCBBKW4 + 1;               02530000
    END;                                         /* EOC CEDS00000644 */
 CALL RABBK7M_READ_RCB000;                 /* READ COUNTRY FROM PARM */ 02470000
 WRK_CTRYNO_FILE = RCBBKW0_DATA.IOPUCTY;                                02480000

 END RCBBK7M_INIT_PROG;                                                 07150000
1/*********************************************************************/07170000
 /*                                                                   */07180000
 /* MODULE NAME      :  RCBBK7M_CUSSLC_FALG                           */07190000
 /*                                                                   */07200000
 /* DESCRIPTION      :  CUSTOMER AGGREGATION FLAG                     */07210000
 /*                                                                   */07220000
 /*********************************************************************/07230000
 RCBBK7M_CUSSLC_FALG: PROC;                                             07240000

 WRK_OFFERING_ID    = '';
 WRK_OFFSNAME       = '';
 WRK_OFFERANK       = '';
 CUST_AGGR_FLAG     =   FALSE;                                          07280000
 SLC_TRANS_FLAG     =   FALSE;
 WRK_OFFERING_ID    =   RCBBKW0_DATA.IOFFNIK;

 EXEC SQL
    SELECT OFFERING_SNAME,SLC_TRANS_REQ_FLAG,CUST_AGGR_REQ_FLAG
           ,RANK_NUMBER
         INTO :TB_RCBV691.OFFERING_SNAME              :WRK_INDNULL
             ,:TB_RCBV691.SLC_TRANS_REQ_FLAG          :WRK_INDNULL
             ,:TB_RCBV691.CUST_AGGR_REQ_FLAG          :WRK_INDNULL
             ,:TB_RCBV691.RANK_NUMBER                 :WRK_INDNULL
     FROM RCBT0691_TRANS_OFF

     WHERE COUNTRY_NUMBER      =  :WRK_CTRYNO_FILE
     AND OFFERING_ID           =  :WRK_OFFERING_ID
     ;

   SELECT (SQLCODE);
   WHEN (0)
     DO;
       WRK_OFFSNAME        =   TB_RCBV691.OFFERING_SNAME;
       WRK_OFFERANK        =   TB_RCBV691.RANK_NUMBER;
       IF (VERIFY(WRK_OFFSNAME,ALPHA)¬=0)
       THEN
         DO;
           PARM_INT_AREA.MSG_VAR_CODES   = '';
           PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
           PARM_INT_AREA.MESSAGE_NUMBER  = '0256';
           PARM_INT_AREA.MSG_VAR_CODE_6  = '';
           PARM_INT_AREA.MSG_VAR_VALUE_6 = RCBBKW0_DATA.IOFFNIK;
           WRITE_RECORD                  = FALSE;
           CALL RCB0M1M (PTR_INT_AREA);
         END;

       IF TB_RCBV691.CUST_AGGR_REQ_FLAG       =  'Y' THEN
          CUST_AGGR_FLAG   =   TRUE;
       ELSE
          CUST_AGGR_FLAG   =   FALSE;

       IF TB_RCBV691.SLC_TRANS_REQ_FLAG       =  'Y' THEN
         DO;
           SLC_TRANS_FLAG  =   TRUE;
         END;
       ELSE
           SLC_TRANS_FLAG   =   FALSE;
     END;
   WHEN (100)
     DO;
       CALL RCBBK7M_ISSUE_MSG('0253');
     END;
   OTHERWISE
     DO;
       CALL RCBBK7M_ERROR (ADDR (SQLCA),'DB2','#025');
     END;
 END;

 END RCBBK7M_CUSSLC_FALG;                                               07410000
                                            /* SOC CEDS00000644 */
1/*********************************************************************/07170000
 /*                                                                   */07180000
 /* MODULE NAME      :  RCBBK7M_CUSSLC_FLAG1                          */07190000
 /*                                                                   */07200000
 /* DESCRIPTION      :  CUSTOMER AGGREGATION FLAG1                    */07210000
 /*                                                                   */07220000
 /*********************************************************************/07230000
 RCBBK7M_CUSSLC_FLAG1: PROC;                                            07240000

 WRK_OFFERING_ID1    = '';
 WRK_OFFSNAME1       = '';
 WRK_OFFERANK1       = '';
 CUST_AGGR_FLAG1     =   FALSE;                                         07280000
 SLC_TRANS_FLAG1     =   FALSE;
 WRK_OFFERING_ID1    =   RCBBKW4_DATA.IOFFNIK;

 EXEC SQL
    SELECT OFFERING_SNAME,SLC_TRANS_REQ_FLAG,CUST_AGGR_REQ_FLAG
           ,RANK_NUMBER
         INTO :TB_RCBV691_NEW.OFFERING_SNAME          :WRK_INDNULL1
             ,:TB_RCBV691_NEW.SLC_TRANS_REQ_FLAG      :WRK_INDNULL1
             ,:TB_RCBV691_NEW.CUST_AGGR_REQ_FLAG      :WRK_INDNULL1
             ,:TB_RCBV691_NEW.RANK_NUMBER             :WRK_INDNULL1
     FROM RCBT0691_TRANS_OFF

     WHERE COUNTRY_NUMBER      =  :WRK_CTRYNO_FILE
     AND OFFERING_ID           =  :WRK_OFFERING_ID1
     ;

   SELECT (SQLCODE);
   WHEN (0)
     DO;
       WRK_OFFSNAME1        = TB_RCBV691_NEW.OFFERING_SNAME;
       WRK_OFFERANK1        = TB_RCBV691_NEW.RANK_NUMBER;
       IF (VERIFY(WRK_OFFSNAME,ALPHA)¬=0)
       THEN
         DO;
           PARM_INT_AREA.MSG_VAR_CODES   = '';
           PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
           PARM_INT_AREA.MESSAGE_NUMBER  = '0256';
           PARM_INT_AREA.MSG_VAR_CODE_6  = '';
           PARM_INT_AREA.MSG_VAR_VALUE_6 = RCBBKW4_DATA.IOFFNIK;
           WRITE_RECORD                  = FALSE;
           CALL RCB0M1M (PTR_INT_AREA);
         END;

       IF TB_RCBV691_NEW.CUST_AGGR_REQ_FLAG       =  'Y' THEN
          CUST_AGGR_FLAG1   =   TRUE;
       ELSE
          CUST_AGGR_FLAG   =   FALSE;

       IF TB_RCBV691_NEW.SLC_TRANS_REQ_FLAG       =  'Y' THEN
         DO;
           SLC_TRANS_FLAG1   =   TRUE;
         END;
       ELSE
           SLC_TRANS_FLAG1   =   FALSE;
     END;
   WHEN (100)
     DO;
       CALL RCBBK7M_ISSUE_MSG('0253');
     END;
   OTHERWISE
     DO;
       CALL RCBBK7M_ERROR (ADDR (SQLCA),'DB2','#025');
     END;
 END;

 END RCBBK7M_CUSSLC_FLAG1;                                              07410000
                                            /* EOC CEDS00000644 */
1/*********************************************************************/07170000
 /*                                                                   */07180000
 /* MODULE NAME      :  RCBBK7M_INIT_FILE                             */07190000
 /*                                                                   */07200000
 /* DESCRIPTION      :  OPEN OUTPUT FILE AND WRITE A HEADER           */07210000
 /*                                                                   */07220000
 /*********************************************************************/07230000
 RCBBK7M_INIT_FILE: PROC;                                               07240000
                                      /* WRITE A HEADER TO THE FILE  */ 07320000
 RCBBKW1_REC                 = '';                                      07330001
 RCBBKW1_HEADER.REC_TYPE     = '01';                                    07340001
 RCBBKW1_HEADER.FILE_ID      = 'RCBBKW1';                               07350001
 RCBBKW1_HEADER.TIMESTAMP    = WRK_DATETIME;                            07360001
                                                                        07380000
 WRITE FILE (RCBBKW1) FROM (RCBBKW1_REC);                               07390001
                                      /* COUNTING THE HEADER RECORD  */
 COUNT.CNT_TOT.RCBBKW1    = COUNT.CNT_TOT.RCBBKW1 + 1;
                                                                        07400000
 RCBBKW2_REC                 = '';                                      07330001
 RCBBKW2_HEADER.REC_TYPE     = '01';                                    07340001
 RCBBKW2_HEADER.FILE_ID      = 'RCBBKW2';                               07350001
 RCBBKW2_HEADER.TIMESTAMP    = WRK_DATETIME;                            07360001
                                                                        07380000
 WRITE FILE (RCBBKW2) FROM (RCBBKW2_REC);                               07390001
                                      /* COUNTING THE HEADER RECORD  */
 COUNT.CNT_TOT.RCBBKW2    = COUNT.CNT_TOT.RCBBKW2 + 1;

 RCBBKW3_REC                  = '';                                     07330001
 RCBBKW3_HEADER.RECORD_TYPE   = LOW(3);                                 07340001
 RCBBKW3_HEADER.FILE_NAME     = 'RCBBKW3';                              07350001
 RCBBKW3_HEADER.CREATION_DATE = WRK_RUN_DATE;                           07360001
                                                                        07380000
 WRITE FILE (RCBBKW3) FROM (RCBBKW3_REC);                               07390001
                                      /* COUNTING THE HEADER RECORD  */
 COUNT.CNT_TOT.RCBBKW3    = COUNT.CNT_TOT.RCBBKW3 + 1;

 END RCBBK7M_INIT_FILE;                                                 07410000
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBK7M_PROCESS_HEADER                        */
 /*                                                                  */
 /* DESCRIPTION      : CHECK EXISTANCE AND VALUES OF HEADER_RECORD   */
 /*                                                                  */
 /********************************************************************/
 RCBBK7M_PROCESS_HEADER: PROC;

 IF RCBBKW0_HEADER.RECORD_TYPE ¬= LOW(3)     /* FIRST REC : HEADER ? */
 THEN DO;
   G_WRKMSG.TXTFIELD_1 = '';
   G_WRKMSG.TXTFIELD_2 = WRK_RCBBKW0;
   G_WRKMSG.TXTFIELD_3 = RCBBKW0_HEADER.RECORD_TYPE;
   CALL RCBBK7M_ISSUE_MSG('0018');
   CALL RCBBK7M_ERROR (NULL, 'OTHER', '#005');                /*ABORT*/
 END;
                                                 /* VALIDATE DATE    */
 IF (RCBBKW0_HEADER.CREATION_DATE ¬= '') &
    (¬ VALIDATE_DATE(RCBBKW0_HEADER.CREATION_DATE))
 THEN
 DO;
    G_WRKMSG.TXTFIELD_1 = 'RCBBKW0 CREATION DATE';
    G_WRKMSG.TXTFIELD_2 = RCBBKW0_HEADER.CREATION_DATE;
    CALL RCBBK7M_ISSUE_MSG('0012');
    CALL RCBBK7M_ERROR (NULL, 'OTHER', '#007');
 END;

 IF RCBBKW0_HEADER.FILE_NAME ¬= 'RCBBKW0'       /* NO PROPER HEADER */
 THEN
   DO;
     G_WRKMSG.TXTFIELD_1 =  WRK_RCBBKW0;
     G_WRKMSG.TXTFIELD_2 =  RCBBKW0_HEADER.FILE_NAME;
     CALL RCBBK7M_ISSUE_MSG('0014');
     CALL RCBBK7M_ERROR (NULL, 'OTHER', '#008');
   END;
 /* RETRIEVE PREVIOUS FILE SEQUENCE NUMBER FROM RCB035 */

 TB_RCBV500                  = '';
 TB_RCBV500_I                = '';
 TB_RCB035.NUMBER            = 'RCB035';
 TB_RCB035.PROC_ID           = COUNTRY_AREA.PROC_ID;
 TB_RCB035.SEQ_NR            = '03';
 TB_RCB035.FILLER_G1         = COUNTRY_AREA.CTRYNO(1);

0CALL RCBI50M ('R',
               PTR_RCBV500,
               PTR_RCBV500I,
               PTR_RETURN_AREA,
               PTR_INT_AREA);

 IF RETURN_AREA.RETURN_CODE = 4
 THEN DO;
               /* RETRIEVE THE OLD SEQUENCE NUMBER FOR COUNTRY BLANK */
               /* NOT FOUND HANDLED IN THE FOLLOWING WHEN */
   TB_RCB035.FILLER_G1 = '';
   CALL RCBI50M ('R',
                 PTR_RCBV500,
                 PTR_RCBV500I,
                 PTR_RETURN_AREA,
                 PTR_INT_AREA);
   IF RETURN_AREA.RETURN_CODE = 0
   THEN DO;
                 /* INSERT THE SEQUENCE NUMBER FOR FIRST RUN COUNTRY */
                 /* ERRORS HANDLED IN THE FOLLOWING WHEN */
     TB_RCB035.FILLER_G1 = COUNTRY_AREA.CTRYNO(1);
     CALL RCBF50M (PTR_RCBV500,
                   PTR_RCBV500I,
                   PTR_RETURN_AREA,
                   PTR_INT_AREA);
   END;
 END;

 SELECT (RETURN_AREA.RETURN_CODE);
   WHEN (0) DO;
     RCB035 = TB_RCB035, BY NAME;
     IF RCB035.FILE_SEQ_NUM_SC + 1 > RCBBKW0_HEADER.FILE_SEQ_NBR
     THEN
       DO;
         G_WRKMSG.TXTFIELD_1       = '';
         G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW0;
         WRK_FILE_SEQ              = RCBBKW0_HEADER.FILE_SEQ_NBR;
         G_WRKMSG.TXTFIELD_3       = WRK_FILE_SEQ;
         G_WRKMSG.TXTFIELD_4       = 'RCB035';
         G_WRKMSG.TXTFIELD_5       = TB_RCBV500.PARAMETER_KEY;
         WRK_FILE_SEQ              = RCB035.FILE_SEQ_NUM_SC + 1;
         G_WRKMSG.TXTFIELD_6       = WRK_FILE_SEQ;
         CALL RCBBK7M_ISSUE_MSG('0180');
         CALL RCBBK7M_ERROR (NULL,'OTHER','#010');
       END;
     ELSE
       WRK_FILE_SEQ = RCBBKW0_HEADER.FILE_SEQ_NBR;
   END;
   WHEN (4) DO;
     G_WRKMSG.TXTFIELD_1  = '';
     G_WRKMSG.TXTFIELD_2  = 'RCB035';
     G_WRKMSG.TXTFIELD_3  = TB_RCBV500.PARAMETER_KEY;

     CALL RCBBK7M_ISSUE_MSG('I050');
     CALL RCBBK7M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
                         'DB2','#015');
   END;
   OTHERWISE
     CALL RCBBK7M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
     /*                  'DB2','#020'); */        /* SOC CEDS00000507 */
                         'DB2','#016');           /* EOC CEDS00000507 */
 END;
                                             /* SOC CEDS00000644 */
 IF RCBBKW4_HEADER.RECORD_TYPE ¬= LOW(3)     /* FIRST REC : HEADER ? */
 THEN DO;
   G_WRKMSG.TXTFIELD_1 = '';
   G_WRKMSG.TXTFIELD_2 = WRK_RCBBKW4;
   G_WRKMSG.TXTFIELD_3 = RCBBKW4_HEADER.RECORD_TYPE;
   CALL RCBBK7M_ISSUE_MSG('0018');
   CALL RCBBK7M_ERROR (NULL, 'OTHER', '#005');                /*ABORT*/
 END;
                                                 /* VALIDATE DATE    */
 IF (RCBBKW4_HEADER.CREATION_DATE ¬= '') &
    (¬ VALIDATE_DATE(RCBBKW4_HEADER.CREATION_DATE))
 THEN
 DO;
    G_WRKMSG.TXTFIELD_1 = 'RCBBKW4 CREATION DATE';
    G_WRKMSG.TXTFIELD_2 = RCBBKW4_HEADER.CREATION_DATE;
    CALL RCBBK7M_ISSUE_MSG('0012');
    CALL RCBBK7M_ERROR (NULL, 'OTHER', '#007');
 END;

 IF RCBBKW4_HEADER.FILE_NAME ¬= 'RCBBKW0'       /* NO PROPER HEADER */
 THEN
   DO;
     G_WRKMSG.TXTFIELD_1 =  WRK_RCBBKW4;
     G_WRKMSG.TXTFIELD_2 =  RCBBKW4_HEADER.FILE_NAME;
     CALL RCBBK7M_ISSUE_MSG('0014');
     CALL RCBBK7M_ERROR (NULL, 'OTHER', '#008');
   END;
 /* RETRIEVE PREVIOUS FILE SEQUENCE NUMBER FROM RCB035 */

 TB_RCBV500                  = '';
 TB_RCBV500_I                = '';
 TB_RCB035.NUMBER            = 'RCB035';
 TB_RCB035.PROC_ID           = COUNTRY_AREA.PROC_ID;
 TB_RCB035.SEQ_NR            = '03';
 TB_RCB035.FILLER_G1         = COUNTRY_AREA.CTRYNO(1);

0CALL RCBI50M ('R',
               PTR_RCBV500,
               PTR_RCBV500I,
               PTR_RETURN_AREA,
               PTR_INT_AREA);

 IF RETURN_AREA.RETURN_CODE = 4
 THEN DO;
               /* RETRIEVE THE OLD SEQUENCE NUMBER FOR COUNTRY BLANK */
               /* NOT FOUND HANDLED IN THE FOLLOWING WHEN */
   TB_RCB035.FILLER_G1 = '';
   CALL RCBI50M ('R',
                 PTR_RCBV500,
                 PTR_RCBV500I,
                 PTR_RETURN_AREA,
                 PTR_INT_AREA);
   IF RETURN_AREA.RETURN_CODE = 0
   THEN DO;
                 /* INSERT THE SEQUENCE NUMBER FOR FIRST RUN COUNTRY */
                 /* ERRORS HANDLED IN THE FOLLOWING WHEN */
     TB_RCB035.FILLER_G1 = COUNTRY_AREA.CTRYNO(1);
     CALL RCBF50M (PTR_RCBV500,
                   PTR_RCBV500I,
                   PTR_RETURN_AREA,
                   PTR_INT_AREA);
   END;
 END;

 SELECT (RETURN_AREA.RETURN_CODE);
   WHEN (0) DO;
     RCB035 = TB_RCB035, BY NAME;
     IF RCB035.FILE_SEQ_NUM_SC + 1 > RCBBKW4_HEADER.FILE_SEQ_NBR
     THEN
       DO;
         G_WRKMSG.TXTFIELD_1       = '';
         G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW4;
         WRK_FILE_SEQ              = RCBBKW4_HEADER.FILE_SEQ_NBR;
         G_WRKMSG.TXTFIELD_3       = WRK_FILE_SEQ;
         G_WRKMSG.TXTFIELD_4       = 'RCB035';
         G_WRKMSG.TXTFIELD_5       = TB_RCBV500.PARAMETER_KEY;
         WRK_FILE_SEQ              = RCB035.FILE_SEQ_NUM_SC + 1;
         G_WRKMSG.TXTFIELD_6       = WRK_FILE_SEQ;
         CALL RCBBK7M_ISSUE_MSG('0180');
         CALL RCBBK7M_ERROR (NULL,'OTHER','#010');
       END;
     ELSE
       WRK_FILE_SEQ = RCBBKW4_HEADER.FILE_SEQ_NBR;
   END;
   WHEN (4) DO;
     G_WRKMSG.TXTFIELD_1  = '';
     G_WRKMSG.TXTFIELD_2  = 'RCB035';
     G_WRKMSG.TXTFIELD_3  = TB_RCBV500.PARAMETER_KEY;

     CALL RCBBK7M_ISSUE_MSG('I050');
     CALL RCBBK7M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
                         'DB2','#015');
   END;
   OTHERWISE
     CALL RCBBK7M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
                         'DB2','#016');
 END;
                                           /* EOC CEDS00000644 */
 END RCBBK7M_PROCESS_HEADER;
1/*********************************************************************/07430000
 /*                                                                   */07440000
 /* MODULE NAME      :  RABBK7M_END_FILE                              */07450000
 /*                                                                   */07460000
 /* DESCRIPTION      :  WRITE A TRAILER RECORD TO THE OUTPUT FILE     */07470000
 /*                     AND CLOSE IT                                  */07480000
 /*                                                                   */07490000
 /*********************************************************************/07500000
 RABBK7M_END_FILE: PROC;                                                07510000
                                         /* COUNTING TRAILER RECORD */
 COUNT.CNT_TOT.RCBBKW1    = COUNT.CNT_TOT.RCBBKW1 + 1;
 COUNT.CNT_TOT.RCBBKW2    = COUNT.CNT_TOT.RCBBKW2 + 1;
 COUNT.CNT_TOT.RCBBKW3    = COUNT.CNT_TOT.RCBBKW3 + 1;
                                     /* WRITE A TRAILER TO THE FILE  */ 07520000
 RCBBKW1_REC              = '';                                         07560001
 RCBBKW1_TRAILER.REC_TYPE = '99';                                       07570001
 RCBBKW1_TRAILER.CNT_RECS = COUNT.CNT_TOT.RCBBKW1;                      07580005
                                                                        07590000
 WRITE FILE (RCBBKW1) FROM (RCBBKW1_REC);                               07600001
                                                                        07610000
 RCBBKW2_REC              = '';                                         07560001
 RCBBKW2_TRAILER.REC_TYPE = '99';                                       07570001
 RCBBKW2_TRAILER.CNT_RECS = COUNT.CNT_TOT.RCBBKW2;                      07580005
                                                                        07590000
 WRITE FILE (RCBBKW2) FROM (RCBBKW2_REC);                               07600001

 RCBBKW3_REC                 = '';                                      07560001
 RCBBKW3_TRAILER.RECORD_TYPE = HIGH(3);                                 07570001
 WRK_CNT_RCBBKW3          = COUNT.CNT_TOT.RCBBKW3;
 RCBBKW3_TRAILER.REC_CNT  = WRK_CNT_RCBBKW3;                            07580005
                                                                        07590000
 WRITE FILE (RCBBKW3) FROM (RCBBKW3_REC);                               07600001

 WRK_KW0_COUNT = RCBBKW0_TRAILER.REC_CNT;
 IF WRK_KW0_COUNT ¬= COUNT.CNT_TOT.RCBBKW0    /* CHECK RECORD COUNTS */
 THEN
   DO;
     CALL RCBBK7M_ISSUE_MSG('0007');
                                                 /* SOC CEDS00000507 */
     /*CALL RCBBK7M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
                           'DB2','#030');                            */
     CALL RCBBK7M_ERROR (NULL,'OTHER','#030');   /* EOC CEDS00000507 */
   END;
                                              /* SOC CEDS00000644 */
 WRK_KW4_COUNT = RCBBKW4_TRAILER.REC_CNT;
 IF WRK_KW4_COUNT ¬= COUNT.CNT_TOT.RCBBKW4    /* CHECK RECORD COUNTS */
 THEN
   DO;
     CALL RCBBK7M_ISSUE_MSG('0007');

     /*CALL RCBBK7M_ERROR (ADDR(RETURN_AREA.RETURN_SQL),
                           'DB2','#030');                            */
     CALL RCBBK7M_ERROR (NULL,'OTHER','#031');
   END;
                                              /* EOC CEDS00000644 */
 CLOSE FILE (RCBBKW1);                                                  07620000
 CLOSE FILE (RCBBKW2);                                                  07620000
 CLOSE FILE (RCBBKW3);                                                  07620000
                                              /* SOC CEDS00000644 */
 CLOSE FILE (RCBBKW4);                                                  07620000
                                              /* EOC CEDS00000644 */
                                                                        07630000
 END RABBK7M_END_FILE;                                                  07640000
1/********************************************************************/
 /*                                                                  */
 /* MODULE NAME      : RCBBK7M_ISSUE_MSG                             */
 /*                                                                  */
 /* DESCRIPTION      : ISSSUE MESSAGE                                */
 /*                                                                  */
 /********************************************************************/
0RCBBK7M_ISSUE_MSG: PROC (A_MSG_NR);

 DCL A_MSG_NR          CHAR(04);

 /*RESET COMMON FIELDS*/
 PARM_INT_AREA.MSG_VAR_CODES = ' ';

 SELECT( A_MSG_NR );
                                                 /* SOC CEDS00000507 */
 WHEN ('I050') DO;                /* I050: RECORD NOT FOUND WITH KEY */
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'PN';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'PK';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_3;
 END;                                            /* EOC CEDS00000507 */
                               /* 0002: RUN DATE FOR COUNTRY         */
 WHEN ('0002') DO;
   PARM_INT_AREA.COUNTRY_NUMBER  = WRK_CTRYNO_PARM;                     03200000
   PARM_INT_AREA.MESSAGE_TYPE    = 'IS';                                03210000
   PARM_INT_AREA.MSG_VAR_CODE_6  = 'DT';                                03240000
   PARM_INT_AREA.MSG_VAR_VALUE_6 = WRK_RUN_DATE;                        03250000
 END;
 /* 0003: NUMBERS RECORDS READ(C1),ACCEPTED(C3),REJECTED(C4)       */
 WHEN ('0003') DO;                                      /* SKIPPED */
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);
   PARM_INT_AREA.MSG_VAR_CODES    = '';                                 04110000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               04120000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               04140000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;                04170000
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'C1';                               04150000
   CNT_PIC9                       =  G_WRKMSG.NUMFIELD_1;               04160000
   PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;                           04180000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'C3';
   CNT_PIC9                       =  G_WRKMSG.NUMFIELD_2;
   PARM_INT_AREA.MSG_VAR_VALUE_8  = CNT_PIC9;
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'C4';
   CNT_PIC9                       =  G_WRKMSG.NUMFIELD_3;
   PARM_INT_AREA.MSG_VAR_VALUE_9  = CNT_PIC9;
 END;
 /* 0004: NUMBERS RECORDS WRITTEN TO OUTPUT FILE */
 WHEN ('0004') DO;
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);
   PARM_INT_AREA.MSG_VAR_CODES    = '';                                 04110000
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';                               04230000
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';                               04250000
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;                04280001
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'C6';                               04260000
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_1;                04270001
   PARM_INT_AREA.MSG_VAR_VALUE_7  = CNT_PIC9;                           04290000
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'FL';                               04250000
   PARM_INT_AREA.MSG_VAR_VALUE_8  = G_WRKMSG.TXTFIELD_3;                04280001
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'C6';                               04260000
                                               /* SOC CEDS00000644 */
 /*CNT_PIC9                       = G_WRKMSG.NUMFIELD_3;  */
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_2;                04270001
                                               /* EOC CEDS00000644 */
   PARM_INT_AREA.MSG_VAR_VALUE_9  = CNT_PIC9;                           04290000
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'FL';                               04250000
   PARM_INT_AREA.MSG_VAR_VALUE_10 = G_WRKMSG.TXTFIELD_4;                04280001
   PARM_INT_AREA.MSG_VAR_CODE_11  = 'C6';                               04260000
   CNT_PIC9                       = G_WRKMSG.NUMFIELD_3;                04270001
   PARM_INT_AREA.MSG_VAR_VALUE_11 = CNT_PIC9;                           04290000
 END;
                               /* 0005: NO COUNTRY FOUND FOR PROGRAM */
 WHEN ('0005') DO;
   PARM_INT_AREA.COUNTRY_NUMBER   = '';
   PARM_INT_AREA.MSG_VAR_CODES    = '';
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
 END;
                               /* 0007: INVALID TRAINEL REC COUNT    */
 WHEN ('0007') DO;
   PARM_INT_AREA.MESSAGE_TYPE      = 'IS';
   PARM_INT_AREA.MESSAGE_NUMBER   = '0007';
   PARM_INT_AREA.MSG_VAR_CODE_6    = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6   = WRK_RCBBKW0;
   PARM_INT_AREA.MSG_VAR_CODE_7    = 'C7';
   PARM_INT_AREA.MSG_VAR_VALUE_7   = RCBBKW0_TRAILER.REC_CNT;
   CNT_PIC9                        = COUNT.CNT_TOT.RCBBKW0;
   PARM_INT_AREA.MSG_VAR_CODE_8    = 'C8';
   PARM_INT_AREA.MSG_VAR_VALUE_8   = CNT_PIC9;
 END;
                               /* 0012: INVALID DATE FOUND           */
 WHEN ('0012') DO;
   PARM_INT_AREA.COUNTRY_NUMBER    = WRK_CTRYNO_PARM;
   PARM_INT_AREA.MESSAGE_TYPE      = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6    = 'DN';
   PARM_INT_AREA.MSG_VAR_VALUE_6   = G_WRKMSG.TXTFIELD_1;
   PARM_INT_AREA.MSG_VAR_CODE_7    = 'DT';
   PARM_INT_AREA.MSG_VAR_VALUE_7   = G_WRKMSG.TXTFIELD_2;
   /*PARM_INT_AREA.MSG_VAR_CODE_8    = 'HW';     /* SOC CEDS00000507 */
   /*PARM_INT_AREA.MSG_VAR_VALUE_8   = WRK_TYPE ||WRK_SERIAL;
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'CU';
   PARM_INT_AREA.MSG_VAR_VALUE_9  = RCBBKW0_DATA.ICUSUSE;            */
   PARM_INT_AREA.MSG_VAR_CODE_8    = SUBSTR (G_WRKMSG.TXTFIELD_3,1,2);
   PARM_INT_AREA.MSG_VAR_VALUE_8   = G_WRKMSG.TXTFIELD_4;
   PARM_INT_AREA.MSG_VAR_CODE_9    = SUBSTR (G_WRKMSG.TXTFIELD_5,1,2);
   PARM_INT_AREA.MSG_VAR_VALUE_9   = G_WRKMSG.TXTFIELD_6;
                                                 /* EOC CEDS00000507 */
 END;
                                     /* 0013: EMPTY FILE OR DATABASE */
 WHEN ('0013') DO;
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_1;
 END;
 WHEN ('0014') DO;                    /* INVALID HEADER FOUND        */
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_1;
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'RT';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_2;
 END;
 WHEN ('0018') DO;                     /*  INVALID RECORD TYPE FOUND */
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'RT';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_3;
 END;
                                                 /* SOC CEDS00000507 */
 WHEN ('0180') DO;                 /* 0180: RUNS ARE OUT OF SEQUENCE */
   PARM_INT_AREA.COUNTRY_NUMBER   = SUBSTR (G_WRKMSG.TXTFIELD_1,1,3);
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_2;
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'SQ';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = G_WRKMSG.TXTFIELD_3;
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'PN';
   PARM_INT_AREA.MSG_VAR_VALUE_8  = G_WRKMSG.TXTFIELD_4;
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'PK';
   PARM_INT_AREA.MSG_VAR_VALUE_9  = G_WRKMSG.TXTFIELD_5;
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'SQ';
   PARM_INT_AREA.MSG_VAR_VALUE_10 = G_WRKMSG.TXTFIELD_6;
 END;                                             /* EOC CEDS00000507*/
 /* 0181: RECORD PRESENT, BUT COUNTRY NOT REQUESTED */
 WHEN ('0181') DO;
   PARM_INT_AREA.COUNTRY_NUMBER   = WRK_CTRYNO_FILE;
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'CY';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = RCBBKW0_DATA.IOPUCTY;
 END;
 /* 0184: COUNTRY REAUESTED, BUT NOT PRESENT */
 WHEN ('0184') DO;
   PARM_INT_AREA.COUNTRY_NUMBER   = WRK_CTRYNO_PARM;
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'CY';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = WRK_CTRYNO_PARM;
 END;
 WHEN ('0198') DO;                     /* CUSTOMER NUMBER INVALID    */
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'G_WRKMSG.TXTFIELD_1';
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'CU';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = RCBBKW0_DATA.ICUSUSE;
 END;
 WHEN ('0199') DO;                  /* MACHINE SERIAL NUMBER INVALID */
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'G_WRKMSG.TXTFIELD_1';
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'SQ';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = WRK_SERIAL;
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'HW';
   PARM_INT_AREA.MSG_VAR_VALUE_8  = WRK_TYPE ||WRK_SERIAL;
 END;
 WHEN ('0201') DO;                     /*  INVALID MACHINE TYPE      */
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = G_WRKMSG.TXTFIELD_1;
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'PT';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = WRK_TYPE;
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'HW';
   PARM_INT_AREA.MSG_VAR_VALUE_8  = WRK_TYPE ||WRK_SERIAL;
 END;
 WHEN ('0237') DO;                     /*  SERV_END < SERV_START */
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKW3';
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'D2';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = RCBBKW0_DATA.DAGRVEX;
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';
   PARM_INT_AREA.MSG_VAR_VALUE_8  = RCBBKW0_DATA.DAGRCAS;
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'HW';
   PARM_INT_AREA.MSG_VAR_VALUE_9  = WRK_TYPE ||WRK_SERIAL;
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'CU';
   PARM_INT_AREA.MSG_VAR_VALUE_10 = RCBBKW0_DATA.ICUSUSE;
 END;
 WHEN ('0253') DO;    /* NO MESE SLC FOR THE OFFERING SNAME AND SLC */
   PARM_INT_AREA.MSG_VAR_CODES   = '';
   PARM_INT_AREA.MESSAGE_TYPE    = 'IS';
   PARM_INT_AREA.MESSAGE_NUMBER  = '0253';
   PARM_INT_AREA.MSG_VAR_CODE_6  = '';
   PARM_INT_AREA.MSG_VAR_VALUE_6 = RCBBKW0_DATA.IOFFNIK;
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = WRK_TYPE ||WRK_SERIAL;
 END;

 WHEN ('0254') DO;    /* NO MESE SLC FOR THE OFFERING SNAME AND SLC */
   PARM_INT_AREA.MESSAGE_TYPE     = 'BU';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKW3';
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = SK_KW0_HW;
   PARM_INT_AREA.MSG_VAR_CODE_8   = '';
   PARM_INT_AREA.MSG_VAR_VALUE_8  = WRK_OFFSNAME;
   PARM_INT_AREA.MSG_VAR_CODE_9   = '';
   PARM_INT_AREA.MSG_VAR_VALUE_9  = WRK_SLC;
 END;
 WHEN ('0262') DO;                  /* OFFERING NICK NAME IS INVALID */
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'G_WRKMSG.TXTFIELD_1';
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'NK';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = RCBBKW0_DATA.IOFFNIK;
 END;
                              /* 0259: MSU DOES NOT OVERLAP WITH KA0 */
 WHEN ('0263') DO;
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
   PARM_INT_AREA.MSG_VAR_CODE_6   = 'FL';
   PARM_INT_AREA.MSG_VAR_VALUE_6  = 'RCBBKW0';
   PARM_INT_AREA.MSG_VAR_CODE_7   = 'HW';
   PARM_INT_AREA.MSG_VAR_VALUE_7  = WRK_TYPE ||WRK_SERIAL;
   PARM_INT_AREA.MSG_VAR_CODE_8   = 'D1';
   PARM_INT_AREA.MSG_VAR_VALUE_8  = G_WRKMSG.TXTFIELD_1;
   PARM_INT_AREA.MSG_VAR_CODE_9   = 'D2';
   PARM_INT_AREA.MSG_VAR_VALUE_9  = G_WRKMSG.TXTFIELD_2;
   PARM_INT_AREA.MSG_VAR_CODE_10  = 'NK';
   PARM_INT_AREA.MSG_VAR_VALUE_10 = G_WRKMSG.TXTFIELD_3;
 END;
                                  /* 9999: PROGRAM SUCCESFULLY ENDED */
 WHEN ('9999') DO;
   PARM_INT_AREA.MESSAGE_TYPE     = 'IS';
 END;
 OTHERWISE                            /* INVALID MSG NUMBER PASSED   */
   DO;
     PUT SKIP LIST( '#DBG# '||'A_MSG_NR=' || A_MSG_NR);
     CALL RCBBK7M_ERROR (NULL(), 'OTHER', '#037');
   END;
  END;

 /* MESSAGE IS VALID, REPORT MESSAGE */
 PARM_INT_AREA.MESSAGE_NUMBER = A_MSG_NR;
 CALL RCB0M1M(PTR_INT_AREA);

 /* PREVENT PRINTING PREVIOUS MESSAGE WORK FIELDS */
 G_WRKMSG = '';

 END RCBBK7M_ISSUE_MSG;
1/********************************************************************/ 07660000
 /*                                                                  */ 07670000
 /* MODULE NAME      : RABBK7M_END_PROG                              */ 07680000
 /*                                                                  */ 07690000
 /* DESCRIPTION      : ENDING ACTIONS FOR THE PROGRAM                */ 07700000
 /*                                                                  */ 07710000
 /********************************************************************/ 07720000
 RABBK7M_END_PROG : PROC;                                               07730000
                                                                        07740000
 TB_RCBV500             = '';
 TB_RCBV500_I           = '';
                                            /* UPDATE FILE SEQ.NUMBER */
 RCB035.FILE_SEQ_NUM_SC = WRK_FILE_SEQ;

 TB_RCB035              = RCB035 , BY NAME;

 CALL RCBG50M(PTR_RCBV500,
              PTR_RCBV500I,
              PTR_RETURN_AREA,
              PTR_INT_AREA);
 SELECT (RETURN_AREA.RETURN_CODE);
   WHEN(0);
   OTHERWISE
     CALL RCBBK7M_ERROR(ADDR(RETURN_AREA.RETURN_SQL),
     /*                'DB2','#030');*/        /* SOC CEDS00000507 */
                       'DB2','#035');          /* EOC CEDS00000507 */
 END;

 G_WRKMSG.TXTFIELD_1       = '';
                                     /* RECORDS READ FOR RCBBKW0   */
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW0;
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_TOT.RCBBKW0;
                                   /* RECORDS ACCEPTED FOR RCBBKW0 */
 G_WRKMSG.NUMFIELD_2       = COUNT.CNT_TOT.RCBBKW0_REP;
                                  /* RECORDS REJECTED FOR RCBBKW0 */
 G_WRKMSG.NUMFIELD_3       = COUNT.CNT_TOT.RCBBKW0_REJ;
 CALL RCBBK7M_ISSUE_MSG('0003');

                                       /* SOC CEDS00000644 */
 G_WRKMSG.TXTFIELD_1       = '';
                                     /* RECORDS READ FOR RCBBKW4   */
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW4;
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_TOT.RCBBKW4;
                                   /* RECORDS ACCEPTED FOR RCBBKW4 */
 G_WRKMSG.NUMFIELD_2       = COUNT.CNT_TOT.RCBBKW4_REP;
                                  /* RECORDS REJECTED FOR RCBBKW4 */
 G_WRKMSG.NUMFIELD_3       = COUNT.CNT_TOT.RCBBKW4_REJ;
 CALL RCBBK7M_ISSUE_MSG('0003');
                                       /* EOC CEDS00000644 */
                                                                        07870000
 G_WRKMSG.TXTFIELD_1       = '';
 G_WRKMSG.TXTFIELD_2       = WRK_RCBBKW1;
 G_WRKMSG.TXTFIELD_3       = WRK_RCBBKW2;
 G_WRKMSG.TXTFIELD_4       = WRK_RCBBKW3;
 G_WRKMSG.NUMFIELD_1       = COUNT.CNT_TOT.RCBBKW1;
 G_WRKMSG.NUMFIELD_2       = COUNT.CNT_TOT.RCBBKW2;
 G_WRKMSG.NUMFIELD_3       = COUNT.CNT_TOT.RCBBKW3;
 CALL RCBBK7M_ISSUE_MSG('0004');

 CALL RCBBK7M_ISSUE_MSG('9999');             /* ISSUE MESSAGE        */
                                             /* FOR COMPLETION       */ 07970000
                                                                        08010000
 END RABBK7M_END_PROG;                                                  08020000
1/********************************************************************/ 08040000
 /*                                                                  */ 08050000
 /* MODULE NAME      : RCBBK7M_ERROR                                 */ 08060001
 /*                                                                  */ 08070000
 /* DESCRIPTION      : CALLS THE COMMON ERROR ROUTINE AFTER FILLING  */ 08080000
 /*                    THE INPUT VARIABLES                           */ 08090000
 /*                                                                  */ 08100000
 /********************************************************************/ 08110000
0RCBBK7M_ERROR: PROC     (PTR_ERROR,                                    08120001
                          ERR_TYPE,                                     08130000
                          CALL_ID);                                     08140000
 DCL PTR_ERROR    PTR;                                                  08150000
 DCL ERR_TYPE     CHAR(8);                                              08160000
 DCL CALL_ID      CHAR(4);                                              08170000
                                                                        08180000
 PARM_INT_AREA.PTR_ERROR = PTR_ERROR;                                   08190000
 PARM_INT_AREA.ERR_TYPE  = ERR_TYPE;                                    08200000
 PARM_INT_AREA.CALL_ID   = CALL_ID;                                     08210000
                                                                        08220000
 CALL RCB0E1M (PTR_INT_AREA);                                           08230000
                                                                        08240000
0END RCBBK7M_ERROR;                                                     08250001
1/*******************************************************************/  08270000
 /*  DO NOT CHANGE THIS PART, IT IS MEANT FOR ABR                   */  08280000
 /*******************************************************************/  08290000
0%INCLUDE DAIFPLH ;                      /* COMPILE DATE/TIME STAMP */  08300000
 $DAIMOD (RCBBK7M);                      /* MODULE TO BE COMPILED   */  08310001
0/*******************************************************************/  08320000
 /* END OF ABR BLOCK                                                */  08330000
 /*******************************************************************/  08340000
 END RCBBK7M;                                                           08350001